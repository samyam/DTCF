#include "mpi.h"
#include "grid.h"
#include "tensor.h"
#include "contraction.h"
#include "redistribute.h"
#define DEBUG_T 0
using namespace std;

int main(int argc, char* argv[])
{
    MPI_Init(&argc, &argv);
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD,&rank);


    int Oa = atoi(argv[4]);
    int Ob = atoi(argv[4]);
    int Va = 8*atoi(argv[4]);
    int Vb = 8*atoi(argv[4]);
    if(rank == 0) cout<<"O : "<<Oa<<" V : "<<Va<<endl; 

    int* pgrid_4 = new int[4];
    pgrid_4[0] = atoi(argv[1]);
    pgrid_4[1] = atoi(argv[1]);
    pgrid_4[2] = atoi(argv[2]);
    pgrid_4[3] = atoi(argv[2]);

    Grid* grid = new Grid(4, pgrid_4);

    int* size__a10043 = new int[4];
    size__a10043[0] = Vb;
    size__a10043[1] = Vb;
    size__a10043[2] = Ob;
    size__a10043[3] = Ob;
    int* idmap__a10043 = new int[4];
    idmap__a10043[0] = 0;
    idmap__a10043[1] = 1;
    idmap__a10043[2] = 2;
    idmap__a10043[3] = 3;
    int* vgrid__a10043 = new int[4];
    vgrid__a10043[0] = atoi(argv[3]);
    vgrid__a10043[1] = atoi(argv[3]);
    vgrid__a10043[2] = atoi(argv[3]);
    vgrid__a10043[3] = atoi(argv[3]);
    Tensor* _a10043 = new Tensor("ccaa", idmap__a10043, size__a10043, vgrid__a10043, grid);
    _a10043->initialize();

    int* size__a10086 = new int[4];
    size__a10086[0] = Ob;
    size__a10086[1] = Vb;
    size__a10086[2] = Ob;
    size__a10086[3] = Ob;
    int* idmap__a10086 = new int[4];
    idmap__a10086[0] = 0;
    idmap__a10086[1] = 1;
    idmap__a10086[2] = 2;
    idmap__a10086[3] = 3;
    int* vgrid__a10086 = new int[4];
    vgrid__a10086[0] = atoi(argv[3]);
    vgrid__a10086[1] = atoi(argv[3]);
    vgrid__a10086[2] = atoi(argv[3]);
    vgrid__a10086[3] = atoi(argv[3]);
    Tensor* _a10086 = new Tensor("cccc", idmap__a10086, size__a10086, vgrid__a10086, grid);
    _a10086->initialize();

    int* size__a10089 = new int[4];
    size__a10089[0] = Vb;
    size__a10089[1] = Vb;
    size__a10089[2] = Ob;
    size__a10089[3] = Ob;
    int* idmap__a10089 = new int[4];
    idmap__a10089[0] = 0;
    idmap__a10089[1] = 1;
    idmap__a10089[2] = 2;
    idmap__a10089[3] = 3;
    int* vgrid__a10089 = new int[4];
    vgrid__a10089[0] = atoi(argv[3]);
    vgrid__a10089[1] = atoi(argv[3]);
    vgrid__a10089[2] = atoi(argv[3]);
    vgrid__a10089[3] = atoi(argv[3]);
    Tensor* _a10089 = new Tensor("cccc", idmap__a10089, size__a10089, vgrid__a10089, grid);
    _a10089->initialize();

    int* size__a10116 = new int[4];
    size__a10116[0] = Ob;
    size__a10116[1] = Vb;
    size__a10116[2] = Ob;
    size__a10116[3] = Ob;
    int* idmap__a10116 = new int[4];
    idmap__a10116[0] = 0;
    idmap__a10116[1] = 1;
    idmap__a10116[2] = 2;
    idmap__a10116[3] = 3;
    int* vgrid__a10116 = new int[4];
    vgrid__a10116[0] = atoi(argv[3]);
    vgrid__a10116[1] = atoi(argv[3]);
    vgrid__a10116[2] = atoi(argv[3]);
    vgrid__a10116[3] = atoi(argv[3]);
    Tensor* _a10116 = new Tensor("cccc", idmap__a10116, size__a10116, vgrid__a10116, grid);
    _a10116->initialize();

    int* size__a10119 = new int[4];
    size__a10119[0] = Vb;
    size__a10119[1] = Vb;
    size__a10119[2] = Ob;
    size__a10119[3] = Ob;
    int* idmap__a10119 = new int[4];
    idmap__a10119[0] = 0;
    idmap__a10119[1] = 1;
    idmap__a10119[2] = 2;
    idmap__a10119[3] = 3;
    int* vgrid__a10119 = new int[4];
    vgrid__a10119[0] = atoi(argv[3]);
    vgrid__a10119[1] = atoi(argv[3]);
    vgrid__a10119[2] = atoi(argv[3]);
    vgrid__a10119[3] = atoi(argv[3]);
    Tensor* _a10119 = new Tensor("cccc", idmap__a10119, size__a10119, vgrid__a10119, grid);
    _a10119->initialize();

    int* size__a10265 = new int[4];
    size__a10265[0] = Oa;
    size__a10265[1] = Ob;
    size__a10265[2] = Oa;
    size__a10265[3] = Ob;
    int* idmap__a10265 = new int[4];
    idmap__a10265[0] = 0;
    idmap__a10265[1] = 1;
    idmap__a10265[2] = 2;
    idmap__a10265[3] = 3;
    int* vgrid__a10265 = new int[4];
    vgrid__a10265[0] = atoi(argv[3]);
    vgrid__a10265[1] = atoi(argv[3]);
    vgrid__a10265[2] = atoi(argv[3]);
    vgrid__a10265[3] = atoi(argv[3]);
    Tensor* _a10265 = new Tensor("cccc", idmap__a10265, size__a10265, vgrid__a10265, grid);
    _a10265->initialize();

    int* size__a10295 = new int[4];
    size__a10295[0] = Oa;
    size__a10295[1] = Ob;
    size__a10295[2] = Ob;
    size__a10295[3] = Oa;
    int* idmap__a10295 = new int[4];
    idmap__a10295[0] = 0;
    idmap__a10295[1] = 1;
    idmap__a10295[2] = 2;
    idmap__a10295[3] = 3;
    int* vgrid__a10295 = new int[4];
    vgrid__a10295[0] = atoi(argv[3]);
    vgrid__a10295[1] = atoi(argv[3]);
    vgrid__a10295[2] = atoi(argv[3]);
    vgrid__a10295[3] = atoi(argv[3]);
    Tensor* _a10295 = new Tensor("cccc", idmap__a10295, size__a10295, vgrid__a10295, grid);
    _a10295->initialize();

    int* size__a10340 = new int[4];
    size__a10340[0] = Va;
    size__a10340[1] = Vb;
    size__a10340[2] = Oa;
    size__a10340[3] = Ob;
    int* idmap__a10340 = new int[4];
    idmap__a10340[0] = 0;
    idmap__a10340[1] = 1;
    idmap__a10340[2] = 2;
    idmap__a10340[3] = 3;
    int* vgrid__a10340 = new int[4];
    vgrid__a10340[0] = atoi(argv[3]);
    vgrid__a10340[1] = atoi(argv[3]);
    vgrid__a10340[2] = atoi(argv[3]);
    vgrid__a10340[3] = atoi(argv[3]);
    Tensor* _a10340 = new Tensor("cccc", idmap__a10340, size__a10340, vgrid__a10340, grid);
    _a10340->initialize();

    int* size__a10345 = new int[4];
    size__a10345[0] = Va;
    size__a10345[1] = Vb;
    size__a10345[2] = Ob;
    size__a10345[3] = Oa;
    int* idmap__a10345 = new int[4];
    idmap__a10345[0] = 0;
    idmap__a10345[1] = 1;
    idmap__a10345[2] = 2;
    idmap__a10345[3] = 3;
    int* vgrid__a10345 = new int[4];
    vgrid__a10345[0] = atoi(argv[3]);
    vgrid__a10345[1] = atoi(argv[3]);
    vgrid__a10345[2] = atoi(argv[3]);
    vgrid__a10345[3] = atoi(argv[3]);
    Tensor* _a10345 = new Tensor("cccc", idmap__a10345, size__a10345, vgrid__a10345, grid);
    _a10345->initialize();

    int* size__a10354 = new int[4];
    size__a10354[0] = Va;
    size__a10354[1] = Va;
    size__a10354[2] = Oa;
    size__a10354[3] = Oa;
    int* idmap__a10354 = new int[4];
    idmap__a10354[0] = 0;
    idmap__a10354[1] = 1;
    idmap__a10354[2] = 2;
    idmap__a10354[3] = 3;
    int* vgrid__a10354 = new int[4];
    vgrid__a10354[0] = atoi(argv[3]);
    vgrid__a10354[1] = atoi(argv[3]);
    vgrid__a10354[2] = atoi(argv[3]);
    vgrid__a10354[3] = atoi(argv[3]);
    Tensor* _a10354 = new Tensor("ccaa", idmap__a10354, size__a10354, vgrid__a10354, grid);
    _a10354->initialize();

    int* size__a10379 = new int[4];
    size__a10379[0] = Va;
    size__a10379[1] = Va;
    size__a10379[2] = Oa;
    size__a10379[3] = Oa;
    int* idmap__a10379 = new int[4];
    idmap__a10379[0] = 0;
    idmap__a10379[1] = 1;
    idmap__a10379[2] = 2;
    idmap__a10379[3] = 3;
    int* vgrid__a10379 = new int[4];
    vgrid__a10379[0] = atoi(argv[3]);
    vgrid__a10379[1] = atoi(argv[3]);
    vgrid__a10379[2] = atoi(argv[3]);
    vgrid__a10379[3] = atoi(argv[3]);
    Tensor* _a10379 = new Tensor("ccaa", idmap__a10379, size__a10379, vgrid__a10379, grid);
    _a10379->initialize();

    int* size__a10444 = new int[4];
    size__a10444[0] = Vb;
    size__a10444[1] = Vb;
    size__a10444[2] = Ob;
    size__a10444[3] = Ob;
    int* idmap__a10444 = new int[4];
    idmap__a10444[0] = 0;
    idmap__a10444[1] = 1;
    idmap__a10444[2] = 2;
    idmap__a10444[3] = 3;
    int* vgrid__a10444 = new int[4];
    vgrid__a10444[0] = atoi(argv[3]);
    vgrid__a10444[1] = atoi(argv[3]);
    vgrid__a10444[2] = atoi(argv[3]);
    vgrid__a10444[3] = atoi(argv[3]);
    Tensor* _a10444 = new Tensor("ccaa", idmap__a10444, size__a10444, vgrid__a10444, grid);
    _a10444->initialize();

    int* size__a10469 = new int[4];
    size__a10469[0] = Vb;
    size__a10469[1] = Vb;
    size__a10469[2] = Ob;
    size__a10469[3] = Ob;
    int* idmap__a10469 = new int[4];
    idmap__a10469[0] = 0;
    idmap__a10469[1] = 1;
    idmap__a10469[2] = 2;
    idmap__a10469[3] = 3;
    int* vgrid__a10469 = new int[4];
    vgrid__a10469[0] = atoi(argv[3]);
    vgrid__a10469[1] = atoi(argv[3]);
    vgrid__a10469[2] = atoi(argv[3]);
    vgrid__a10469[3] = atoi(argv[3]);
    Tensor* _a10469 = new Tensor("ccaa", idmap__a10469, size__a10469, vgrid__a10469, grid);
    _a10469->initialize();

    int* size__a10530 = new int[4];
    size__a10530[0] = Va;
    size__a10530[1] = Va;
    size__a10530[2] = Oa;
    size__a10530[3] = Oa;
    int* idmap__a10530 = new int[4];
    idmap__a10530[0] = 0;
    idmap__a10530[1] = 1;
    idmap__a10530[2] = 2;
    idmap__a10530[3] = 3;
    int* vgrid__a10530 = new int[4];
    vgrid__a10530[0] = atoi(argv[3]);
    vgrid__a10530[1] = atoi(argv[3]);
    vgrid__a10530[2] = atoi(argv[3]);
    vgrid__a10530[3] = atoi(argv[3]);
    Tensor* _a10530 = new Tensor("ccaa", idmap__a10530, size__a10530, vgrid__a10530, grid);
    _a10530->initialize();

    int* size__a10535 = new int[4];
    size__a10535[0] = Vb;
    size__a10535[1] = Vb;
    size__a10535[2] = Ob;
    size__a10535[3] = Ob;
    int* idmap__a10535 = new int[4];
    idmap__a10535[0] = 0;
    idmap__a10535[1] = 1;
    idmap__a10535[2] = 2;
    idmap__a10535[3] = 3;
    int* vgrid__a10535 = new int[4];
    vgrid__a10535[0] = atoi(argv[3]);
    vgrid__a10535[1] = atoi(argv[3]);
    vgrid__a10535[2] = atoi(argv[3]);
    vgrid__a10535[3] = atoi(argv[3]);
    Tensor* _a10535 = new Tensor("ccaa", idmap__a10535, size__a10535, vgrid__a10535, grid);
    _a10535->initialize();

    int* size__a10540 = new int[4];
    size__a10540[0] = Va;
    size__a10540[1] = Va;
    size__a10540[2] = Oa;
    size__a10540[3] = Oa;
    int* idmap__a10540 = new int[4];
    idmap__a10540[0] = 0;
    idmap__a10540[1] = 1;
    idmap__a10540[2] = 2;
    idmap__a10540[3] = 3;
    int* vgrid__a10540 = new int[4];
    vgrid__a10540[0] = atoi(argv[3]);
    vgrid__a10540[1] = atoi(argv[3]);
    vgrid__a10540[2] = atoi(argv[3]);
    vgrid__a10540[3] = atoi(argv[3]);
    Tensor* _a10540 = new Tensor("aacc", idmap__a10540, size__a10540, vgrid__a10540, grid);
    _a10540->initialize();

    int* size__a10545 = new int[4];
    size__a10545[0] = Vb;
    size__a10545[1] = Vb;
    size__a10545[2] = Ob;
    size__a10545[3] = Ob;
    int* idmap__a10545 = new int[4];
    idmap__a10545[0] = 0;
    idmap__a10545[1] = 1;
    idmap__a10545[2] = 2;
    idmap__a10545[3] = 3;
    int* vgrid__a10545 = new int[4];
    vgrid__a10545[0] = atoi(argv[3]);
    vgrid__a10545[1] = atoi(argv[3]);
    vgrid__a10545[2] = atoi(argv[3]);
    vgrid__a10545[3] = atoi(argv[3]);
    Tensor* _a10545 = new Tensor("aacc", idmap__a10545, size__a10545, vgrid__a10545, grid);
    _a10545->initialize();

    int* size__a10551 = new int[4];
    size__a10551[0] = Oa;
    size__a10551[1] = Oa;
    size__a10551[2] = Va;
    size__a10551[3] = Oa;
    int* idmap__a10551 = new int[4];
    idmap__a10551[0] = 0;
    idmap__a10551[1] = 1;
    idmap__a10551[2] = 2;
    idmap__a10551[3] = 3;
    int* vgrid__a10551 = new int[4];
    vgrid__a10551[0] = atoi(argv[3]);
    vgrid__a10551[1] = atoi(argv[3]);
    vgrid__a10551[2] = atoi(argv[3]);
    vgrid__a10551[3] = atoi(argv[3]);
    Tensor* _a10551 = new Tensor("aacc", idmap__a10551, size__a10551, vgrid__a10551, grid);
    _a10551->initialize();

    int* size__a10556 = new int[4];
    size__a10556[0] = Oa;
    size__a10556[1] = Oa;
    size__a10556[2] = Oa;
    size__a10556[3] = Oa;
    int* idmap__a10556 = new int[4];
    idmap__a10556[0] = 0;
    idmap__a10556[1] = 1;
    idmap__a10556[2] = 2;
    idmap__a10556[3] = 3;
    int* vgrid__a10556 = new int[4];
    vgrid__a10556[0] = atoi(argv[3]);
    vgrid__a10556[1] = atoi(argv[3]);
    vgrid__a10556[2] = atoi(argv[3]);
    vgrid__a10556[3] = atoi(argv[3]);
    Tensor* _a10556 = new Tensor("aacc", idmap__a10556, size__a10556, vgrid__a10556, grid);
    _a10556->initialize();

    int* size__a10671 = new int[4];
    size__a10671[0] = Ob;
    size__a10671[1] = Ob;
    size__a10671[2] = Vb;
    size__a10671[3] = Ob;
    int* idmap__a10671 = new int[4];
    idmap__a10671[0] = 0;
    idmap__a10671[1] = 1;
    idmap__a10671[2] = 2;
    idmap__a10671[3] = 3;
    int* vgrid__a10671 = new int[4];
    vgrid__a10671[0] = atoi(argv[3]);
    vgrid__a10671[1] = atoi(argv[3]);
    vgrid__a10671[2] = atoi(argv[3]);
    vgrid__a10671[3] = atoi(argv[3]);
    Tensor* _a10671 = new Tensor("aacc", idmap__a10671, size__a10671, vgrid__a10671, grid);
    _a10671->initialize();

    int* size__a10676 = new int[4];
    size__a10676[0] = Ob;
    size__a10676[1] = Ob;
    size__a10676[2] = Ob;
    size__a10676[3] = Ob;
    int* idmap__a10676 = new int[4];
    idmap__a10676[0] = 0;
    idmap__a10676[1] = 1;
    idmap__a10676[2] = 2;
    idmap__a10676[3] = 3;
    int* vgrid__a10676 = new int[4];
    vgrid__a10676[0] = atoi(argv[3]);
    vgrid__a10676[1] = atoi(argv[3]);
    vgrid__a10676[2] = atoi(argv[3]);
    vgrid__a10676[3] = atoi(argv[3]);
    Tensor* _a10676 = new Tensor("aacc", idmap__a10676, size__a10676, vgrid__a10676, grid);
    _a10676->initialize();

    int* size__a107369 = new int[2];
    size__a107369[0] = Oa;
    size__a107369[1] = Oa;
    int* idmap__a107369 = new int[2];
    idmap__a107369[0] = 0;
    idmap__a107369[1] = 1;
    int* vgrid__a107369 = new int[2];
    vgrid__a107369[0] = atoi(argv[3]);
    vgrid__a107369[1] = atoi(argv[3]);
    Tensor* _a107369 = new Tensor("cc", idmap__a107369, size__a107369, vgrid__a107369, grid);
    _a107369->initialize();

    int* size__a107370 = new int[4];
    size__a107370[0] = Va;
    size__a107370[1] = Va;
    size__a107370[2] = Oa;
    size__a107370[3] = Oa;
    int* idmap__a107370 = new int[4];
    idmap__a107370[0] = 0;
    idmap__a107370[1] = 1;
    idmap__a107370[2] = 2;
    idmap__a107370[3] = 3;
    int* vgrid__a107370 = new int[4];
    vgrid__a107370[0] = atoi(argv[3]);
    vgrid__a107370[1] = atoi(argv[3]);
    vgrid__a107370[2] = atoi(argv[3]);
    vgrid__a107370[3] = atoi(argv[3]);
    Tensor* _a107370 = new Tensor("aacc", idmap__a107370, size__a107370, vgrid__a107370, grid);
    _a107370->initialize();

    int* size__a10790 = new int[4];
    size__a10790[0] = Oa;
    size__a10790[1] = Oa;
    size__a10790[2] = Oa;
    size__a10790[3] = Oa;
    int* idmap__a10790 = new int[4];
    idmap__a10790[0] = 0;
    idmap__a10790[1] = 1;
    idmap__a10790[2] = 2;
    idmap__a10790[3] = 3;
    int* vgrid__a10790 = new int[4];
    vgrid__a10790[0] = atoi(argv[3]);
    vgrid__a10790[1] = atoi(argv[3]);
    vgrid__a10790[2] = atoi(argv[3]);
    vgrid__a10790[3] = atoi(argv[3]);
    Tensor* _a10790 = new Tensor("aabb", idmap__a10790, size__a10790, vgrid__a10790, grid);
    _a10790->initialize();

    int* size__a10850 = new int[4];
    size__a10850[0] = Ob;
    size__a10850[1] = Ob;
    size__a10850[2] = Ob;
    size__a10850[3] = Ob;
    int* idmap__a10850 = new int[4];
    idmap__a10850[0] = 0;
    idmap__a10850[1] = 1;
    idmap__a10850[2] = 2;
    idmap__a10850[3] = 3;
    int* vgrid__a10850 = new int[4];
    vgrid__a10850[0] = atoi(argv[3]);
    vgrid__a10850[1] = atoi(argv[3]);
    vgrid__a10850[2] = atoi(argv[3]);
    vgrid__a10850[3] = atoi(argv[3]);
    Tensor* _a10850 = new Tensor("aabb", idmap__a10850, size__a10850, vgrid__a10850, grid);
    _a10850->initialize();

    int* size__a10910 = new int[4];
    size__a10910[0] = Oa;
    size__a10910[1] = Oa;
    size__a10910[2] = Oa;
    size__a10910[3] = Oa;
    int* idmap__a10910 = new int[4];
    idmap__a10910[0] = 0;
    idmap__a10910[1] = 1;
    idmap__a10910[2] = 2;
    idmap__a10910[3] = 3;
    int* vgrid__a10910 = new int[4];
    vgrid__a10910[0] = atoi(argv[3]);
    vgrid__a10910[1] = atoi(argv[3]);
    vgrid__a10910[2] = atoi(argv[3]);
    vgrid__a10910[3] = atoi(argv[3]);
    Tensor* _a10910 = new Tensor("aacc", idmap__a10910, size__a10910, vgrid__a10910, grid);
    _a10910->initialize();

    int* size__a11010 = new int[4];
    size__a11010[0] = Ob;
    size__a11010[1] = Ob;
    size__a11010[2] = Ob;
    size__a11010[3] = Ob;
    int* idmap__a11010 = new int[4];
    idmap__a11010[0] = 0;
    idmap__a11010[1] = 1;
    idmap__a11010[2] = 2;
    idmap__a11010[3] = 3;
    int* vgrid__a11010 = new int[4];
    vgrid__a11010[0] = atoi(argv[3]);
    vgrid__a11010[1] = atoi(argv[3]);
    vgrid__a11010[2] = atoi(argv[3]);
    vgrid__a11010[3] = atoi(argv[3]);
    Tensor* _a11010 = new Tensor("aacc", idmap__a11010, size__a11010, vgrid__a11010, grid);
    _a11010->initialize();

    int* size__a121238 = new int[2];
    size__a121238[0] = Oa;
    size__a121238[1] = Oa;
    int* idmap__a121238 = new int[2];
    idmap__a121238[0] = 0;
    idmap__a121238[1] = 1;
    int* vgrid__a121238 = new int[2];
    vgrid__a121238[0] = atoi(argv[3]);
    vgrid__a121238[1] = atoi(argv[3]);
    Tensor* _a121238 = new Tensor("cc", idmap__a121238, size__a121238, vgrid__a121238, grid);
    _a121238->initialize();

    int* size__a121239 = new int[4];
    size__a121239[0] = Va;
    size__a121239[1] = Va;
    size__a121239[2] = Oa;
    size__a121239[3] = Oa;
    int* idmap__a121239 = new int[4];
    idmap__a121239[0] = 0;
    idmap__a121239[1] = 1;
    idmap__a121239[2] = 2;
    idmap__a121239[3] = 3;
    int* vgrid__a121239 = new int[4];
    vgrid__a121239[0] = atoi(argv[3]);
    vgrid__a121239[1] = atoi(argv[3]);
    vgrid__a121239[2] = atoi(argv[3]);
    vgrid__a121239[3] = atoi(argv[3]);
    Tensor* _a121239 = new Tensor("aacc", idmap__a121239, size__a121239, vgrid__a121239, grid);
    _a121239->initialize();

    int* size__a12541 = new int[2];
    size__a12541[0] = Oa;
    size__a12541[1] = Va;
    int* idmap__a12541 = new int[2];
    idmap__a12541[0] = 0;
    idmap__a12541[1] = 1;
    int* vgrid__a12541 = new int[2];
    vgrid__a12541[0] = atoi(argv[3]);
    vgrid__a12541[1] = atoi(argv[3]);
    Tensor* _a12541 = new Tensor("cc", idmap__a12541, size__a12541, vgrid__a12541, grid);
    _a12541->initialize();

    int* size__a12666 = new int[2];
    size__a12666[0] = Oa;
    size__a12666[1] = Va;
    int* idmap__a12666 = new int[2];
    idmap__a12666[0] = 0;
    idmap__a12666[1] = 1;
    int* vgrid__a12666 = new int[2];
    vgrid__a12666[0] = atoi(argv[3]);
    vgrid__a12666[1] = atoi(argv[3]);
    Tensor* _a12666 = new Tensor("cc", idmap__a12666, size__a12666, vgrid__a12666, grid);
    _a12666->initialize();

    int* size__a12781 = new int[2];
    size__a12781[0] = Ob;
    size__a12781[1] = Vb;
    int* idmap__a12781 = new int[2];
    idmap__a12781[0] = 0;
    idmap__a12781[1] = 1;
    int* vgrid__a12781 = new int[2];
    vgrid__a12781[0] = atoi(argv[3]);
    vgrid__a12781[1] = atoi(argv[3]);
    Tensor* _a12781 = new Tensor("cc", idmap__a12781, size__a12781, vgrid__a12781, grid);
    _a12781->initialize();

    int* size__a12895 = new int[2];
    size__a12895[0] = Ob;
    size__a12895[1] = Vb;
    int* idmap__a12895 = new int[2];
    idmap__a12895[0] = 0;
    idmap__a12895[1] = 1;
    int* vgrid__a12895 = new int[2];
    vgrid__a12895[0] = atoi(argv[3]);
    vgrid__a12895[1] = atoi(argv[3]);
    Tensor* _a12895 = new Tensor("cc", idmap__a12895, size__a12895, vgrid__a12895, grid);
    _a12895->initialize();

    int* size__a13021 = new int[2];
    size__a13021[0] = Ob;
    size__a13021[1] = Ob;
    int* idmap__a13021 = new int[2];
    idmap__a13021[0] = 0;
    idmap__a13021[1] = 1;
    int* vgrid__a13021 = new int[2];
    vgrid__a13021[0] = atoi(argv[3]);
    vgrid__a13021[1] = atoi(argv[3]);
    Tensor* _a13021 = new Tensor("cc", idmap__a13021, size__a13021, vgrid__a13021, grid);
    _a13021->initialize();

    int* size__a13050 = new int[2];
    size__a13050[0] = Oa;
    size__a13050[1] = Oa;
    int* idmap__a13050 = new int[2];
    idmap__a13050[0] = 0;
    idmap__a13050[1] = 1;
    int* vgrid__a13050 = new int[2];
    vgrid__a13050[0] = atoi(argv[3]);
    vgrid__a13050[1] = atoi(argv[3]);
    Tensor* _a13050 = new Tensor("cc", idmap__a13050, size__a13050, vgrid__a13050, grid);
    _a13050->initialize();

    int* size__a13260 = new int[4];
    size__a13260[0] = Va;
    size__a13260[1] = Oa;
    size__a13260[2] = Oa;
    size__a13260[3] = Oa;
    int* idmap__a13260 = new int[4];
    idmap__a13260[0] = 0;
    idmap__a13260[1] = 1;
    idmap__a13260[2] = 2;
    idmap__a13260[3] = 3;
    int* vgrid__a13260 = new int[4];
    vgrid__a13260[0] = atoi(argv[3]);
    vgrid__a13260[1] = atoi(argv[3]);
    vgrid__a13260[2] = atoi(argv[3]);
    vgrid__a13260[3] = atoi(argv[3]);
    Tensor* _a13260 = new Tensor("cccc", idmap__a13260, size__a13260, vgrid__a13260, grid);
    _a13260->initialize();

    int* size__a13265 = new int[4];
    size__a13265[0] = Va;
    size__a13265[1] = Va;
    size__a13265[2] = Oa;
    size__a13265[3] = Oa;
    int* idmap__a13265 = new int[4];
    idmap__a13265[0] = 0;
    idmap__a13265[1] = 1;
    idmap__a13265[2] = 2;
    idmap__a13265[3] = 3;
    int* vgrid__a13265 = new int[4];
    vgrid__a13265[0] = atoi(argv[3]);
    vgrid__a13265[1] = atoi(argv[3]);
    vgrid__a13265[2] = atoi(argv[3]);
    vgrid__a13265[3] = atoi(argv[3]);
    Tensor* _a13265 = new Tensor("cccc", idmap__a13265, size__a13265, vgrid__a13265, grid);
    _a13265->initialize();

    int* size__a13350 = new int[4];
    size__a13350[0] = Vb;
    size__a13350[1] = Ob;
    size__a13350[2] = Ob;
    size__a13350[3] = Ob;
    int* idmap__a13350 = new int[4];
    idmap__a13350[0] = 0;
    idmap__a13350[1] = 1;
    idmap__a13350[2] = 2;
    idmap__a13350[3] = 3;
    int* vgrid__a13350 = new int[4];
    vgrid__a13350[0] = atoi(argv[3]);
    vgrid__a13350[1] = atoi(argv[3]);
    vgrid__a13350[2] = atoi(argv[3]);
    vgrid__a13350[3] = atoi(argv[3]);
    Tensor* _a13350 = new Tensor("cccc", idmap__a13350, size__a13350, vgrid__a13350, grid);
    _a13350->initialize();

    int* size__a13355 = new int[4];
    size__a13355[0] = Vb;
    size__a13355[1] = Vb;
    size__a13355[2] = Ob;
    size__a13355[3] = Ob;
    int* idmap__a13355 = new int[4];
    idmap__a13355[0] = 0;
    idmap__a13355[1] = 1;
    idmap__a13355[2] = 2;
    idmap__a13355[3] = 3;
    int* vgrid__a13355 = new int[4];
    vgrid__a13355[0] = atoi(argv[3]);
    vgrid__a13355[1] = atoi(argv[3]);
    vgrid__a13355[2] = atoi(argv[3]);
    vgrid__a13355[3] = atoi(argv[3]);
    Tensor* _a13355 = new Tensor("cccc", idmap__a13355, size__a13355, vgrid__a13355, grid);
    _a13355->initialize();

    int* size__a14811 = new int[2];
    size__a14811[0] = Ob;
    size__a14811[1] = Ob;
    int* idmap__a14811 = new int[2];
    idmap__a14811[0] = 0;
    idmap__a14811[1] = 1;
    int* vgrid__a14811 = new int[2];
    vgrid__a14811[0] = atoi(argv[3]);
    vgrid__a14811[1] = atoi(argv[3]);
    Tensor* _a14811 = new Tensor("cc", idmap__a14811, size__a14811, vgrid__a14811, grid);
    _a14811->initialize();

    int* size__a14870 = new int[2];
    size__a14870[0] = Oa;
    size__a14870[1] = Oa;
    int* idmap__a14870 = new int[2];
    idmap__a14870[0] = 0;
    idmap__a14870[1] = 1;
    int* vgrid__a14870 = new int[2];
    vgrid__a14870[0] = atoi(argv[3]);
    vgrid__a14870[1] = atoi(argv[3]);
    Tensor* _a14870 = new Tensor("cc", idmap__a14870, size__a14870, vgrid__a14870, grid);
    _a14870->initialize();

    int* size__a15498 = new int[4];
    size__a15498[0] = Va;
    size__a15498[1] = Oa;
    size__a15498[2] = Oa;
    size__a15498[3] = Oa;
    int* idmap__a15498 = new int[4];
    idmap__a15498[0] = 0;
    idmap__a15498[1] = 1;
    idmap__a15498[2] = 2;
    idmap__a15498[3] = 3;
    int* vgrid__a15498 = new int[4];
    vgrid__a15498[0] = atoi(argv[3]);
    vgrid__a15498[1] = atoi(argv[3]);
    vgrid__a15498[2] = atoi(argv[3]);
    vgrid__a15498[3] = atoi(argv[3]);
    Tensor* _a15498 = new Tensor("ccaa", idmap__a15498, size__a15498, vgrid__a15498, grid);
    _a15498->initialize();

    int* size__a15737 = new int[4];
    size__a15737[0] = Va;
    size__a15737[1] = Oa;
    size__a15737[2] = Oa;
    size__a15737[3] = Oa;
    int* idmap__a15737 = new int[4];
    idmap__a15737[0] = 0;
    idmap__a15737[1] = 1;
    idmap__a15737[2] = 2;
    idmap__a15737[3] = 3;
    int* vgrid__a15737 = new int[4];
    vgrid__a15737[0] = atoi(argv[3]);
    vgrid__a15737[1] = atoi(argv[3]);
    vgrid__a15737[2] = atoi(argv[3]);
    vgrid__a15737[3] = atoi(argv[3]);
    Tensor* _a15737 = new Tensor("ccaa", idmap__a15737, size__a15737, vgrid__a15737, grid);
    _a15737->initialize();

    int* size__a16377 = new int[4];
    size__a16377[0] = Vb;
    size__a16377[1] = Ob;
    size__a16377[2] = Ob;
    size__a16377[3] = Ob;
    int* idmap__a16377 = new int[4];
    idmap__a16377[0] = 0;
    idmap__a16377[1] = 1;
    idmap__a16377[2] = 2;
    idmap__a16377[3] = 3;
    int* vgrid__a16377 = new int[4];
    vgrid__a16377[0] = atoi(argv[3]);
    vgrid__a16377[1] = atoi(argv[3]);
    vgrid__a16377[2] = atoi(argv[3]);
    vgrid__a16377[3] = atoi(argv[3]);
    Tensor* _a16377 = new Tensor("ccaa", idmap__a16377, size__a16377, vgrid__a16377, grid);
    _a16377->initialize();

    int* size__a16595 = new int[4];
    size__a16595[0] = Vb;
    size__a16595[1] = Ob;
    size__a16595[2] = Ob;
    size__a16595[3] = Ob;
    int* idmap__a16595 = new int[4];
    idmap__a16595[0] = 0;
    idmap__a16595[1] = 1;
    idmap__a16595[2] = 2;
    idmap__a16595[3] = 3;
    int* vgrid__a16595 = new int[4];
    vgrid__a16595[0] = atoi(argv[3]);
    vgrid__a16595[1] = atoi(argv[3]);
    vgrid__a16595[2] = atoi(argv[3]);
    vgrid__a16595[3] = atoi(argv[3]);
    Tensor* _a16595 = new Tensor("ccaa", idmap__a16595, size__a16595, vgrid__a16595, grid);
    _a16595->initialize();

    int* size__a171630 = new int[4];
    size__a171630[0] = Ob;
    size__a171630[1] = Ob;
    size__a171630[2] = Ob;
    size__a171630[3] = Ob;
    int* idmap__a171630 = new int[4];
    idmap__a171630[0] = 0;
    idmap__a171630[1] = 1;
    idmap__a171630[2] = 2;
    idmap__a171630[3] = 3;
    int* vgrid__a171630 = new int[4];
    vgrid__a171630[0] = atoi(argv[3]);
    vgrid__a171630[1] = atoi(argv[3]);
    vgrid__a171630[2] = atoi(argv[3]);
    vgrid__a171630[3] = atoi(argv[3]);
    Tensor* _a171630 = new Tensor("aacc", idmap__a171630, size__a171630, vgrid__a171630, grid);
    _a171630->initialize();

    int* size__a172760 = new int[4];
    size__a172760[0] = Ob;
    size__a172760[1] = Ob;
    size__a172760[2] = Ob;
    size__a172760[3] = Ob;
    int* idmap__a172760 = new int[4];
    idmap__a172760[0] = 0;
    idmap__a172760[1] = 1;
    idmap__a172760[2] = 2;
    idmap__a172760[3] = 3;
    int* vgrid__a172760 = new int[4];
    vgrid__a172760[0] = atoi(argv[3]);
    vgrid__a172760[1] = atoi(argv[3]);
    vgrid__a172760[2] = atoi(argv[3]);
    vgrid__a172760[3] = atoi(argv[3]);
    Tensor* _a172760 = new Tensor("aacc", idmap__a172760, size__a172760, vgrid__a172760, grid);
    _a172760->initialize();

    int* size__a172868 = new int[4];
    size__a172868[0] = Ob;
    size__a172868[1] = Ob;
    size__a172868[2] = Ob;
    size__a172868[3] = Ob;
    int* idmap__a172868 = new int[4];
    idmap__a172868[0] = 0;
    idmap__a172868[1] = 1;
    idmap__a172868[2] = 2;
    idmap__a172868[3] = 3;
    int* vgrid__a172868 = new int[4];
    vgrid__a172868[0] = atoi(argv[3]);
    vgrid__a172868[1] = atoi(argv[3]);
    vgrid__a172868[2] = atoi(argv[3]);
    vgrid__a172868[3] = atoi(argv[3]);
    Tensor* _a172868 = new Tensor("aacc", idmap__a172868, size__a172868, vgrid__a172868, grid);
    _a172868->initialize();

    int* size__a174692 = new int[2];
    size__a174692[0] = Ob;
    size__a174692[1] = Ob;
    int* idmap__a174692 = new int[2];
    idmap__a174692[0] = 0;
    idmap__a174692[1] = 1;
    int* vgrid__a174692 = new int[2];
    vgrid__a174692[0] = atoi(argv[3]);
    vgrid__a174692[1] = atoi(argv[3]);
    Tensor* _a174692 = new Tensor("cc", idmap__a174692, size__a174692, vgrid__a174692, grid);
    _a174692->initialize();

    int* size__a174693 = new int[2];
    size__a174693[0] = Ob;
    size__a174693[1] = Ob;
    int* idmap__a174693 = new int[2];
    idmap__a174693[0] = 0;
    idmap__a174693[1] = 1;
    int* vgrid__a174693 = new int[2];
    vgrid__a174693[0] = atoi(argv[3]);
    vgrid__a174693[1] = atoi(argv[3]);
    Tensor* _a174693 = new Tensor("cc", idmap__a174693, size__a174693, vgrid__a174693, grid);
    _a174693->initialize();

    int* size__a175843 = new int[2];
    size__a175843[0] = Ob;
    size__a175843[1] = Ob;
    int* idmap__a175843 = new int[2];
    idmap__a175843[0] = 0;
    idmap__a175843[1] = 1;
    int* vgrid__a175843 = new int[2];
    vgrid__a175843[0] = atoi(argv[3]);
    vgrid__a175843[1] = atoi(argv[3]);
    Tensor* _a175843 = new Tensor("cc", idmap__a175843, size__a175843, vgrid__a175843, grid);
    _a175843->initialize();

    int* size__a176649 = new int[2];
    size__a176649[0] = Ob;
    size__a176649[1] = Ob;
    int* idmap__a176649 = new int[2];
    idmap__a176649[0] = 0;
    idmap__a176649[1] = 1;
    int* vgrid__a176649 = new int[2];
    vgrid__a176649[0] = atoi(argv[3]);
    vgrid__a176649[1] = atoi(argv[3]);
    Tensor* _a176649 = new Tensor("cc", idmap__a176649, size__a176649, vgrid__a176649, grid);
    _a176649->initialize();

    int* size__a177541 = new int[2];
    size__a177541[0] = Ob;
    size__a177541[1] = Ob;
    int* idmap__a177541 = new int[2];
    idmap__a177541[0] = 0;
    idmap__a177541[1] = 1;
    int* vgrid__a177541 = new int[2];
    vgrid__a177541[0] = atoi(argv[3]);
    vgrid__a177541[1] = atoi(argv[3]);
    Tensor* _a177541 = new Tensor("cc", idmap__a177541, size__a177541, vgrid__a177541, grid);
    _a177541->initialize();

    int* size__a177605 = new int[4];
    size__a177605[0] = Ob;
    size__a177605[1] = Vb;
    size__a177605[2] = Ob;
    size__a177605[3] = Ob;
    int* idmap__a177605 = new int[4];
    idmap__a177605[0] = 0;
    idmap__a177605[1] = 1;
    idmap__a177605[2] = 2;
    idmap__a177605[3] = 3;
    int* vgrid__a177605 = new int[4];
    vgrid__a177605[0] = atoi(argv[3]);
    vgrid__a177605[1] = atoi(argv[3]);
    vgrid__a177605[2] = atoi(argv[3]);
    vgrid__a177605[3] = atoi(argv[3]);
    Tensor* _a177605 = new Tensor("ccaa", idmap__a177605, size__a177605, vgrid__a177605, grid);
    _a177605->initialize();

    int* size__a177606 = new int[4];
    size__a177606[0] = Ob;
    size__a177606[1] = Vb;
    size__a177606[2] = Ob;
    size__a177606[3] = Ob;
    int* idmap__a177606 = new int[4];
    idmap__a177606[0] = 0;
    idmap__a177606[1] = 1;
    idmap__a177606[2] = 2;
    idmap__a177606[3] = 3;
    int* vgrid__a177606 = new int[4];
    vgrid__a177606[0] = atoi(argv[3]);
    vgrid__a177606[1] = atoi(argv[3]);
    vgrid__a177606[2] = atoi(argv[3]);
    vgrid__a177606[3] = atoi(argv[3]);
    Tensor* _a177606 = new Tensor("ccaa", idmap__a177606, size__a177606, vgrid__a177606, grid);
    _a177606->initialize();

    int* size__a177680 = new int[2];
    size__a177680[0] = Ob;
    size__a177680[1] = Ob;
    int* idmap__a177680 = new int[2];
    idmap__a177680[0] = 0;
    idmap__a177680[1] = 1;
    int* vgrid__a177680 = new int[2];
    vgrid__a177680[0] = atoi(argv[3]);
    vgrid__a177680[1] = atoi(argv[3]);
    Tensor* _a177680 = new Tensor("cc", idmap__a177680, size__a177680, vgrid__a177680, grid);
    _a177680->initialize();

    int* size__a177698 = new int[2];
    size__a177698[0] = Ob;
    size__a177698[1] = Ob;
    int* idmap__a177698 = new int[2];
    idmap__a177698[0] = 0;
    idmap__a177698[1] = 1;
    int* vgrid__a177698 = new int[2];
    vgrid__a177698[0] = atoi(argv[3]);
    vgrid__a177698[1] = atoi(argv[3]);
    Tensor* _a177698 = new Tensor("cc", idmap__a177698, size__a177698, vgrid__a177698, grid);
    _a177698->initialize();

    int* size__a18015 = new int[2];
    size__a18015[0] = Oa;
    size__a18015[1] = Oa;
    int* idmap__a18015 = new int[2];
    idmap__a18015[0] = 0;
    idmap__a18015[1] = 1;
    int* vgrid__a18015 = new int[2];
    vgrid__a18015[0] = atoi(argv[3]);
    vgrid__a18015[1] = atoi(argv[3]);
    Tensor* _a18015 = new Tensor("cc", idmap__a18015, size__a18015, vgrid__a18015, grid);
    _a18015->initialize();

    int* size__a180621 = new int[4];
    size__a180621[0] = Ob;
    size__a180621[1] = Ob;
    size__a180621[2] = Ob;
    size__a180621[3] = Ob;
    int* idmap__a180621 = new int[4];
    idmap__a180621[0] = 0;
    idmap__a180621[1] = 1;
    idmap__a180621[2] = 2;
    idmap__a180621[3] = 3;
    int* vgrid__a180621 = new int[4];
    vgrid__a180621[0] = atoi(argv[3]);
    vgrid__a180621[1] = atoi(argv[3]);
    vgrid__a180621[2] = atoi(argv[3]);
    vgrid__a180621[3] = atoi(argv[3]);
    Tensor* _a180621 = new Tensor("ccaa", idmap__a180621, size__a180621, vgrid__a180621, grid);
    _a180621->initialize();

    int* size__a181332 = new int[2];
    size__a181332[0] = Ob;
    size__a181332[1] = Ob;
    int* idmap__a181332 = new int[2];
    idmap__a181332[0] = 0;
    idmap__a181332[1] = 1;
    int* vgrid__a181332 = new int[2];
    vgrid__a181332[0] = atoi(argv[3]);
    vgrid__a181332[1] = atoi(argv[3]);
    Tensor* _a181332 = new Tensor("cc", idmap__a181332, size__a181332, vgrid__a181332, grid);
    _a181332->initialize();

    int* size__a18241 = new int[2];
    size__a18241[0] = Oa;
    size__a18241[1] = Va;
    int* idmap__a18241 = new int[2];
    idmap__a18241[0] = 0;
    idmap__a18241[1] = 1;
    int* vgrid__a18241 = new int[2];
    vgrid__a18241[0] = atoi(argv[3]);
    vgrid__a18241[1] = atoi(argv[3]);
    Tensor* _a18241 = new Tensor("cc", idmap__a18241, size__a18241, vgrid__a18241, grid);
    _a18241->initialize();

    int* size__a18246 = new int[2];
    size__a18246[0] = Oa;
    size__a18246[1] = Oa;
    int* idmap__a18246 = new int[2];
    idmap__a18246[0] = 0;
    idmap__a18246[1] = 1;
    int* vgrid__a18246 = new int[2];
    vgrid__a18246[0] = atoi(argv[3]);
    vgrid__a18246[1] = atoi(argv[3]);
    Tensor* _a18246 = new Tensor("cc", idmap__a18246, size__a18246, vgrid__a18246, grid);
    _a18246->initialize();

    int* size__a182867 = new int[4];
    size__a182867[0] = Vb;
    size__a182867[1] = Ob;
    size__a182867[2] = Ob;
    size__a182867[3] = Ob;
    int* idmap__a182867 = new int[4];
    idmap__a182867[0] = 0;
    idmap__a182867[1] = 1;
    idmap__a182867[2] = 2;
    idmap__a182867[3] = 3;
    int* vgrid__a182867 = new int[4];
    vgrid__a182867[0] = atoi(argv[3]);
    vgrid__a182867[1] = atoi(argv[3]);
    vgrid__a182867[2] = atoi(argv[3]);
    vgrid__a182867[3] = atoi(argv[3]);
    Tensor* _a182867 = new Tensor("ccaa", idmap__a182867, size__a182867, vgrid__a182867, grid);
    _a182867->initialize();

    int* size__a182868 = new int[4];
    size__a182868[0] = Vb;
    size__a182868[1] = Ob;
    size__a182868[2] = Ob;
    size__a182868[3] = Ob;
    int* idmap__a182868 = new int[4];
    idmap__a182868[0] = 0;
    idmap__a182868[1] = 1;
    idmap__a182868[2] = 2;
    idmap__a182868[3] = 3;
    int* vgrid__a182868 = new int[4];
    vgrid__a182868[0] = atoi(argv[3]);
    vgrid__a182868[1] = atoi(argv[3]);
    vgrid__a182868[2] = atoi(argv[3]);
    vgrid__a182868[3] = atoi(argv[3]);
    Tensor* _a182868 = new Tensor("ccaa", idmap__a182868, size__a182868, vgrid__a182868, grid);
    _a182868->initialize();

    int* size__a184055 = new int[4];
    size__a184055[0] = Vb;
    size__a184055[1] = Ob;
    size__a184055[2] = Ob;
    size__a184055[3] = Ob;
    int* idmap__a184055 = new int[4];
    idmap__a184055[0] = 0;
    idmap__a184055[1] = 1;
    idmap__a184055[2] = 2;
    idmap__a184055[3] = 3;
    int* vgrid__a184055 = new int[4];
    vgrid__a184055[0] = atoi(argv[3]);
    vgrid__a184055[1] = atoi(argv[3]);
    vgrid__a184055[2] = atoi(argv[3]);
    vgrid__a184055[3] = atoi(argv[3]);
    Tensor* _a184055 = new Tensor("ccaa", idmap__a184055, size__a184055, vgrid__a184055, grid);
    _a184055->initialize();

    int* size__a18471 = new int[2];
    size__a18471[0] = Ob;
    size__a18471[1] = Vb;
    int* idmap__a18471 = new int[2];
    idmap__a18471[0] = 0;
    idmap__a18471[1] = 1;
    int* vgrid__a18471 = new int[2];
    vgrid__a18471[0] = atoi(argv[3]);
    vgrid__a18471[1] = atoi(argv[3]);
    Tensor* _a18471 = new Tensor("cc", idmap__a18471, size__a18471, vgrid__a18471, grid);
    _a18471->initialize();

    int* size__a18476 = new int[2];
    size__a18476[0] = Ob;
    size__a18476[1] = Ob;
    int* idmap__a18476 = new int[2];
    idmap__a18476[0] = 0;
    idmap__a18476[1] = 1;
    int* vgrid__a18476 = new int[2];
    vgrid__a18476[0] = atoi(argv[3]);
    vgrid__a18476[1] = atoi(argv[3]);
    Tensor* _a18476 = new Tensor("cc", idmap__a18476, size__a18476, vgrid__a18476, grid);
    _a18476->initialize();

    int* size__a185914 = new int[4];
    size__a185914[0] = Vb;
    size__a185914[1] = Ob;
    size__a185914[2] = Ob;
    size__a185914[3] = Ob;
    int* idmap__a185914 = new int[4];
    idmap__a185914[0] = 0;
    idmap__a185914[1] = 1;
    idmap__a185914[2] = 2;
    idmap__a185914[3] = 3;
    int* vgrid__a185914 = new int[4];
    vgrid__a185914[0] = atoi(argv[3]);
    vgrid__a185914[1] = atoi(argv[3]);
    vgrid__a185914[2] = atoi(argv[3]);
    vgrid__a185914[3] = atoi(argv[3]);
    Tensor* _a185914 = new Tensor("ccaa", idmap__a185914, size__a185914, vgrid__a185914, grid);
    _a185914->initialize();

    int* size__a186712 = new int[4];
    size__a186712[0] = Vb;
    size__a186712[1] = Ob;
    size__a186712[2] = Ob;
    size__a186712[3] = Ob;
    int* idmap__a186712 = new int[4];
    idmap__a186712[0] = 0;
    idmap__a186712[1] = 1;
    idmap__a186712[2] = 2;
    idmap__a186712[3] = 3;
    int* vgrid__a186712 = new int[4];
    vgrid__a186712[0] = atoi(argv[3]);
    vgrid__a186712[1] = atoi(argv[3]);
    vgrid__a186712[2] = atoi(argv[3]);
    vgrid__a186712[3] = atoi(argv[3]);
    Tensor* _a186712 = new Tensor("ccaa", idmap__a186712, size__a186712, vgrid__a186712, grid);
    _a186712->initialize();

    int* size__a18706 = new int[2];
    size__a18706[0] = Ob;
    size__a18706[1] = Ob;
    int* idmap__a18706 = new int[2];
    idmap__a18706[0] = 0;
    idmap__a18706[1] = 1;
    int* vgrid__a18706 = new int[2];
    vgrid__a18706[0] = atoi(argv[3]);
    vgrid__a18706[1] = atoi(argv[3]);
    Tensor* _a18706 = new Tensor("cc", idmap__a18706, size__a18706, vgrid__a18706, grid);
    _a18706->initialize();

    int* size__a187226 = new int[4];
    size__a187226[0] = Vb;
    size__a187226[1] = Ob;
    size__a187226[2] = Ob;
    size__a187226[3] = Ob;
    int* idmap__a187226 = new int[4];
    idmap__a187226[0] = 0;
    idmap__a187226[1] = 1;
    idmap__a187226[2] = 2;
    idmap__a187226[3] = 3;
    int* vgrid__a187226 = new int[4];
    vgrid__a187226[0] = atoi(argv[3]);
    vgrid__a187226[1] = atoi(argv[3]);
    vgrid__a187226[2] = atoi(argv[3]);
    vgrid__a187226[3] = atoi(argv[3]);
    Tensor* _a187226 = new Tensor("ccaa", idmap__a187226, size__a187226, vgrid__a187226, grid);
    _a187226->initialize();

    int* size__a187611 = new int[2];
    size__a187611[0] = Ob;
    size__a187611[1] = Ob;
    int* idmap__a187611 = new int[2];
    idmap__a187611[0] = 0;
    idmap__a187611[1] = 1;
    int* vgrid__a187611 = new int[2];
    vgrid__a187611[0] = atoi(argv[3]);
    vgrid__a187611[1] = atoi(argv[3]);
    Tensor* _a187611 = new Tensor("cc", idmap__a187611, size__a187611, vgrid__a187611, grid);
    _a187611->initialize();

    int* size__a187615 = new int[2];
    size__a187615[0] = Ob;
    size__a187615[1] = Ob;
    int* idmap__a187615 = new int[2];
    idmap__a187615[0] = 0;
    idmap__a187615[1] = 1;
    int* vgrid__a187615 = new int[2];
    vgrid__a187615[0] = atoi(argv[3]);
    vgrid__a187615[1] = atoi(argv[3]);
    Tensor* _a187615 = new Tensor("cc", idmap__a187615, size__a187615, vgrid__a187615, grid);
    _a187615->initialize();

    int* size__a18991 = new int[4];
    size__a18991[0] = Oa;
    size__a18991[1] = Va;
    size__a18991[2] = Oa;
    size__a18991[3] = Oa;
    int* idmap__a18991 = new int[4];
    idmap__a18991[0] = 0;
    idmap__a18991[1] = 1;
    idmap__a18991[2] = 2;
    idmap__a18991[3] = 3;
    int* vgrid__a18991 = new int[4];
    vgrid__a18991[0] = atoi(argv[3]);
    vgrid__a18991[1] = atoi(argv[3]);
    vgrid__a18991[2] = atoi(argv[3]);
    vgrid__a18991[3] = atoi(argv[3]);
    Tensor* _a18991 = new Tensor("ccaa", idmap__a18991, size__a18991, vgrid__a18991, grid);
    _a18991->initialize();

    int* size__a19071 = new int[4];
    size__a19071[0] = Ob;
    size__a19071[1] = Vb;
    size__a19071[2] = Ob;
    size__a19071[3] = Ob;
    int* idmap__a19071 = new int[4];
    idmap__a19071[0] = 0;
    idmap__a19071[1] = 1;
    idmap__a19071[2] = 2;
    idmap__a19071[3] = 3;
    int* vgrid__a19071 = new int[4];
    vgrid__a19071[0] = atoi(argv[3]);
    vgrid__a19071[1] = atoi(argv[3]);
    vgrid__a19071[2] = atoi(argv[3]);
    vgrid__a19071[3] = atoi(argv[3]);
    Tensor* _a19071 = new Tensor("ccaa", idmap__a19071, size__a19071, vgrid__a19071, grid);
    _a19071->initialize();

    int* size__a19120 = new int[2];
    size__a19120[0] = Oa;
    size__a19120[1] = Oa;
    int* idmap__a19120 = new int[2];
    idmap__a19120[0] = 0;
    idmap__a19120[1] = 1;
    int* vgrid__a19120 = new int[2];
    vgrid__a19120[0] = atoi(argv[3]);
    vgrid__a19120[1] = atoi(argv[3]);
    Tensor* _a19120 = new Tensor("cc", idmap__a19120, size__a19120, vgrid__a19120, grid);
    _a19120->initialize();

    int* size__a19150 = new int[2];
    size__a19150[0] = Oa;
    size__a19150[1] = Oa;
    int* idmap__a19150 = new int[2];
    idmap__a19150[0] = 0;
    idmap__a19150[1] = 1;
    int* vgrid__a19150 = new int[2];
    vgrid__a19150[0] = atoi(argv[3]);
    vgrid__a19150[1] = atoi(argv[3]);
    Tensor* _a19150 = new Tensor("cc", idmap__a19150, size__a19150, vgrid__a19150, grid);
    _a19150->initialize();

    int* size__a19180 = new int[2];
    size__a19180[0] = Ob;
    size__a19180[1] = Ob;
    int* idmap__a19180 = new int[2];
    idmap__a19180[0] = 0;
    idmap__a19180[1] = 1;
    int* vgrid__a19180 = new int[2];
    vgrid__a19180[0] = atoi(argv[3]);
    vgrid__a19180[1] = atoi(argv[3]);
    Tensor* _a19180 = new Tensor("cc", idmap__a19180, size__a19180, vgrid__a19180, grid);
    _a19180->initialize();

    int* size__a19210 = new int[2];
    size__a19210[0] = Ob;
    size__a19210[1] = Ob;
    int* idmap__a19210 = new int[2];
    idmap__a19210[0] = 0;
    idmap__a19210[1] = 1;
    int* vgrid__a19210 = new int[2];
    vgrid__a19210[0] = atoi(argv[3]);
    vgrid__a19210[1] = atoi(argv[3]);
    Tensor* _a19210 = new Tensor("cc", idmap__a19210, size__a19210, vgrid__a19210, grid);
    _a19210->initialize();

    int* size__a192257 = new int[4];
    size__a192257[0] = Ob;
    size__a192257[1] = Ob;
    size__a192257[2] = Ob;
    size__a192257[3] = Ob;
    int* idmap__a192257 = new int[4];
    idmap__a192257[0] = 0;
    idmap__a192257[1] = 1;
    idmap__a192257[2] = 2;
    idmap__a192257[3] = 3;
    int* vgrid__a192257 = new int[4];
    vgrid__a192257[0] = atoi(argv[3]);
    vgrid__a192257[1] = atoi(argv[3]);
    vgrid__a192257[2] = atoi(argv[3]);
    vgrid__a192257[3] = atoi(argv[3]);
    Tensor* _a192257 = new Tensor("aacc", idmap__a192257, size__a192257, vgrid__a192257, grid);
    _a192257->initialize();

    int* size__a192258 = new int[4];
    size__a192258[0] = Vb;
    size__a192258[1] = Vb;
    size__a192258[2] = Ob;
    size__a192258[3] = Ob;
    int* idmap__a192258 = new int[4];
    idmap__a192258[0] = 0;
    idmap__a192258[1] = 1;
    idmap__a192258[2] = 2;
    idmap__a192258[3] = 3;
    int* vgrid__a192258 = new int[4];
    vgrid__a192258[0] = atoi(argv[3]);
    vgrid__a192258[1] = atoi(argv[3]);
    vgrid__a192258[2] = atoi(argv[3]);
    vgrid__a192258[3] = atoi(argv[3]);
    Tensor* _a192258 = new Tensor("aacc", idmap__a192258, size__a192258, vgrid__a192258, grid);
    _a192258->initialize();

    int* size__a19350 = new int[2];
    size__a19350[0] = Oa;
    size__a19350[1] = Oa;
    int* idmap__a19350 = new int[2];
    idmap__a19350[0] = 0;
    idmap__a19350[1] = 1;
    int* vgrid__a19350 = new int[2];
    vgrid__a19350[0] = atoi(argv[3]);
    vgrid__a19350[1] = atoi(argv[3]);
    Tensor* _a19350 = new Tensor("cc", idmap__a19350, size__a19350, vgrid__a19350, grid);
    _a19350->initialize();

    int* size__a19380 = new int[2];
    size__a19380[0] = Ob;
    size__a19380[1] = Ob;
    int* idmap__a19380 = new int[2];
    idmap__a19380[0] = 0;
    idmap__a19380[1] = 1;
    int* vgrid__a19380 = new int[2];
    vgrid__a19380[0] = atoi(argv[3]);
    vgrid__a19380[1] = atoi(argv[3]);
    Tensor* _a19380 = new Tensor("cc", idmap__a19380, size__a19380, vgrid__a19380, grid);
    _a19380->initialize();

    int* size__a195655 = new int[4];
    size__a195655[0] = Vb;
    size__a195655[1] = Ob;
    size__a195655[2] = Ob;
    size__a195655[3] = Ob;
    int* idmap__a195655 = new int[4];
    idmap__a195655[0] = 0;
    idmap__a195655[1] = 1;
    idmap__a195655[2] = 2;
    idmap__a195655[3] = 3;
    int* vgrid__a195655 = new int[4];
    vgrid__a195655[0] = atoi(argv[3]);
    vgrid__a195655[1] = atoi(argv[3]);
    vgrid__a195655[2] = atoi(argv[3]);
    vgrid__a195655[3] = atoi(argv[3]);
    Tensor* _a195655 = new Tensor("ccaa", idmap__a195655, size__a195655, vgrid__a195655, grid);
    _a195655->initialize();

    int* size__a202635 = new int[4];
    size__a202635[0] = Vb;
    size__a202635[1] = Ob;
    size__a202635[2] = Ob;
    size__a202635[3] = Ob;
    int* idmap__a202635 = new int[4];
    idmap__a202635[0] = 0;
    idmap__a202635[1] = 1;
    idmap__a202635[2] = 2;
    idmap__a202635[3] = 3;
    int* vgrid__a202635 = new int[4];
    vgrid__a202635[0] = atoi(argv[3]);
    vgrid__a202635[1] = atoi(argv[3]);
    vgrid__a202635[2] = atoi(argv[3]);
    vgrid__a202635[3] = atoi(argv[3]);
    Tensor* _a202635 = new Tensor("ccaa", idmap__a202635, size__a202635, vgrid__a202635, grid);
    _a202635->initialize();

    int* size__a20662 = new int[4];
    size__a20662[0] = Ob;
    size__a20662[1] = Vb;
    size__a20662[2] = Vb;
    size__a20662[3] = Ob;
    int* idmap__a20662 = new int[4];
    idmap__a20662[0] = 0;
    idmap__a20662[1] = 1;
    idmap__a20662[2] = 2;
    idmap__a20662[3] = 3;
    int* vgrid__a20662 = new int[4];
    vgrid__a20662[0] = atoi(argv[3]);
    vgrid__a20662[1] = atoi(argv[3]);
    vgrid__a20662[2] = atoi(argv[3]);
    vgrid__a20662[3] = atoi(argv[3]);
    Tensor* _a20662 = new Tensor("cccc", idmap__a20662, size__a20662, vgrid__a20662, grid);
    _a20662->initialize();

    int* size__a20763 = new int[4];
    size__a20763[0] = Ob;
    size__a20763[1] = Va;
    size__a20763[2] = Vb;
    size__a20763[3] = Oa;
    int* idmap__a20763 = new int[4];
    idmap__a20763[0] = 0;
    idmap__a20763[1] = 1;
    idmap__a20763[2] = 2;
    idmap__a20763[3] = 3;
    int* vgrid__a20763 = new int[4];
    vgrid__a20763[0] = atoi(argv[3]);
    vgrid__a20763[1] = atoi(argv[3]);
    vgrid__a20763[2] = atoi(argv[3]);
    vgrid__a20763[3] = atoi(argv[3]);
    Tensor* _a20763 = new Tensor("cccc", idmap__a20763, size__a20763, vgrid__a20763, grid);
    _a20763->initialize();

    int* size__a20919 = new int[4];
    size__a20919[0] = Ob;
    size__a20919[1] = Va;
    size__a20919[2] = Va;
    size__a20919[3] = Ob;
    int* idmap__a20919 = new int[4];
    idmap__a20919[0] = 0;
    idmap__a20919[1] = 1;
    idmap__a20919[2] = 2;
    idmap__a20919[3] = 3;
    int* vgrid__a20919 = new int[4];
    vgrid__a20919[0] = atoi(argv[3]);
    vgrid__a20919[1] = atoi(argv[3]);
    vgrid__a20919[2] = atoi(argv[3]);
    vgrid__a20919[3] = atoi(argv[3]);
    Tensor* _a20919 = new Tensor("cccc", idmap__a20919, size__a20919, vgrid__a20919, grid);
    _a20919->initialize();

    int* size__a21116 = new int[4];
    size__a21116[0] = Vb;
    size__a21116[1] = Ob;
    size__a21116[2] = Vb;
    size__a21116[3] = Ob;
    int* idmap__a21116 = new int[4];
    idmap__a21116[0] = 0;
    idmap__a21116[1] = 1;
    idmap__a21116[2] = 2;
    idmap__a21116[3] = 3;
    int* vgrid__a21116 = new int[4];
    vgrid__a21116[0] = atoi(argv[3]);
    vgrid__a21116[1] = atoi(argv[3]);
    vgrid__a21116[2] = atoi(argv[3]);
    vgrid__a21116[3] = atoi(argv[3]);
    Tensor* _a21116 = new Tensor("cccc", idmap__a21116, size__a21116, vgrid__a21116, grid);
    _a21116->initialize();

    int* size__a21179 = new int[2];
    size__a21179[0] = Vb;
    size__a21179[1] = Vb;
    int* idmap__a21179 = new int[2];
    idmap__a21179[0] = 0;
    idmap__a21179[1] = 1;
    int* vgrid__a21179 = new int[2];
    vgrid__a21179[0] = atoi(argv[3]);
    vgrid__a21179[1] = atoi(argv[3]);
    Tensor* _a21179 = new Tensor("cc", idmap__a21179, size__a21179, vgrid__a21179, grid);
    _a21179->initialize();

    int* size__a21690 = new int[2];
    size__a21690[0] = Va;
    size__a21690[1] = Va;
    int* idmap__a21690 = new int[2];
    idmap__a21690[0] = 0;
    idmap__a21690[1] = 1;
    int* vgrid__a21690 = new int[2];
    vgrid__a21690[0] = atoi(argv[3]);
    vgrid__a21690[1] = atoi(argv[3]);
    Tensor* _a21690 = new Tensor("cc", idmap__a21690, size__a21690, vgrid__a21690, grid);
    _a21690->initialize();

    int* size__a220495 = new int[4];
    size__a220495[0] = Vb;
    size__a220495[1] = Ob;
    size__a220495[2] = Ob;
    size__a220495[3] = Ob;
    int* idmap__a220495 = new int[4];
    idmap__a220495[0] = 0;
    idmap__a220495[1] = 1;
    idmap__a220495[2] = 2;
    idmap__a220495[3] = 3;
    int* vgrid__a220495 = new int[4];
    vgrid__a220495[0] = atoi(argv[3]);
    vgrid__a220495[1] = atoi(argv[3]);
    vgrid__a220495[2] = atoi(argv[3]);
    vgrid__a220495[3] = atoi(argv[3]);
    Tensor* _a220495 = new Tensor("ccaa", idmap__a220495, size__a220495, vgrid__a220495, grid);
    _a220495->initialize();

    int* size__a220496 = new int[4];
    size__a220496[0] = Vb;
    size__a220496[1] = Vb;
    size__a220496[2] = Ob;
    size__a220496[3] = Ob;
    int* idmap__a220496 = new int[4];
    idmap__a220496[0] = 0;
    idmap__a220496[1] = 1;
    idmap__a220496[2] = 2;
    idmap__a220496[3] = 3;
    int* vgrid__a220496 = new int[4];
    vgrid__a220496[0] = atoi(argv[3]);
    vgrid__a220496[1] = atoi(argv[3]);
    vgrid__a220496[2] = atoi(argv[3]);
    vgrid__a220496[3] = atoi(argv[3]);
    Tensor* _a220496 = new Tensor("ccaa", idmap__a220496, size__a220496, vgrid__a220496, grid);
    _a220496->initialize();

    int* size__a22677 = new int[4];
    size__a22677[0] = Vb;
    size__a22677[1] = Oa;
    size__a22677[2] = Ob;
    size__a22677[3] = Oa;
    int* idmap__a22677 = new int[4];
    idmap__a22677[0] = 0;
    idmap__a22677[1] = 1;
    idmap__a22677[2] = 2;
    idmap__a22677[3] = 3;
    int* vgrid__a22677 = new int[4];
    vgrid__a22677[0] = atoi(argv[3]);
    vgrid__a22677[1] = atoi(argv[3]);
    vgrid__a22677[2] = atoi(argv[3]);
    vgrid__a22677[3] = atoi(argv[3]);
    Tensor* _a22677 = new Tensor("cccc", idmap__a22677, size__a22677, vgrid__a22677, grid);
    _a22677->initialize();

    int* size__a22682 = new int[4];
    size__a22682[0] = Vb;
    size__a22682[1] = Oa;
    size__a22682[2] = Oa;
    size__a22682[3] = Ob;
    int* idmap__a22682 = new int[4];
    idmap__a22682[0] = 0;
    idmap__a22682[1] = 1;
    idmap__a22682[2] = 2;
    idmap__a22682[3] = 3;
    int* vgrid__a22682 = new int[4];
    vgrid__a22682[0] = atoi(argv[3]);
    vgrid__a22682[1] = atoi(argv[3]);
    vgrid__a22682[2] = atoi(argv[3]);
    vgrid__a22682[3] = atoi(argv[3]);
    Tensor* _a22682 = new Tensor("cccc", idmap__a22682, size__a22682, vgrid__a22682, grid);
    _a22682->initialize();

    int* size__a22689 = new int[4];
    size__a22689[0] = Vb;
    size__a22689[1] = Oa;
    size__a22689[2] = Ob;
    size__a22689[3] = Oa;
    int* idmap__a22689 = new int[4];
    idmap__a22689[0] = 0;
    idmap__a22689[1] = 1;
    idmap__a22689[2] = 2;
    idmap__a22689[3] = 3;
    int* vgrid__a22689 = new int[4];
    vgrid__a22689[0] = atoi(argv[3]);
    vgrid__a22689[1] = atoi(argv[3]);
    vgrid__a22689[2] = atoi(argv[3]);
    vgrid__a22689[3] = atoi(argv[3]);
    Tensor* _a22689 = new Tensor("cccc", idmap__a22689, size__a22689, vgrid__a22689, grid);
    _a22689->initialize();

    int* size__a227425 = new int[4];
    size__a227425[0] = Ob;
    size__a227425[1] = Vb;
    size__a227425[2] = Ob;
    size__a227425[3] = Ob;
    int* idmap__a227425 = new int[4];
    idmap__a227425[0] = 0;
    idmap__a227425[1] = 1;
    idmap__a227425[2] = 2;
    idmap__a227425[3] = 3;
    int* vgrid__a227425 = new int[4];
    vgrid__a227425[0] = atoi(argv[3]);
    vgrid__a227425[1] = atoi(argv[3]);
    vgrid__a227425[2] = atoi(argv[3]);
    vgrid__a227425[3] = atoi(argv[3]);
    Tensor* _a227425 = new Tensor("ccaa", idmap__a227425, size__a227425, vgrid__a227425, grid);
    _a227425->initialize();

    int* size__a227426 = new int[4];
    size__a227426[0] = Vb;
    size__a227426[1] = Vb;
    size__a227426[2] = Ob;
    size__a227426[3] = Ob;
    int* idmap__a227426 = new int[4];
    idmap__a227426[0] = 0;
    idmap__a227426[1] = 1;
    idmap__a227426[2] = 2;
    idmap__a227426[3] = 3;
    int* vgrid__a227426 = new int[4];
    vgrid__a227426[0] = atoi(argv[3]);
    vgrid__a227426[1] = atoi(argv[3]);
    vgrid__a227426[2] = atoi(argv[3]);
    vgrid__a227426[3] = atoi(argv[3]);
    Tensor* _a227426 = new Tensor("ccaa", idmap__a227426, size__a227426, vgrid__a227426, grid);
    _a227426->initialize();

    int* size__a23391 = new int[4];
    size__a23391[0] = Ob;
    size__a23391[1] = Va;
    size__a23391[2] = Oa;
    size__a23391[3] = Ob;
    int* idmap__a23391 = new int[4];
    idmap__a23391[0] = 0;
    idmap__a23391[1] = 1;
    idmap__a23391[2] = 2;
    idmap__a23391[3] = 3;
    int* vgrid__a23391 = new int[4];
    vgrid__a23391[0] = atoi(argv[3]);
    vgrid__a23391[1] = atoi(argv[3]);
    vgrid__a23391[2] = atoi(argv[3]);
    vgrid__a23391[3] = atoi(argv[3]);
    Tensor* _a23391 = new Tensor("cccc", idmap__a23391, size__a23391, vgrid__a23391, grid);
    _a23391->initialize();

    int* size__a23395 = new int[4];
    size__a23395[0] = Ob;
    size__a23395[1] = Va;
    size__a23395[2] = Ob;
    size__a23395[3] = Oa;
    int* idmap__a23395 = new int[4];
    idmap__a23395[0] = 0;
    idmap__a23395[1] = 1;
    idmap__a23395[2] = 2;
    idmap__a23395[3] = 3;
    int* vgrid__a23395 = new int[4];
    vgrid__a23395[0] = atoi(argv[3]);
    vgrid__a23395[1] = atoi(argv[3]);
    vgrid__a23395[2] = atoi(argv[3]);
    vgrid__a23395[3] = atoi(argv[3]);
    Tensor* _a23395 = new Tensor("cccc", idmap__a23395, size__a23395, vgrid__a23395, grid);
    _a23395->initialize();

    int* size__a23403 = new int[4];
    size__a23403[0] = Ob;
    size__a23403[1] = Va;
    size__a23403[2] = Oa;
    size__a23403[3] = Ob;
    int* idmap__a23403 = new int[4];
    idmap__a23403[0] = 0;
    idmap__a23403[1] = 1;
    idmap__a23403[2] = 2;
    idmap__a23403[3] = 3;
    int* vgrid__a23403 = new int[4];
    vgrid__a23403[0] = atoi(argv[3]);
    vgrid__a23403[1] = atoi(argv[3]);
    vgrid__a23403[2] = atoi(argv[3]);
    vgrid__a23403[3] = atoi(argv[3]);
    Tensor* _a23403 = new Tensor("cccc", idmap__a23403, size__a23403, vgrid__a23403, grid);
    _a23403->initialize();

    int* size__a241201 = new int[2];
    size__a241201[0] = Ob;
    size__a241201[1] = Ob;
    int* idmap__a241201 = new int[2];
    idmap__a241201[0] = 0;
    idmap__a241201[1] = 1;
    int* vgrid__a241201 = new int[2];
    vgrid__a241201[0] = atoi(argv[3]);
    vgrid__a241201[1] = atoi(argv[3]);
    Tensor* _a241201 = new Tensor("cc", idmap__a241201, size__a241201, vgrid__a241201, grid);
    _a241201->initialize();

    int* size__a241202 = new int[4];
    size__a241202[0] = Vb;
    size__a241202[1] = Vb;
    size__a241202[2] = Ob;
    size__a241202[3] = Ob;
    int* idmap__a241202 = new int[4];
    idmap__a241202[0] = 0;
    idmap__a241202[1] = 1;
    idmap__a241202[2] = 2;
    idmap__a241202[3] = 3;
    int* vgrid__a241202 = new int[4];
    vgrid__a241202[0] = atoi(argv[3]);
    vgrid__a241202[1] = atoi(argv[3]);
    vgrid__a241202[2] = atoi(argv[3]);
    vgrid__a241202[3] = atoi(argv[3]);
    Tensor* _a241202 = new Tensor("aacc", idmap__a241202, size__a241202, vgrid__a241202, grid);
    _a241202->initialize();

    int* size__a24289 = new int[2];
    size__a24289[0] = Vb;
    size__a24289[1] = Vb;
    int* idmap__a24289 = new int[2];
    idmap__a24289[0] = 0;
    idmap__a24289[1] = 1;
    int* vgrid__a24289 = new int[2];
    vgrid__a24289[0] = atoi(argv[3]);
    vgrid__a24289[1] = atoi(argv[3]);
    Tensor* _a24289 = new Tensor("cc", idmap__a24289, size__a24289, vgrid__a24289, grid);
    _a24289->initialize();

    int* size__a24849 = new int[2];
    size__a24849[0] = Va;
    size__a24849[1] = Va;
    int* idmap__a24849 = new int[2];
    idmap__a24849[0] = 0;
    idmap__a24849[1] = 1;
    int* vgrid__a24849 = new int[2];
    vgrid__a24849[0] = atoi(argv[3]);
    vgrid__a24849[1] = atoi(argv[3]);
    Tensor* _a24849 = new Tensor("cc", idmap__a24849, size__a24849, vgrid__a24849, grid);
    _a24849->initialize();

    int* size__a24850 = new int[2];
    size__a24850[0] = Va;
    size__a24850[1] = Va;
    int* idmap__a24850 = new int[2];
    idmap__a24850[0] = 0;
    idmap__a24850[1] = 1;
    int* vgrid__a24850 = new int[2];
    vgrid__a24850[0] = atoi(argv[3]);
    vgrid__a24850[1] = atoi(argv[3]);
    Tensor* _a24850 = new Tensor("cc", idmap__a24850, size__a24850, vgrid__a24850, grid);
    _a24850->initialize();

    int* size__a24960 = new int[4];
    size__a24960[0] = Ob;
    size__a24960[1] = Va;
    size__a24960[2] = Vb;
    size__a24960[3] = Oa;
    int* idmap__a24960 = new int[4];
    idmap__a24960[0] = 0;
    idmap__a24960[1] = 1;
    idmap__a24960[2] = 2;
    idmap__a24960[3] = 3;
    int* vgrid__a24960 = new int[4];
    vgrid__a24960[0] = atoi(argv[3]);
    vgrid__a24960[1] = atoi(argv[3]);
    vgrid__a24960[2] = atoi(argv[3]);
    vgrid__a24960[3] = atoi(argv[3]);
    Tensor* _a24960 = new Tensor("cccc", idmap__a24960, size__a24960, vgrid__a24960, grid);
    _a24960->initialize();

    int* size__a25416 = new int[4];
    size__a25416[0] = Oa;
    size__a25416[1] = Vb;
    size__a25416[2] = Va;
    size__a25416[3] = Ob;
    int* idmap__a25416 = new int[4];
    idmap__a25416[0] = 0;
    idmap__a25416[1] = 1;
    idmap__a25416[2] = 2;
    idmap__a25416[3] = 3;
    int* vgrid__a25416 = new int[4];
    vgrid__a25416[0] = atoi(argv[3]);
    vgrid__a25416[1] = atoi(argv[3]);
    vgrid__a25416[2] = atoi(argv[3]);
    vgrid__a25416[3] = atoi(argv[3]);
    Tensor* _a25416 = new Tensor("cccc", idmap__a25416, size__a25416, vgrid__a25416, grid);
    _a25416->initialize();

    int* size__a254814 = new int[2];
    size__a254814[0] = Ob;
    size__a254814[1] = Ob;
    int* idmap__a254814 = new int[2];
    idmap__a254814[0] = 0;
    idmap__a254814[1] = 1;
    int* vgrid__a254814 = new int[2];
    vgrid__a254814[0] = atoi(argv[3]);
    vgrid__a254814[1] = atoi(argv[3]);
    Tensor* _a254814 = new Tensor("cc", idmap__a254814, size__a254814, vgrid__a254814, grid);
    _a254814->initialize();

    int* size__a254815 = new int[4];
    size__a254815[0] = Vb;
    size__a254815[1] = Vb;
    size__a254815[2] = Ob;
    size__a254815[3] = Ob;
    int* idmap__a254815 = new int[4];
    idmap__a254815[0] = 0;
    idmap__a254815[1] = 1;
    idmap__a254815[2] = 2;
    idmap__a254815[3] = 3;
    int* vgrid__a254815 = new int[4];
    vgrid__a254815[0] = atoi(argv[3]);
    vgrid__a254815[1] = atoi(argv[3]);
    vgrid__a254815[2] = atoi(argv[3]);
    vgrid__a254815[3] = atoi(argv[3]);
    Tensor* _a254815 = new Tensor("aacc", idmap__a254815, size__a254815, vgrid__a254815, grid);
    _a254815->initialize();

    int* size__a26518 = new int[4];
    size__a26518[0] = Va;
    size__a26518[1] = Ob;
    size__a26518[2] = Oa;
    size__a26518[3] = Ob;
    int* idmap__a26518 = new int[4];
    idmap__a26518[0] = 0;
    idmap__a26518[1] = 1;
    idmap__a26518[2] = 2;
    idmap__a26518[3] = 3;
    int* vgrid__a26518 = new int[4];
    vgrid__a26518[0] = atoi(argv[3]);
    vgrid__a26518[1] = atoi(argv[3]);
    vgrid__a26518[2] = atoi(argv[3]);
    vgrid__a26518[3] = atoi(argv[3]);
    Tensor* _a26518 = new Tensor("cccc", idmap__a26518, size__a26518, vgrid__a26518, grid);
    _a26518->initialize();

    int* size__a26520 = new int[4];
    size__a26520[0] = Ob;
    size__a26520[1] = Va;
    size__a26520[2] = Ob;
    size__a26520[3] = Oa;
    int* idmap__a26520 = new int[4];
    idmap__a26520[0] = 0;
    idmap__a26520[1] = 1;
    idmap__a26520[2] = 2;
    idmap__a26520[3] = 3;
    int* vgrid__a26520 = new int[4];
    vgrid__a26520[0] = atoi(argv[3]);
    vgrid__a26520[1] = atoi(argv[3]);
    vgrid__a26520[2] = atoi(argv[3]);
    vgrid__a26520[3] = atoi(argv[3]);
    Tensor* _a26520 = new Tensor("cccc", idmap__a26520, size__a26520, vgrid__a26520, grid);
    _a26520->initialize();

    int* size__a26521 = new int[4];
    size__a26521[0] = Va;
    size__a26521[1] = Ob;
    size__a26521[2] = Oa;
    size__a26521[3] = Ob;
    int* idmap__a26521 = new int[4];
    idmap__a26521[0] = 0;
    idmap__a26521[1] = 1;
    idmap__a26521[2] = 2;
    idmap__a26521[3] = 3;
    int* vgrid__a26521 = new int[4];
    vgrid__a26521[0] = atoi(argv[3]);
    vgrid__a26521[1] = atoi(argv[3]);
    vgrid__a26521[2] = atoi(argv[3]);
    vgrid__a26521[3] = atoi(argv[3]);
    Tensor* _a26521 = new Tensor("cccc", idmap__a26521, size__a26521, vgrid__a26521, grid);
    _a26521->initialize();

    int* size__a27051 = new int[4];
    size__a27051[0] = Oa;
    size__a27051[1] = Ob;
    size__a27051[2] = Oa;
    size__a27051[3] = Ob;
    int* idmap__a27051 = new int[4];
    idmap__a27051[0] = 0;
    idmap__a27051[1] = 1;
    idmap__a27051[2] = 2;
    idmap__a27051[3] = 3;
    int* vgrid__a27051 = new int[4];
    vgrid__a27051[0] = atoi(argv[3]);
    vgrid__a27051[1] = atoi(argv[3]);
    vgrid__a27051[2] = atoi(argv[3]);
    vgrid__a27051[3] = atoi(argv[3]);
    Tensor* _a27051 = new Tensor("cccc", idmap__a27051, size__a27051, vgrid__a27051, grid);
    _a27051->initialize();

    int* size__a27055 = new int[4];
    size__a27055[0] = Oa;
    size__a27055[1] = Vb;
    size__a27055[2] = Oa;
    size__a27055[3] = Ob;
    int* idmap__a27055 = new int[4];
    idmap__a27055[0] = 0;
    idmap__a27055[1] = 1;
    idmap__a27055[2] = 2;
    idmap__a27055[3] = 3;
    int* vgrid__a27055 = new int[4];
    vgrid__a27055[0] = atoi(argv[3]);
    vgrid__a27055[1] = atoi(argv[3]);
    vgrid__a27055[2] = atoi(argv[3]);
    vgrid__a27055[3] = atoi(argv[3]);
    Tensor* _a27055 = new Tensor("cccc", idmap__a27055, size__a27055, vgrid__a27055, grid);
    _a27055->initialize();

    int* size__a27056 = new int[4];
    size__a27056[0] = Oa;
    size__a27056[1] = Vb;
    size__a27056[2] = Oa;
    size__a27056[3] = Ob;
    int* idmap__a27056 = new int[4];
    idmap__a27056[0] = 0;
    idmap__a27056[1] = 1;
    idmap__a27056[2] = 2;
    idmap__a27056[3] = 3;
    int* vgrid__a27056 = new int[4];
    vgrid__a27056[0] = atoi(argv[3]);
    vgrid__a27056[1] = atoi(argv[3]);
    vgrid__a27056[2] = atoi(argv[3]);
    vgrid__a27056[3] = atoi(argv[3]);
    Tensor* _a27056 = new Tensor("cccc", idmap__a27056, size__a27056, vgrid__a27056, grid);
    _a27056->initialize();

    int* size__a27057 = new int[4];
    size__a27057[0] = Oa;
    size__a27057[1] = Vb;
    size__a27057[2] = Oa;
    size__a27057[3] = Ob;
    int* idmap__a27057 = new int[4];
    idmap__a27057[0] = 0;
    idmap__a27057[1] = 1;
    idmap__a27057[2] = 2;
    idmap__a27057[3] = 3;
    int* vgrid__a27057 = new int[4];
    vgrid__a27057[0] = atoi(argv[3]);
    vgrid__a27057[1] = atoi(argv[3]);
    vgrid__a27057[2] = atoi(argv[3]);
    vgrid__a27057[3] = atoi(argv[3]);
    Tensor* _a27057 = new Tensor("cccc", idmap__a27057, size__a27057, vgrid__a27057, grid);
    _a27057->initialize();

    int* size__a27108 = new int[4];
    size__a27108[0] = Oa;
    size__a27108[1] = Vb;
    size__a27108[2] = Ob;
    size__a27108[3] = Oa;
    int* idmap__a27108 = new int[4];
    idmap__a27108[0] = 0;
    idmap__a27108[1] = 1;
    idmap__a27108[2] = 2;
    idmap__a27108[3] = 3;
    int* vgrid__a27108 = new int[4];
    vgrid__a27108[0] = atoi(argv[3]);
    vgrid__a27108[1] = atoi(argv[3]);
    vgrid__a27108[2] = atoi(argv[3]);
    vgrid__a27108[3] = atoi(argv[3]);
    Tensor* _a27108 = new Tensor("cccc", idmap__a27108, size__a27108, vgrid__a27108, grid);
    _a27108->initialize();

    int* size__a27109 = new int[4];
    size__a27109[0] = Oa;
    size__a27109[1] = Vb;
    size__a27109[2] = Oa;
    size__a27109[3] = Ob;
    int* idmap__a27109 = new int[4];
    idmap__a27109[0] = 0;
    idmap__a27109[1] = 1;
    idmap__a27109[2] = 2;
    idmap__a27109[3] = 3;
    int* vgrid__a27109 = new int[4];
    vgrid__a27109[0] = atoi(argv[3]);
    vgrid__a27109[1] = atoi(argv[3]);
    vgrid__a27109[2] = atoi(argv[3]);
    vgrid__a27109[3] = atoi(argv[3]);
    Tensor* _a27109 = new Tensor("cccc", idmap__a27109, size__a27109, vgrid__a27109, grid);
    _a27109->initialize();

    int* size__a27231 = new int[4];
    size__a27231[0] = Ob;
    size__a27231[1] = Va;
    size__a27231[2] = Oa;
    size__a27231[3] = Ob;
    int* idmap__a27231 = new int[4];
    idmap__a27231[0] = 0;
    idmap__a27231[1] = 1;
    idmap__a27231[2] = 2;
    idmap__a27231[3] = 3;
    int* vgrid__a27231 = new int[4];
    vgrid__a27231[0] = atoi(argv[3]);
    vgrid__a27231[1] = atoi(argv[3]);
    vgrid__a27231[2] = atoi(argv[3]);
    vgrid__a27231[3] = atoi(argv[3]);
    Tensor* _a27231 = new Tensor("cccc", idmap__a27231, size__a27231, vgrid__a27231, grid);
    _a27231->initialize();

    int* size__a27232 = new int[4];
    size__a27232[0] = Ob;
    size__a27232[1] = Va;
    size__a27232[2] = Ob;
    size__a27232[3] = Oa;
    int* idmap__a27232 = new int[4];
    idmap__a27232[0] = 0;
    idmap__a27232[1] = 1;
    idmap__a27232[2] = 2;
    idmap__a27232[3] = 3;
    int* vgrid__a27232 = new int[4];
    vgrid__a27232[0] = atoi(argv[3]);
    vgrid__a27232[1] = atoi(argv[3]);
    vgrid__a27232[2] = atoi(argv[3]);
    vgrid__a27232[3] = atoi(argv[3]);
    Tensor* _a27232 = new Tensor("cccc", idmap__a27232, size__a27232, vgrid__a27232, grid);
    _a27232->initialize();

    int* size__a27233 = new int[4];
    size__a27233[0] = Ob;
    size__a27233[1] = Va;
    size__a27233[2] = Oa;
    size__a27233[3] = Ob;
    int* idmap__a27233 = new int[4];
    idmap__a27233[0] = 0;
    idmap__a27233[1] = 1;
    idmap__a27233[2] = 2;
    idmap__a27233[3] = 3;
    int* vgrid__a27233 = new int[4];
    vgrid__a27233[0] = atoi(argv[3]);
    vgrid__a27233[1] = atoi(argv[3]);
    vgrid__a27233[2] = atoi(argv[3]);
    vgrid__a27233[3] = atoi(argv[3]);
    Tensor* _a27233 = new Tensor("cccc", idmap__a27233, size__a27233, vgrid__a27233, grid);
    _a27233->initialize();

    int* size__a27296 = new int[4];
    size__a27296[0] = Ob;
    size__a27296[1] = Va;
    size__a27296[2] = Ob;
    size__a27296[3] = Oa;
    int* idmap__a27296 = new int[4];
    idmap__a27296[0] = 0;
    idmap__a27296[1] = 1;
    idmap__a27296[2] = 2;
    idmap__a27296[3] = 3;
    int* vgrid__a27296 = new int[4];
    vgrid__a27296[0] = atoi(argv[3]);
    vgrid__a27296[1] = atoi(argv[3]);
    vgrid__a27296[2] = atoi(argv[3]);
    vgrid__a27296[3] = atoi(argv[3]);
    Tensor* _a27296 = new Tensor("cccc", idmap__a27296, size__a27296, vgrid__a27296, grid);
    _a27296->initialize();

    int* size__a27297 = new int[4];
    size__a27297[0] = Ob;
    size__a27297[1] = Va;
    size__a27297[2] = Oa;
    size__a27297[3] = Ob;
    int* idmap__a27297 = new int[4];
    idmap__a27297[0] = 0;
    idmap__a27297[1] = 1;
    idmap__a27297[2] = 2;
    idmap__a27297[3] = 3;
    int* vgrid__a27297 = new int[4];
    vgrid__a27297[0] = atoi(argv[3]);
    vgrid__a27297[1] = atoi(argv[3]);
    vgrid__a27297[2] = atoi(argv[3]);
    vgrid__a27297[3] = atoi(argv[3]);
    Tensor* _a27297 = new Tensor("cccc", idmap__a27297, size__a27297, vgrid__a27297, grid);
    _a27297->initialize();

    int* size__a28178 = new int[2];
    size__a28178[0] = Ob;
    size__a28178[1] = Vb;
    int* idmap__a28178 = new int[2];
    idmap__a28178[0] = 0;
    idmap__a28178[1] = 1;
    int* vgrid__a28178 = new int[2];
    vgrid__a28178[0] = atoi(argv[3]);
    vgrid__a28178[1] = atoi(argv[3]);
    Tensor* _a28178 = new Tensor("cc", idmap__a28178, size__a28178, vgrid__a28178, grid);
    _a28178->initialize();

    int* size__a28768 = new int[2];
    size__a28768[0] = Oa;
    size__a28768[1] = Va;
    int* idmap__a28768 = new int[2];
    idmap__a28768[0] = 0;
    idmap__a28768[1] = 1;
    int* vgrid__a28768 = new int[2];
    vgrid__a28768[0] = atoi(argv[3]);
    vgrid__a28768[1] = atoi(argv[3]);
    Tensor* _a28768 = new Tensor("cc", idmap__a28768, size__a28768, vgrid__a28768, grid);
    _a28768->initialize();

    int* size__a28769 = new int[2];
    size__a28769[0] = Oa;
    size__a28769[1] = Va;
    int* idmap__a28769 = new int[2];
    idmap__a28769[0] = 0;
    idmap__a28769[1] = 1;
    int* vgrid__a28769 = new int[2];
    vgrid__a28769[0] = atoi(argv[3]);
    vgrid__a28769[1] = atoi(argv[3]);
    Tensor* _a28769 = new Tensor("cc", idmap__a28769, size__a28769, vgrid__a28769, grid);
    _a28769->initialize();

    int* size__a29106 = new int[4];
    size__a29106[0] = Va;
    size__a29106[1] = Ob;
    size__a29106[2] = Oa;
    size__a29106[3] = Ob;
    int* idmap__a29106 = new int[4];
    idmap__a29106[0] = 0;
    idmap__a29106[1] = 1;
    idmap__a29106[2] = 2;
    idmap__a29106[3] = 3;
    int* vgrid__a29106 = new int[4];
    vgrid__a29106[0] = atoi(argv[3]);
    vgrid__a29106[1] = atoi(argv[3]);
    vgrid__a29106[2] = atoi(argv[3]);
    vgrid__a29106[3] = atoi(argv[3]);
    Tensor* _a29106 = new Tensor("cccc", idmap__a29106, size__a29106, vgrid__a29106, grid);
    _a29106->initialize();

    int* size__a29111 = new int[4];
    size__a29111[0] = Va;
    size__a29111[1] = Ob;
    size__a29111[2] = Oa;
    size__a29111[3] = Ob;
    int* idmap__a29111 = new int[4];
    idmap__a29111[0] = 0;
    idmap__a29111[1] = 1;
    idmap__a29111[2] = 2;
    idmap__a29111[3] = 3;
    int* vgrid__a29111 = new int[4];
    vgrid__a29111[0] = atoi(argv[3]);
    vgrid__a29111[1] = atoi(argv[3]);
    vgrid__a29111[2] = atoi(argv[3]);
    vgrid__a29111[3] = atoi(argv[3]);
    Tensor* _a29111 = new Tensor("cccc", idmap__a29111, size__a29111, vgrid__a29111, grid);
    _a29111->initialize();

    int* size__a29112 = new int[4];
    size__a29112[0] = Va;
    size__a29112[1] = Ob;
    size__a29112[2] = Oa;
    size__a29112[3] = Ob;
    int* idmap__a29112 = new int[4];
    idmap__a29112[0] = 0;
    idmap__a29112[1] = 1;
    idmap__a29112[2] = 2;
    idmap__a29112[3] = 3;
    int* vgrid__a29112 = new int[4];
    vgrid__a29112[0] = atoi(argv[3]);
    vgrid__a29112[1] = atoi(argv[3]);
    vgrid__a29112[2] = atoi(argv[3]);
    vgrid__a29112[3] = atoi(argv[3]);
    Tensor* _a29112 = new Tensor("cccc", idmap__a29112, size__a29112, vgrid__a29112, grid);
    _a29112->initialize();

    int* size__a29926 = new int[4];
    size__a29926[0] = Oa;
    size__a29926[1] = Vb;
    size__a29926[2] = Oa;
    size__a29926[3] = Ob;
    int* idmap__a29926 = new int[4];
    idmap__a29926[0] = 0;
    idmap__a29926[1] = 1;
    idmap__a29926[2] = 2;
    idmap__a29926[3] = 3;
    int* vgrid__a29926 = new int[4];
    vgrid__a29926[0] = atoi(argv[3]);
    vgrid__a29926[1] = atoi(argv[3]);
    vgrid__a29926[2] = atoi(argv[3]);
    vgrid__a29926[3] = atoi(argv[3]);
    Tensor* _a29926 = new Tensor("cccc", idmap__a29926, size__a29926, vgrid__a29926, grid);
    _a29926->initialize();

    int* size__a29927 = new int[4];
    size__a29927[0] = Oa;
    size__a29927[1] = Vb;
    size__a29927[2] = Oa;
    size__a29927[3] = Ob;
    int* idmap__a29927 = new int[4];
    idmap__a29927[0] = 0;
    idmap__a29927[1] = 1;
    idmap__a29927[2] = 2;
    idmap__a29927[3] = 3;
    int* vgrid__a29927 = new int[4];
    vgrid__a29927[0] = atoi(argv[3]);
    vgrid__a29927[1] = atoi(argv[3]);
    vgrid__a29927[2] = atoi(argv[3]);
    vgrid__a29927[3] = atoi(argv[3]);
    Tensor* _a29927 = new Tensor("cccc", idmap__a29927, size__a29927, vgrid__a29927, grid);
    _a29927->initialize();

    int* size__a29928 = new int[4];
    size__a29928[0] = Oa;
    size__a29928[1] = Vb;
    size__a29928[2] = Oa;
    size__a29928[3] = Ob;
    int* idmap__a29928 = new int[4];
    idmap__a29928[0] = 0;
    idmap__a29928[1] = 1;
    idmap__a29928[2] = 2;
    idmap__a29928[3] = 3;
    int* vgrid__a29928 = new int[4];
    vgrid__a29928[0] = atoi(argv[3]);
    vgrid__a29928[1] = atoi(argv[3]);
    vgrid__a29928[2] = atoi(argv[3]);
    vgrid__a29928[3] = atoi(argv[3]);
    Tensor* _a29928 = new Tensor("cccc", idmap__a29928, size__a29928, vgrid__a29928, grid);
    _a29928->initialize();

    int* size__a30094 = new int[4];
    size__a30094[0] = Ob;
    size__a30094[1] = Va;
    size__a30094[2] = Oa;
    size__a30094[3] = Ob;
    int* idmap__a30094 = new int[4];
    idmap__a30094[0] = 0;
    idmap__a30094[1] = 1;
    idmap__a30094[2] = 2;
    idmap__a30094[3] = 3;
    int* vgrid__a30094 = new int[4];
    vgrid__a30094[0] = atoi(argv[3]);
    vgrid__a30094[1] = atoi(argv[3]);
    vgrid__a30094[2] = atoi(argv[3]);
    vgrid__a30094[3] = atoi(argv[3]);
    Tensor* _a30094 = new Tensor("cccc", idmap__a30094, size__a30094, vgrid__a30094, grid);
    _a30094->initialize();

    int* size__a30095 = new int[4];
    size__a30095[0] = Va;
    size__a30095[1] = Ob;
    size__a30095[2] = Oa;
    size__a30095[3] = Ob;
    int* idmap__a30095 = new int[4];
    idmap__a30095[0] = 0;
    idmap__a30095[1] = 1;
    idmap__a30095[2] = 2;
    idmap__a30095[3] = 3;
    int* vgrid__a30095 = new int[4];
    vgrid__a30095[0] = atoi(argv[3]);
    vgrid__a30095[1] = atoi(argv[3]);
    vgrid__a30095[2] = atoi(argv[3]);
    vgrid__a30095[3] = atoi(argv[3]);
    Tensor* _a30095 = new Tensor("cccc", idmap__a30095, size__a30095, vgrid__a30095, grid);
    _a30095->initialize();

    int* size__a30096 = new int[4];
    size__a30096[0] = Ob;
    size__a30096[1] = Va;
    size__a30096[2] = Oa;
    size__a30096[3] = Ob;
    int* idmap__a30096 = new int[4];
    idmap__a30096[0] = 0;
    idmap__a30096[1] = 1;
    idmap__a30096[2] = 2;
    idmap__a30096[3] = 3;
    int* vgrid__a30096 = new int[4];
    vgrid__a30096[0] = atoi(argv[3]);
    vgrid__a30096[1] = atoi(argv[3]);
    vgrid__a30096[2] = atoi(argv[3]);
    vgrid__a30096[3] = atoi(argv[3]);
    Tensor* _a30096 = new Tensor("cccc", idmap__a30096, size__a30096, vgrid__a30096, grid);
    _a30096->initialize();

    int* size__a3023 = new int[4];
    size__a3023[0] = Ob;
    size__a3023[1] = Vb;
    size__a3023[2] = Vb;
    size__a3023[3] = Ob;
    int* idmap__a3023 = new int[4];
    idmap__a3023[0] = 0;
    idmap__a3023[1] = 1;
    idmap__a3023[2] = 2;
    idmap__a3023[3] = 3;
    int* vgrid__a3023 = new int[4];
    vgrid__a3023[0] = atoi(argv[3]);
    vgrid__a3023[1] = atoi(argv[3]);
    vgrid__a3023[2] = atoi(argv[3]);
    vgrid__a3023[3] = atoi(argv[3]);
    Tensor* _a3023 = new Tensor("cccc", idmap__a3023, size__a3023, vgrid__a3023, grid);
    _a3023->initialize();

    int* size__a3029 = new int[4];
    size__a3029[0] = Ob;
    size__a3029[1] = Vb;
    size__a3029[2] = Vb;
    size__a3029[3] = Ob;
    int* idmap__a3029 = new int[4];
    idmap__a3029[0] = 0;
    idmap__a3029[1] = 1;
    idmap__a3029[2] = 2;
    idmap__a3029[3] = 3;
    int* vgrid__a3029 = new int[4];
    vgrid__a3029[0] = atoi(argv[3]);
    vgrid__a3029[1] = atoi(argv[3]);
    vgrid__a3029[2] = atoi(argv[3]);
    vgrid__a3029[3] = atoi(argv[3]);
    Tensor* _a3029 = new Tensor("cccc", idmap__a3029, size__a3029, vgrid__a3029, grid);
    _a3029->initialize();

    int* size__a30368 = new int[4];
    size__a30368[0] = Va;
    size__a30368[1] = Ob;
    size__a30368[2] = Ob;
    size__a30368[3] = Oa;
    int* idmap__a30368 = new int[4];
    idmap__a30368[0] = 0;
    idmap__a30368[1] = 1;
    idmap__a30368[2] = 2;
    idmap__a30368[3] = 3;
    int* vgrid__a30368 = new int[4];
    vgrid__a30368[0] = atoi(argv[3]);
    vgrid__a30368[1] = atoi(argv[3]);
    vgrid__a30368[2] = atoi(argv[3]);
    vgrid__a30368[3] = atoi(argv[3]);
    Tensor* _a30368 = new Tensor("cccc", idmap__a30368, size__a30368, vgrid__a30368, grid);
    _a30368->initialize();

    int* size__a30369 = new int[4];
    size__a30369[0] = Va;
    size__a30369[1] = Ob;
    size__a30369[2] = Oa;
    size__a30369[3] = Ob;
    int* idmap__a30369 = new int[4];
    idmap__a30369[0] = 0;
    idmap__a30369[1] = 1;
    idmap__a30369[2] = 2;
    idmap__a30369[3] = 3;
    int* vgrid__a30369 = new int[4];
    vgrid__a30369[0] = atoi(argv[3]);
    vgrid__a30369[1] = atoi(argv[3]);
    vgrid__a30369[2] = atoi(argv[3]);
    vgrid__a30369[3] = atoi(argv[3]);
    Tensor* _a30369 = new Tensor("cccc", idmap__a30369, size__a30369, vgrid__a30369, grid);
    _a30369->initialize();

    int* size__a30370 = new int[4];
    size__a30370[0] = Va;
    size__a30370[1] = Ob;
    size__a30370[2] = Ob;
    size__a30370[3] = Oa;
    int* idmap__a30370 = new int[4];
    idmap__a30370[0] = 0;
    idmap__a30370[1] = 1;
    idmap__a30370[2] = 2;
    idmap__a30370[3] = 3;
    int* vgrid__a30370 = new int[4];
    vgrid__a30370[0] = atoi(argv[3]);
    vgrid__a30370[1] = atoi(argv[3]);
    vgrid__a30370[2] = atoi(argv[3]);
    vgrid__a30370[3] = atoi(argv[3]);
    Tensor* _a30370 = new Tensor("cccc", idmap__a30370, size__a30370, vgrid__a30370, grid);
    _a30370->initialize();

    int* size__a3040 = new int[4];
    size__a3040[0] = Ob;
    size__a3040[1] = Va;
    size__a3040[2] = Vb;
    size__a3040[3] = Oa;
    int* idmap__a3040 = new int[4];
    idmap__a3040[0] = 0;
    idmap__a3040[1] = 1;
    idmap__a3040[2] = 2;
    idmap__a3040[3] = 3;
    int* vgrid__a3040 = new int[4];
    vgrid__a3040[0] = atoi(argv[3]);
    vgrid__a3040[1] = atoi(argv[3]);
    vgrid__a3040[2] = atoi(argv[3]);
    vgrid__a3040[3] = atoi(argv[3]);
    Tensor* _a3040 = new Tensor("cccc", idmap__a3040, size__a3040, vgrid__a3040, grid);
    _a3040->initialize();

    int* size__a30499 = new int[4];
    size__a30499[0] = Oa;
    size__a30499[1] = Vb;
    size__a30499[2] = Ob;
    size__a30499[3] = Oa;
    int* idmap__a30499 = new int[4];
    idmap__a30499[0] = 0;
    idmap__a30499[1] = 1;
    idmap__a30499[2] = 2;
    idmap__a30499[3] = 3;
    int* vgrid__a30499 = new int[4];
    vgrid__a30499[0] = atoi(argv[3]);
    vgrid__a30499[1] = atoi(argv[3]);
    vgrid__a30499[2] = atoi(argv[3]);
    vgrid__a30499[3] = atoi(argv[3]);
    Tensor* _a30499 = new Tensor("cccc", idmap__a30499, size__a30499, vgrid__a30499, grid);
    _a30499->initialize();

    int* size__a30500 = new int[4];
    size__a30500[0] = Oa;
    size__a30500[1] = Vb;
    size__a30500[2] = Oa;
    size__a30500[3] = Ob;
    int* idmap__a30500 = new int[4];
    idmap__a30500[0] = 0;
    idmap__a30500[1] = 1;
    idmap__a30500[2] = 2;
    idmap__a30500[3] = 3;
    int* vgrid__a30500 = new int[4];
    vgrid__a30500[0] = atoi(argv[3]);
    vgrid__a30500[1] = atoi(argv[3]);
    vgrid__a30500[2] = atoi(argv[3]);
    vgrid__a30500[3] = atoi(argv[3]);
    Tensor* _a30500 = new Tensor("cccc", idmap__a30500, size__a30500, vgrid__a30500, grid);
    _a30500->initialize();

    int* size__a30560 = new int[4];
    size__a30560[0] = Ob;
    size__a30560[1] = Va;
    size__a30560[2] = Oa;
    size__a30560[3] = Ob;
    int* idmap__a30560 = new int[4];
    idmap__a30560[0] = 0;
    idmap__a30560[1] = 1;
    idmap__a30560[2] = 2;
    idmap__a30560[3] = 3;
    int* vgrid__a30560 = new int[4];
    vgrid__a30560[0] = atoi(argv[3]);
    vgrid__a30560[1] = atoi(argv[3]);
    vgrid__a30560[2] = atoi(argv[3]);
    vgrid__a30560[3] = atoi(argv[3]);
    Tensor* _a30560 = new Tensor("cccc", idmap__a30560, size__a30560, vgrid__a30560, grid);
    _a30560->initialize();

    int* size__a3071 = new int[4];
    size__a3071[0] = Oa;
    size__a3071[1] = Vb;
    size__a3071[2] = Va;
    size__a3071[3] = Ob;
    int* idmap__a3071 = new int[4];
    idmap__a3071[0] = 0;
    idmap__a3071[1] = 1;
    idmap__a3071[2] = 2;
    idmap__a3071[3] = 3;
    int* vgrid__a3071 = new int[4];
    vgrid__a3071[0] = atoi(argv[3]);
    vgrid__a3071[1] = atoi(argv[3]);
    vgrid__a3071[2] = atoi(argv[3]);
    vgrid__a3071[3] = atoi(argv[3]);
    Tensor* _a3071 = new Tensor("cccc", idmap__a3071, size__a3071, vgrid__a3071, grid);
    _a3071->initialize();

    int* size__a30722 = new int[2];
    size__a30722[0] = Oa;
    size__a30722[1] = Oa;
    int* idmap__a30722 = new int[2];
    idmap__a30722[0] = 0;
    idmap__a30722[1] = 1;
    int* vgrid__a30722 = new int[2];
    vgrid__a30722[0] = atoi(argv[3]);
    vgrid__a30722[1] = atoi(argv[3]);
    Tensor* _a30722 = new Tensor("cc", idmap__a30722, size__a30722, vgrid__a30722, grid);
    _a30722->initialize();

    int* size__a31209 = new int[2];
    size__a31209[0] = Oa;
    size__a31209[1] = Oa;
    int* idmap__a31209 = new int[2];
    idmap__a31209[0] = 0;
    idmap__a31209[1] = 1;
    int* vgrid__a31209 = new int[2];
    vgrid__a31209[0] = atoi(argv[3]);
    vgrid__a31209[1] = atoi(argv[3]);
    Tensor* _a31209 = new Tensor("cc", idmap__a31209, size__a31209, vgrid__a31209, grid);
    _a31209->initialize();

    int* size__a3125 = new int[4];
    size__a3125[0] = Ob;
    size__a3125[1] = Va;
    size__a3125[2] = Va;
    size__a3125[3] = Ob;
    int* idmap__a3125 = new int[4];
    idmap__a3125[0] = 0;
    idmap__a3125[1] = 1;
    idmap__a3125[2] = 2;
    idmap__a3125[3] = 3;
    int* vgrid__a3125 = new int[4];
    vgrid__a3125[0] = atoi(argv[3]);
    vgrid__a3125[1] = atoi(argv[3]);
    vgrid__a3125[2] = atoi(argv[3]);
    vgrid__a3125[3] = atoi(argv[3]);
    Tensor* _a3125 = new Tensor("cccc", idmap__a3125, size__a3125, vgrid__a3125, grid);
    _a3125->initialize();

    int* size__a3197 = new int[4];
    size__a3197[0] = Ob;
    size__a3197[1] = Va;
    size__a3197[2] = Vb;
    size__a3197[3] = Oa;
    int* idmap__a3197 = new int[4];
    idmap__a3197[0] = 0;
    idmap__a3197[1] = 1;
    idmap__a3197[2] = 2;
    idmap__a3197[3] = 3;
    int* vgrid__a3197 = new int[4];
    vgrid__a3197[0] = atoi(argv[3]);
    vgrid__a3197[1] = atoi(argv[3]);
    vgrid__a3197[2] = atoi(argv[3]);
    vgrid__a3197[3] = atoi(argv[3]);
    Tensor* _a3197 = new Tensor("cccc", idmap__a3197, size__a3197, vgrid__a3197, grid);
    _a3197->initialize();

    int* size__a3200 = new int[4];
    size__a3200[0] = Va;
    size__a3200[1] = Va;
    size__a3200[2] = Oa;
    size__a3200[3] = Oa;
    int* idmap__a3200 = new int[4];
    idmap__a3200[0] = 0;
    idmap__a3200[1] = 1;
    idmap__a3200[2] = 2;
    idmap__a3200[3] = 3;
    int* vgrid__a3200 = new int[4];
    vgrid__a3200[0] = atoi(argv[3]);
    vgrid__a3200[1] = atoi(argv[3]);
    vgrid__a3200[2] = atoi(argv[3]);
    vgrid__a3200[3] = atoi(argv[3]);
    Tensor* _a3200 = new Tensor("cccc", idmap__a3200, size__a3200, vgrid__a3200, grid);
    _a3200->initialize();

    int* size__a3283 = new int[4];
    size__a3283[0] = Va;
    size__a3283[1] = Va;
    size__a3283[2] = Oa;
    size__a3283[3] = Oa;
    int* idmap__a3283 = new int[4];
    idmap__a3283[0] = 0;
    idmap__a3283[1] = 1;
    idmap__a3283[2] = 2;
    idmap__a3283[3] = 3;
    int* vgrid__a3283 = new int[4];
    vgrid__a3283[0] = atoi(argv[3]);
    vgrid__a3283[1] = atoi(argv[3]);
    vgrid__a3283[2] = atoi(argv[3]);
    vgrid__a3283[3] = atoi(argv[3]);
    Tensor* _a3283 = new Tensor("cccc", idmap__a3283, size__a3283, vgrid__a3283, grid);
    _a3283->initialize();

    int* size__a32872 = new int[2];
    size__a32872[0] = Ob;
    size__a32872[1] = Ob;
    int* idmap__a32872 = new int[2];
    idmap__a32872[0] = 0;
    idmap__a32872[1] = 1;
    int* vgrid__a32872 = new int[2];
    vgrid__a32872[0] = atoi(argv[3]);
    vgrid__a32872[1] = atoi(argv[3]);
    Tensor* _a32872 = new Tensor("cc", idmap__a32872, size__a32872, vgrid__a32872, grid);
    _a32872->initialize();

    int* size__a3331 = new int[4];
    size__a3331[0] = Oa;
    size__a3331[1] = Va;
    size__a3331[2] = Va;
    size__a3331[3] = Oa;
    int* idmap__a3331 = new int[4];
    idmap__a3331[0] = 0;
    idmap__a3331[1] = 1;
    idmap__a3331[2] = 2;
    idmap__a3331[3] = 3;
    int* vgrid__a3331 = new int[4];
    vgrid__a3331[0] = atoi(argv[3]);
    vgrid__a3331[1] = atoi(argv[3]);
    vgrid__a3331[2] = atoi(argv[3]);
    vgrid__a3331[3] = atoi(argv[3]);
    Tensor* _a3331 = new Tensor("cccc", idmap__a3331, size__a3331, vgrid__a3331, grid);
    _a3331->initialize();

    int* size__a3334 = new int[4];
    size__a3334[0] = Va;
    size__a3334[1] = Va;
    size__a3334[2] = Oa;
    size__a3334[3] = Oa;
    int* idmap__a3334 = new int[4];
    idmap__a3334[0] = 0;
    idmap__a3334[1] = 1;
    idmap__a3334[2] = 2;
    idmap__a3334[3] = 3;
    int* vgrid__a3334 = new int[4];
    vgrid__a3334[0] = atoi(argv[3]);
    vgrid__a3334[1] = atoi(argv[3]);
    vgrid__a3334[2] = atoi(argv[3]);
    vgrid__a3334[3] = atoi(argv[3]);
    Tensor* _a3334 = new Tensor("cccc", idmap__a3334, size__a3334, vgrid__a3334, grid);
    _a3334->initialize();

    int* size__a33733 = new int[2];
    size__a33733[0] = Ob;
    size__a33733[1] = Ob;
    int* idmap__a33733 = new int[2];
    idmap__a33733[0] = 0;
    idmap__a33733[1] = 1;
    int* vgrid__a33733 = new int[2];
    vgrid__a33733[0] = atoi(argv[3]);
    vgrid__a33733[1] = atoi(argv[3]);
    Tensor* _a33733 = new Tensor("cc", idmap__a33733, size__a33733, vgrid__a33733, grid);
    _a33733->initialize();

    int* size__a33997 = new int[2];
    size__a33997[0] = Oa;
    size__a33997[1] = Oa;
    int* idmap__a33997 = new int[2];
    idmap__a33997[0] = 0;
    idmap__a33997[1] = 1;
    int* vgrid__a33997 = new int[2];
    vgrid__a33997[0] = atoi(argv[3]);
    vgrid__a33997[1] = atoi(argv[3]);
    Tensor* _a33997 = new Tensor("cc", idmap__a33997, size__a33997, vgrid__a33997, grid);
    _a33997->initialize();

    int* size__a34052 = new int[2];
    size__a34052[0] = Oa;
    size__a34052[1] = Oa;
    int* idmap__a34052 = new int[2];
    idmap__a34052[0] = 0;
    idmap__a34052[1] = 1;
    int* vgrid__a34052 = new int[2];
    vgrid__a34052[0] = atoi(argv[3]);
    vgrid__a34052[1] = atoi(argv[3]);
    Tensor* _a34052 = new Tensor("cc", idmap__a34052, size__a34052, vgrid__a34052, grid);
    _a34052->initialize();

    int* size__a34081 = new int[2];
    size__a34081[0] = Ob;
    size__a34081[1] = Ob;
    int* idmap__a34081 = new int[2];
    idmap__a34081[0] = 0;
    idmap__a34081[1] = 1;
    int* vgrid__a34081 = new int[2];
    vgrid__a34081[0] = atoi(argv[3]);
    vgrid__a34081[1] = atoi(argv[3]);
    Tensor* _a34081 = new Tensor("cc", idmap__a34081, size__a34081, vgrid__a34081, grid);
    _a34081->initialize();

    int* size__a34092 = new int[2];
    size__a34092[0] = Ob;
    size__a34092[1] = Ob;
    int* idmap__a34092 = new int[2];
    idmap__a34092[0] = 0;
    idmap__a34092[1] = 1;
    int* vgrid__a34092 = new int[2];
    vgrid__a34092[0] = atoi(argv[3]);
    vgrid__a34092[1] = atoi(argv[3]);
    Tensor* _a34092 = new Tensor("cc", idmap__a34092, size__a34092, vgrid__a34092, grid);
    _a34092->initialize();

    int* size__a34095 = new int[4];
    size__a34095[0] = Va;
    size__a34095[1] = Vb;
    size__a34095[2] = Oa;
    size__a34095[3] = Ob;
    int* idmap__a34095 = new int[4];
    idmap__a34095[0] = 0;
    idmap__a34095[1] = 1;
    idmap__a34095[2] = 2;
    idmap__a34095[3] = 3;
    int* vgrid__a34095 = new int[4];
    vgrid__a34095[0] = atoi(argv[3]);
    vgrid__a34095[1] = atoi(argv[3]);
    vgrid__a34095[2] = atoi(argv[3]);
    vgrid__a34095[3] = atoi(argv[3]);
    Tensor* _a34095 = new Tensor("cccc", idmap__a34095, size__a34095, vgrid__a34095, grid);
    _a34095->initialize();

    int* size__a34096 = new int[4];
    size__a34096[0] = Va;
    size__a34096[1] = Vb;
    size__a34096[2] = Oa;
    size__a34096[3] = Ob;
    int* idmap__a34096 = new int[4];
    idmap__a34096[0] = 0;
    idmap__a34096[1] = 1;
    idmap__a34096[2] = 2;
    idmap__a34096[3] = 3;
    int* vgrid__a34096 = new int[4];
    vgrid__a34096[0] = atoi(argv[3]);
    vgrid__a34096[1] = atoi(argv[3]);
    vgrid__a34096[2] = atoi(argv[3]);
    vgrid__a34096[3] = atoi(argv[3]);
    Tensor* _a34096 = new Tensor("cccc", idmap__a34096, size__a34096, vgrid__a34096, grid);
    _a34096->initialize();

    int* size__a34097 = new int[4];
    size__a34097[0] = Va;
    size__a34097[1] = Vb;
    size__a34097[2] = Oa;
    size__a34097[3] = Ob;
    int* idmap__a34097 = new int[4];
    idmap__a34097[0] = 0;
    idmap__a34097[1] = 1;
    idmap__a34097[2] = 2;
    idmap__a34097[3] = 3;
    int* vgrid__a34097 = new int[4];
    vgrid__a34097[0] = atoi(argv[3]);
    vgrid__a34097[1] = atoi(argv[3]);
    vgrid__a34097[2] = atoi(argv[3]);
    vgrid__a34097[3] = atoi(argv[3]);
    Tensor* _a34097 = new Tensor("cccc", idmap__a34097, size__a34097, vgrid__a34097, grid);
    _a34097->initialize();

    int* size__a34239 = new int[4];
    size__a34239[0] = Va;
    size__a34239[1] = Oa;
    size__a34239[2] = Va;
    size__a34239[3] = Oa;
    int* idmap__a34239 = new int[4];
    idmap__a34239[0] = 0;
    idmap__a34239[1] = 1;
    idmap__a34239[2] = 2;
    idmap__a34239[3] = 3;
    int* vgrid__a34239 = new int[4];
    vgrid__a34239[0] = atoi(argv[3]);
    vgrid__a34239[1] = atoi(argv[3]);
    vgrid__a34239[2] = atoi(argv[3]);
    vgrid__a34239[3] = atoi(argv[3]);
    Tensor* _a34239 = new Tensor("cccc", idmap__a34239, size__a34239, vgrid__a34239, grid);
    _a34239->initialize();

    int* size__a34240 = new int[4];
    size__a34240[0] = Vb;
    size__a34240[1] = Va;
    size__a34240[2] = Ob;
    size__a34240[3] = Oa;
    int* idmap__a34240 = new int[4];
    idmap__a34240[0] = 0;
    idmap__a34240[1] = 1;
    idmap__a34240[2] = 2;
    idmap__a34240[3] = 3;
    int* vgrid__a34240 = new int[4];
    vgrid__a34240[0] = atoi(argv[3]);
    vgrid__a34240[1] = atoi(argv[3]);
    vgrid__a34240[2] = atoi(argv[3]);
    vgrid__a34240[3] = atoi(argv[3]);
    Tensor* _a34240 = new Tensor("cccc", idmap__a34240, size__a34240, vgrid__a34240, grid);
    _a34240->initialize();

    int* size__a34268 = new int[4];
    size__a34268[0] = Oa;
    size__a34268[1] = Vb;
    size__a34268[2] = Vb;
    size__a34268[3] = Oa;
    int* idmap__a34268 = new int[4];
    idmap__a34268[0] = 0;
    idmap__a34268[1] = 1;
    idmap__a34268[2] = 2;
    idmap__a34268[3] = 3;
    int* vgrid__a34268 = new int[4];
    vgrid__a34268[0] = atoi(argv[3]);
    vgrid__a34268[1] = atoi(argv[3]);
    vgrid__a34268[2] = atoi(argv[3]);
    vgrid__a34268[3] = atoi(argv[3]);
    Tensor* _a34268 = new Tensor("cccc", idmap__a34268, size__a34268, vgrid__a34268, grid);
    _a34268->initialize();

    int* size__a34269 = new int[4];
    size__a34269[0] = Oa;
    size__a34269[1] = Vb;
    size__a34269[2] = Vb;
    size__a34269[3] = Oa;
    int* idmap__a34269 = new int[4];
    idmap__a34269[0] = 0;
    idmap__a34269[1] = 1;
    idmap__a34269[2] = 2;
    idmap__a34269[3] = 3;
    int* vgrid__a34269 = new int[4];
    vgrid__a34269[0] = atoi(argv[3]);
    vgrid__a34269[1] = atoi(argv[3]);
    vgrid__a34269[2] = atoi(argv[3]);
    vgrid__a34269[3] = atoi(argv[3]);
    Tensor* _a34269 = new Tensor("cccc", idmap__a34269, size__a34269, vgrid__a34269, grid);
    _a34269->initialize();

    int* size__a34270 = new int[4];
    size__a34270[0] = Va;
    size__a34270[1] = Vb;
    size__a34270[2] = Ob;
    size__a34270[3] = Oa;
    int* idmap__a34270 = new int[4];
    idmap__a34270[0] = 0;
    idmap__a34270[1] = 1;
    idmap__a34270[2] = 2;
    idmap__a34270[3] = 3;
    int* vgrid__a34270 = new int[4];
    vgrid__a34270[0] = atoi(argv[3]);
    vgrid__a34270[1] = atoi(argv[3]);
    vgrid__a34270[2] = atoi(argv[3]);
    vgrid__a34270[3] = atoi(argv[3]);
    Tensor* _a34270 = new Tensor("cccc", idmap__a34270, size__a34270, vgrid__a34270, grid);
    _a34270->initialize();

    int* size__a34382 = new int[4];
    size__a34382[0] = Ob;
    size__a34382[1] = Vb;
    size__a34382[2] = Vb;
    size__a34382[3] = Ob;
    int* idmap__a34382 = new int[4];
    idmap__a34382[0] = 0;
    idmap__a34382[1] = 1;
    idmap__a34382[2] = 2;
    idmap__a34382[3] = 3;
    int* vgrid__a34382 = new int[4];
    vgrid__a34382[0] = atoi(argv[3]);
    vgrid__a34382[1] = atoi(argv[3]);
    vgrid__a34382[2] = atoi(argv[3]);
    vgrid__a34382[3] = atoi(argv[3]);
    Tensor* _a34382 = new Tensor("cccc", idmap__a34382, size__a34382, vgrid__a34382, grid);
    _a34382->initialize();

    int* size__a34383 = new int[4];
    size__a34383[0] = Va;
    size__a34383[1] = Vb;
    size__a34383[2] = Oa;
    size__a34383[3] = Ob;
    int* idmap__a34383 = new int[4];
    idmap__a34383[0] = 0;
    idmap__a34383[1] = 1;
    idmap__a34383[2] = 2;
    idmap__a34383[3] = 3;
    int* vgrid__a34383 = new int[4];
    vgrid__a34383[0] = atoi(argv[3]);
    vgrid__a34383[1] = atoi(argv[3]);
    vgrid__a34383[2] = atoi(argv[3]);
    vgrid__a34383[3] = atoi(argv[3]);
    Tensor* _a34383 = new Tensor("cccc", idmap__a34383, size__a34383, vgrid__a34383, grid);
    _a34383->initialize();

    int* size__a34463 = new int[4];
    size__a34463[0] = Ob;
    size__a34463[1] = Va;
    size__a34463[2] = Vb;
    size__a34463[3] = Oa;
    int* idmap__a34463 = new int[4];
    idmap__a34463[0] = 0;
    idmap__a34463[1] = 1;
    idmap__a34463[2] = 2;
    idmap__a34463[3] = 3;
    int* vgrid__a34463 = new int[4];
    vgrid__a34463[0] = atoi(argv[3]);
    vgrid__a34463[1] = atoi(argv[3]);
    vgrid__a34463[2] = atoi(argv[3]);
    vgrid__a34463[3] = atoi(argv[3]);
    Tensor* _a34463 = new Tensor("cccc", idmap__a34463, size__a34463, vgrid__a34463, grid);
    _a34463->initialize();

    int* size__a34464 = new int[4];
    size__a34464[0] = Vb;
    size__a34464[1] = Va;
    size__a34464[2] = Ob;
    size__a34464[3] = Oa;
    int* idmap__a34464 = new int[4];
    idmap__a34464[0] = 0;
    idmap__a34464[1] = 1;
    idmap__a34464[2] = 2;
    idmap__a34464[3] = 3;
    int* vgrid__a34464 = new int[4];
    vgrid__a34464[0] = atoi(argv[3]);
    vgrid__a34464[1] = atoi(argv[3]);
    vgrid__a34464[2] = atoi(argv[3]);
    vgrid__a34464[3] = atoi(argv[3]);
    Tensor* _a34464 = new Tensor("cccc", idmap__a34464, size__a34464, vgrid__a34464, grid);
    _a34464->initialize();

    int* size__a34520 = new int[4];
    size__a34520[0] = Ob;
    size__a34520[1] = Va;
    size__a34520[2] = Va;
    size__a34520[3] = Ob;
    int* idmap__a34520 = new int[4];
    idmap__a34520[0] = 0;
    idmap__a34520[1] = 1;
    idmap__a34520[2] = 2;
    idmap__a34520[3] = 3;
    int* vgrid__a34520 = new int[4];
    vgrid__a34520[0] = atoi(argv[3]);
    vgrid__a34520[1] = atoi(argv[3]);
    vgrid__a34520[2] = atoi(argv[3]);
    vgrid__a34520[3] = atoi(argv[3]);
    Tensor* _a34520 = new Tensor("cccc", idmap__a34520, size__a34520, vgrid__a34520, grid);
    _a34520->initialize();

    int* size__a34521 = new int[4];
    size__a34521[0] = Vb;
    size__a34521[1] = Va;
    size__a34521[2] = Oa;
    size__a34521[3] = Ob;
    int* idmap__a34521 = new int[4];
    idmap__a34521[0] = 0;
    idmap__a34521[1] = 1;
    idmap__a34521[2] = 2;
    idmap__a34521[3] = 3;
    int* vgrid__a34521 = new int[4];
    vgrid__a34521[0] = atoi(argv[3]);
    vgrid__a34521[1] = atoi(argv[3]);
    vgrid__a34521[2] = atoi(argv[3]);
    vgrid__a34521[3] = atoi(argv[3]);
    Tensor* _a34521 = new Tensor("cccc", idmap__a34521, size__a34521, vgrid__a34521, grid);
    _a34521->initialize();

    int* size__a34622 = new int[4];
    size__a34622[0] = Oa;
    size__a34622[1] = Ob;
    size__a34622[2] = Oa;
    size__a34622[3] = Ob;
    int* idmap__a34622 = new int[4];
    idmap__a34622[0] = 0;
    idmap__a34622[1] = 1;
    idmap__a34622[2] = 2;
    idmap__a34622[3] = 3;
    int* vgrid__a34622 = new int[4];
    vgrid__a34622[0] = atoi(argv[3]);
    vgrid__a34622[1] = atoi(argv[3]);
    vgrid__a34622[2] = atoi(argv[3]);
    vgrid__a34622[3] = atoi(argv[3]);
    Tensor* _a34622 = new Tensor("cccc", idmap__a34622, size__a34622, vgrid__a34622, grid);
    _a34622->initialize();

    int* size__a34649 = new int[2];
    size__a34649[0] = Vb;
    size__a34649[1] = Vb;
    int* idmap__a34649 = new int[2];
    idmap__a34649[0] = 0;
    idmap__a34649[1] = 1;
    int* vgrid__a34649 = new int[2];
    vgrid__a34649[0] = atoi(argv[3]);
    vgrid__a34649[1] = atoi(argv[3]);
    Tensor* _a34649 = new Tensor("cc", idmap__a34649, size__a34649, vgrid__a34649, grid);
    _a34649->initialize();

    int* size__a34659 = new int[2];
    size__a34659[0] = Va;
    size__a34659[1] = Va;
    int* idmap__a34659 = new int[2];
    idmap__a34659[0] = 0;
    idmap__a34659[1] = 1;
    int* vgrid__a34659 = new int[2];
    vgrid__a34659[0] = atoi(argv[3]);
    vgrid__a34659[1] = atoi(argv[3]);
    Tensor* _a34659 = new Tensor("cc", idmap__a34659, size__a34659, vgrid__a34659, grid);
    _a34659->initialize();

    int* size__a34676 = new int[4];
    size__a34676[0] = Oa;
    size__a34676[1] = Vb;
    size__a34676[2] = Oa;
    size__a34676[3] = Ob;
    int* idmap__a34676 = new int[4];
    idmap__a34676[0] = 0;
    idmap__a34676[1] = 1;
    idmap__a34676[2] = 2;
    idmap__a34676[3] = 3;
    int* vgrid__a34676 = new int[4];
    vgrid__a34676[0] = atoi(argv[3]);
    vgrid__a34676[1] = atoi(argv[3]);
    vgrid__a34676[2] = atoi(argv[3]);
    vgrid__a34676[3] = atoi(argv[3]);
    Tensor* _a34676 = new Tensor("cccc", idmap__a34676, size__a34676, vgrid__a34676, grid);
    _a34676->initialize();

    int* size__a34677 = new int[4];
    size__a34677[0] = Vb;
    size__a34677[1] = Oa;
    size__a34677[2] = Ob;
    size__a34677[3] = Oa;
    int* idmap__a34677 = new int[4];
    idmap__a34677[0] = 0;
    idmap__a34677[1] = 1;
    idmap__a34677[2] = 2;
    idmap__a34677[3] = 3;
    int* vgrid__a34677 = new int[4];
    vgrid__a34677[0] = atoi(argv[3]);
    vgrid__a34677[1] = atoi(argv[3]);
    vgrid__a34677[2] = atoi(argv[3]);
    vgrid__a34677[3] = atoi(argv[3]);
    Tensor* _a34677 = new Tensor("cccc", idmap__a34677, size__a34677, vgrid__a34677, grid);
    _a34677->initialize();

    int* size__a34687 = new int[4];
    size__a34687[0] = Ob;
    size__a34687[1] = Va;
    size__a34687[2] = Oa;
    size__a34687[3] = Ob;
    int* idmap__a34687 = new int[4];
    idmap__a34687[0] = 0;
    idmap__a34687[1] = 1;
    idmap__a34687[2] = 2;
    idmap__a34687[3] = 3;
    int* vgrid__a34687 = new int[4];
    vgrid__a34687[0] = atoi(argv[3]);
    vgrid__a34687[1] = atoi(argv[3]);
    vgrid__a34687[2] = atoi(argv[3]);
    vgrid__a34687[3] = atoi(argv[3]);
    Tensor* _a34687 = new Tensor("cccc", idmap__a34687, size__a34687, vgrid__a34687, grid);
    _a34687->initialize();

    int* size__a34703 = new int[4];
    size__a34703[0] = Oa;
    size__a34703[1] = Ob;
    size__a34703[2] = Oa;
    size__a34703[3] = Ob;
    int* idmap__a34703 = new int[4];
    idmap__a34703[0] = 0;
    idmap__a34703[1] = 1;
    idmap__a34703[2] = 2;
    idmap__a34703[3] = 3;
    int* vgrid__a34703 = new int[4];
    vgrid__a34703[0] = atoi(argv[3]);
    vgrid__a34703[1] = atoi(argv[3]);
    vgrid__a34703[2] = atoi(argv[3]);
    vgrid__a34703[3] = atoi(argv[3]);
    Tensor* _a34703 = new Tensor("cccc", idmap__a34703, size__a34703, vgrid__a34703, grid);
    _a34703->initialize();

    int* size__a34717 = new int[2];
    size__a34717[0] = Va;
    size__a34717[1] = Va;
    int* idmap__a34717 = new int[2];
    idmap__a34717[0] = 0;
    idmap__a34717[1] = 1;
    int* vgrid__a34717 = new int[2];
    vgrid__a34717[0] = atoi(argv[3]);
    vgrid__a34717[1] = atoi(argv[3]);
    Tensor* _a34717 = new Tensor("cc", idmap__a34717, size__a34717, vgrid__a34717, grid);
    _a34717->initialize();

    int* size__a34718 = new int[2];
    size__a34718[0] = Va;
    size__a34718[1] = Va;
    int* idmap__a34718 = new int[2];
    idmap__a34718[0] = 0;
    idmap__a34718[1] = 1;
    int* vgrid__a34718 = new int[2];
    vgrid__a34718[0] = atoi(argv[3]);
    vgrid__a34718[1] = atoi(argv[3]);
    Tensor* _a34718 = new Tensor("cc", idmap__a34718, size__a34718, vgrid__a34718, grid);
    _a34718->initialize();

    int* size__a3473 = new int[4];
    size__a3473[0] = Vb;
    size__a3473[1] = Vb;
    size__a3473[2] = Ob;
    size__a3473[3] = Ob;
    int* idmap__a3473 = new int[4];
    idmap__a3473[0] = 0;
    idmap__a3473[1] = 1;
    idmap__a3473[2] = 2;
    idmap__a3473[3] = 3;
    int* vgrid__a3473 = new int[4];
    vgrid__a3473[0] = atoi(argv[3]);
    vgrid__a3473[1] = atoi(argv[3]);
    vgrid__a3473[2] = atoi(argv[3]);
    vgrid__a3473[3] = atoi(argv[3]);
    Tensor* _a3473 = new Tensor("cccc", idmap__a3473, size__a3473, vgrid__a3473, grid);
    _a3473->initialize();

    int* size__a34731 = new int[4];
    size__a34731[0] = Ob;
    size__a34731[1] = Va;
    size__a34731[2] = Oa;
    size__a34731[3] = Ob;
    int* idmap__a34731 = new int[4];
    idmap__a34731[0] = 0;
    idmap__a34731[1] = 1;
    idmap__a34731[2] = 2;
    idmap__a34731[3] = 3;
    int* vgrid__a34731 = new int[4];
    vgrid__a34731[0] = atoi(argv[3]);
    vgrid__a34731[1] = atoi(argv[3]);
    vgrid__a34731[2] = atoi(argv[3]);
    vgrid__a34731[3] = atoi(argv[3]);
    Tensor* _a34731 = new Tensor("cccc", idmap__a34731, size__a34731, vgrid__a34731, grid);
    _a34731->initialize();

    int* size__a34744 = new int[2];
    size__a34744[0] = Ob;
    size__a34744[1] = Ob;
    int* idmap__a34744 = new int[2];
    idmap__a34744[0] = 0;
    idmap__a34744[1] = 1;
    int* vgrid__a34744 = new int[2];
    vgrid__a34744[0] = atoi(argv[3]);
    vgrid__a34744[1] = atoi(argv[3]);
    Tensor* _a34744 = new Tensor("cc", idmap__a34744, size__a34744, vgrid__a34744, grid);
    _a34744->initialize();

    int* size__a34758 = new int[2];
    size__a34758[0] = Oa;
    size__a34758[1] = Oa;
    int* idmap__a34758 = new int[2];
    idmap__a34758[0] = 0;
    idmap__a34758[1] = 1;
    int* vgrid__a34758 = new int[2];
    vgrid__a34758[0] = atoi(argv[3]);
    vgrid__a34758[1] = atoi(argv[3]);
    Tensor* _a34758 = new Tensor("cc", idmap__a34758, size__a34758, vgrid__a34758, grid);
    _a34758->initialize();

    int* size__a34780 = new int[4];
    size__a34780[0] = Oa;
    size__a34780[1] = Vb;
    size__a34780[2] = Oa;
    size__a34780[3] = Ob;
    int* idmap__a34780 = new int[4];
    idmap__a34780[0] = 0;
    idmap__a34780[1] = 1;
    idmap__a34780[2] = 2;
    idmap__a34780[3] = 3;
    int* vgrid__a34780 = new int[4];
    vgrid__a34780[0] = atoi(argv[3]);
    vgrid__a34780[1] = atoi(argv[3]);
    vgrid__a34780[2] = atoi(argv[3]);
    vgrid__a34780[3] = atoi(argv[3]);
    Tensor* _a34780 = new Tensor("cccc", idmap__a34780, size__a34780, vgrid__a34780, grid);
    _a34780->initialize();

    int* size__a34781 = new int[4];
    size__a34781[0] = Oa;
    size__a34781[1] = Vb;
    size__a34781[2] = Oa;
    size__a34781[3] = Ob;
    int* idmap__a34781 = new int[4];
    idmap__a34781[0] = 0;
    idmap__a34781[1] = 1;
    idmap__a34781[2] = 2;
    idmap__a34781[3] = 3;
    int* vgrid__a34781 = new int[4];
    vgrid__a34781[0] = atoi(argv[3]);
    vgrid__a34781[1] = atoi(argv[3]);
    vgrid__a34781[2] = atoi(argv[3]);
    vgrid__a34781[3] = atoi(argv[3]);
    Tensor* _a34781 = new Tensor("cccc", idmap__a34781, size__a34781, vgrid__a34781, grid);
    _a34781->initialize();

    int* size__a34809 = new int[4];
    size__a34809[0] = Oa;
    size__a34809[1] = Vb;
    size__a34809[2] = Va;
    size__a34809[3] = Ob;
    int* idmap__a34809 = new int[4];
    idmap__a34809[0] = 0;
    idmap__a34809[1] = 1;
    idmap__a34809[2] = 2;
    idmap__a34809[3] = 3;
    int* vgrid__a34809 = new int[4];
    vgrid__a34809[0] = atoi(argv[3]);
    vgrid__a34809[1] = atoi(argv[3]);
    vgrid__a34809[2] = atoi(argv[3]);
    vgrid__a34809[3] = atoi(argv[3]);
    Tensor* _a34809 = new Tensor("cccc", idmap__a34809, size__a34809, vgrid__a34809, grid);
    _a34809->initialize();

    int* size__a34810 = new int[4];
    size__a34810[0] = Va;
    size__a34810[1] = Vb;
    size__a34810[2] = Oa;
    size__a34810[3] = Ob;
    int* idmap__a34810 = new int[4];
    idmap__a34810[0] = 0;
    idmap__a34810[1] = 1;
    idmap__a34810[2] = 2;
    idmap__a34810[3] = 3;
    int* vgrid__a34810 = new int[4];
    vgrid__a34810[0] = atoi(argv[3]);
    vgrid__a34810[1] = atoi(argv[3]);
    vgrid__a34810[2] = atoi(argv[3]);
    vgrid__a34810[3] = atoi(argv[3]);
    Tensor* _a34810 = new Tensor("cccc", idmap__a34810, size__a34810, vgrid__a34810, grid);
    _a34810->initialize();

    int* size__a34818 = new int[4];
    size__a34818[0] = Va;
    size__a34818[1] = Ob;
    size__a34818[2] = Oa;
    size__a34818[3] = Ob;
    int* idmap__a34818 = new int[4];
    idmap__a34818[0] = 0;
    idmap__a34818[1] = 1;
    idmap__a34818[2] = 2;
    idmap__a34818[3] = 3;
    int* vgrid__a34818 = new int[4];
    vgrid__a34818[0] = atoi(argv[3]);
    vgrid__a34818[1] = atoi(argv[3]);
    vgrid__a34818[2] = atoi(argv[3]);
    vgrid__a34818[3] = atoi(argv[3]);
    Tensor* _a34818 = new Tensor("cccc", idmap__a34818, size__a34818, vgrid__a34818, grid);
    _a34818->initialize();

    int* size__a34819 = new int[4];
    size__a34819[0] = Ob;
    size__a34819[1] = Va;
    size__a34819[2] = Oa;
    size__a34819[3] = Ob;
    int* idmap__a34819 = new int[4];
    idmap__a34819[0] = 0;
    idmap__a34819[1] = 1;
    idmap__a34819[2] = 2;
    idmap__a34819[3] = 3;
    int* vgrid__a34819 = new int[4];
    vgrid__a34819[0] = atoi(argv[3]);
    vgrid__a34819[1] = atoi(argv[3]);
    vgrid__a34819[2] = atoi(argv[3]);
    vgrid__a34819[3] = atoi(argv[3]);
    Tensor* _a34819 = new Tensor("cccc", idmap__a34819, size__a34819, vgrid__a34819, grid);
    _a34819->initialize();

    int* size__a34826 = new int[4];
    size__a34826[0] = Oa;
    size__a34826[1] = Vb;
    size__a34826[2] = Oa;
    size__a34826[3] = Ob;
    int* idmap__a34826 = new int[4];
    idmap__a34826[0] = 0;
    idmap__a34826[1] = 1;
    idmap__a34826[2] = 2;
    idmap__a34826[3] = 3;
    int* vgrid__a34826 = new int[4];
    vgrid__a34826[0] = atoi(argv[3]);
    vgrid__a34826[1] = atoi(argv[3]);
    vgrid__a34826[2] = atoi(argv[3]);
    vgrid__a34826[3] = atoi(argv[3]);
    Tensor* _a34826 = new Tensor("cccc", idmap__a34826, size__a34826, vgrid__a34826, grid);
    _a34826->initialize();

    int* size__a34827 = new int[4];
    size__a34827[0] = Vb;
    size__a34827[1] = Oa;
    size__a34827[2] = Ob;
    size__a34827[3] = Oa;
    int* idmap__a34827 = new int[4];
    idmap__a34827[0] = 0;
    idmap__a34827[1] = 1;
    idmap__a34827[2] = 2;
    idmap__a34827[3] = 3;
    int* vgrid__a34827 = new int[4];
    vgrid__a34827[0] = atoi(argv[3]);
    vgrid__a34827[1] = atoi(argv[3]);
    vgrid__a34827[2] = atoi(argv[3]);
    vgrid__a34827[3] = atoi(argv[3]);
    Tensor* _a34827 = new Tensor("cccc", idmap__a34827, size__a34827, vgrid__a34827, grid);
    _a34827->initialize();

    int* size__a34841 = new int[2];
    size__a34841[0] = Ob;
    size__a34841[1] = Ob;
    int* idmap__a34841 = new int[2];
    idmap__a34841[0] = 0;
    idmap__a34841[1] = 1;
    int* vgrid__a34841 = new int[2];
    vgrid__a34841[0] = atoi(argv[3]);
    vgrid__a34841[1] = atoi(argv[3]);
    Tensor* _a34841 = new Tensor("cc", idmap__a34841, size__a34841, vgrid__a34841, grid);
    _a34841->initialize();

    int* size__a34851 = new int[2];
    size__a34851[0] = Oa;
    size__a34851[1] = Oa;
    int* idmap__a34851 = new int[2];
    idmap__a34851[0] = 0;
    idmap__a34851[1] = 1;
    int* vgrid__a34851 = new int[2];
    vgrid__a34851[0] = atoi(argv[3]);
    vgrid__a34851[1] = atoi(argv[3]);
    Tensor* _a34851 = new Tensor("cc", idmap__a34851, size__a34851, vgrid__a34851, grid);
    _a34851->initialize();

    int* size__a34862 = new int[4];
    size__a34862[0] = Oa;
    size__a34862[1] = Vb;
    size__a34862[2] = Oa;
    size__a34862[3] = Ob;
    int* idmap__a34862 = new int[4];
    idmap__a34862[0] = 0;
    idmap__a34862[1] = 1;
    idmap__a34862[2] = 2;
    idmap__a34862[3] = 3;
    int* vgrid__a34862 = new int[4];
    vgrid__a34862[0] = atoi(argv[3]);
    vgrid__a34862[1] = atoi(argv[3]);
    vgrid__a34862[2] = atoi(argv[3]);
    vgrid__a34862[3] = atoi(argv[3]);
    Tensor* _a34862 = new Tensor("cccc", idmap__a34862, size__a34862, vgrid__a34862, grid);
    _a34862->initialize();

    int* size__a34870 = new int[4];
    size__a34870[0] = Ob;
    size__a34870[1] = Va;
    size__a34870[2] = Oa;
    size__a34870[3] = Ob;
    int* idmap__a34870 = new int[4];
    idmap__a34870[0] = 0;
    idmap__a34870[1] = 1;
    idmap__a34870[2] = 2;
    idmap__a34870[3] = 3;
    int* vgrid__a34870 = new int[4];
    vgrid__a34870[0] = atoi(argv[3]);
    vgrid__a34870[1] = atoi(argv[3]);
    vgrid__a34870[2] = atoi(argv[3]);
    vgrid__a34870[3] = atoi(argv[3]);
    Tensor* _a34870 = new Tensor("cccc", idmap__a34870, size__a34870, vgrid__a34870, grid);
    _a34870->initialize();

    int* size__a34878 = new int[4];
    size__a34878[0] = Oa;
    size__a34878[1] = Ob;
    size__a34878[2] = Oa;
    size__a34878[3] = Ob;
    int* idmap__a34878 = new int[4];
    idmap__a34878[0] = 0;
    idmap__a34878[1] = 1;
    idmap__a34878[2] = 2;
    idmap__a34878[3] = 3;
    int* vgrid__a34878 = new int[4];
    vgrid__a34878[0] = atoi(argv[3]);
    vgrid__a34878[1] = atoi(argv[3]);
    vgrid__a34878[2] = atoi(argv[3]);
    vgrid__a34878[3] = atoi(argv[3]);
    Tensor* _a34878 = new Tensor("cccc", idmap__a34878, size__a34878, vgrid__a34878, grid);
    _a34878->initialize();

    int* size__a34879 = new int[4];
    size__a34879[0] = Va;
    size__a34879[1] = Vb;
    size__a34879[2] = Oa;
    size__a34879[3] = Ob;
    int* idmap__a34879 = new int[4];
    idmap__a34879[0] = 0;
    idmap__a34879[1] = 1;
    idmap__a34879[2] = 2;
    idmap__a34879[3] = 3;
    int* vgrid__a34879 = new int[4];
    vgrid__a34879[0] = atoi(argv[3]);
    vgrid__a34879[1] = atoi(argv[3]);
    vgrid__a34879[2] = atoi(argv[3]);
    vgrid__a34879[3] = atoi(argv[3]);
    Tensor* _a34879 = new Tensor("cccc", idmap__a34879, size__a34879, vgrid__a34879, grid);
    _a34879->initialize();

    int* size__a34888 = new int[2];
    size__a34888[0] = Vb;
    size__a34888[1] = Vb;
    int* idmap__a34888 = new int[2];
    idmap__a34888[0] = 0;
    idmap__a34888[1] = 1;
    int* vgrid__a34888 = new int[2];
    vgrid__a34888[0] = atoi(argv[3]);
    vgrid__a34888[1] = atoi(argv[3]);
    Tensor* _a34888 = new Tensor("cc", idmap__a34888, size__a34888, vgrid__a34888, grid);
    _a34888->initialize();

    int* size__a34889 = new int[4];
    size__a34889[0] = Va;
    size__a34889[1] = Vb;
    size__a34889[2] = Oa;
    size__a34889[3] = Ob;
    int* idmap__a34889 = new int[4];
    idmap__a34889[0] = 0;
    idmap__a34889[1] = 1;
    idmap__a34889[2] = 2;
    idmap__a34889[3] = 3;
    int* vgrid__a34889 = new int[4];
    vgrid__a34889[0] = atoi(argv[3]);
    vgrid__a34889[1] = atoi(argv[3]);
    vgrid__a34889[2] = atoi(argv[3]);
    vgrid__a34889[3] = atoi(argv[3]);
    Tensor* _a34889 = new Tensor("cccc", idmap__a34889, size__a34889, vgrid__a34889, grid);
    _a34889->initialize();

    int* size__a34896 = new int[2];
    size__a34896[0] = Va;
    size__a34896[1] = Va;
    int* idmap__a34896 = new int[2];
    idmap__a34896[0] = 0;
    idmap__a34896[1] = 1;
    int* vgrid__a34896 = new int[2];
    vgrid__a34896[0] = atoi(argv[3]);
    vgrid__a34896[1] = atoi(argv[3]);
    Tensor* _a34896 = new Tensor("cc", idmap__a34896, size__a34896, vgrid__a34896, grid);
    _a34896->initialize();

    int* size__a34897 = new int[4];
    size__a34897[0] = Vb;
    size__a34897[1] = Va;
    size__a34897[2] = Oa;
    size__a34897[3] = Ob;
    int* idmap__a34897 = new int[4];
    idmap__a34897[0] = 0;
    idmap__a34897[1] = 1;
    idmap__a34897[2] = 2;
    idmap__a34897[3] = 3;
    int* vgrid__a34897 = new int[4];
    vgrid__a34897[0] = atoi(argv[3]);
    vgrid__a34897[1] = atoi(argv[3]);
    vgrid__a34897[2] = atoi(argv[3]);
    vgrid__a34897[3] = atoi(argv[3]);
    Tensor* _a34897 = new Tensor("cccc", idmap__a34897, size__a34897, vgrid__a34897, grid);
    _a34897->initialize();

    int* size__a34908 = new int[4];
    size__a34908[0] = Ob;
    size__a34908[1] = Va;
    size__a34908[2] = Oa;
    size__a34908[3] = Ob;
    int* idmap__a34908 = new int[4];
    idmap__a34908[0] = 0;
    idmap__a34908[1] = 1;
    idmap__a34908[2] = 2;
    idmap__a34908[3] = 3;
    int* vgrid__a34908 = new int[4];
    vgrid__a34908[0] = atoi(argv[3]);
    vgrid__a34908[1] = atoi(argv[3]);
    vgrid__a34908[2] = atoi(argv[3]);
    vgrid__a34908[3] = atoi(argv[3]);
    Tensor* _a34908 = new Tensor("cccc", idmap__a34908, size__a34908, vgrid__a34908, grid);
    _a34908->initialize();

    int* size__a34916 = new int[4];
    size__a34916[0] = Vb;
    size__a34916[1] = Oa;
    size__a34916[2] = Ob;
    size__a34916[3] = Oa;
    int* idmap__a34916 = new int[4];
    idmap__a34916[0] = 0;
    idmap__a34916[1] = 1;
    idmap__a34916[2] = 2;
    idmap__a34916[3] = 3;
    int* vgrid__a34916 = new int[4];
    vgrid__a34916[0] = atoi(argv[3]);
    vgrid__a34916[1] = atoi(argv[3]);
    vgrid__a34916[2] = atoi(argv[3]);
    vgrid__a34916[3] = atoi(argv[3]);
    Tensor* _a34916 = new Tensor("cccc", idmap__a34916, size__a34916, vgrid__a34916, grid);
    _a34916->initialize();

    int* size__a34924 = new int[2];
    size__a34924[0] = Ob;
    size__a34924[1] = Ob;
    int* idmap__a34924 = new int[2];
    idmap__a34924[0] = 0;
    idmap__a34924[1] = 1;
    int* vgrid__a34924 = new int[2];
    vgrid__a34924[0] = atoi(argv[3]);
    vgrid__a34924[1] = atoi(argv[3]);
    Tensor* _a34924 = new Tensor("cc", idmap__a34924, size__a34924, vgrid__a34924, grid);
    _a34924->initialize();

    int* size__a34925 = new int[4];
    size__a34925[0] = Va;
    size__a34925[1] = Vb;
    size__a34925[2] = Oa;
    size__a34925[3] = Ob;
    int* idmap__a34925 = new int[4];
    idmap__a34925[0] = 0;
    idmap__a34925[1] = 1;
    idmap__a34925[2] = 2;
    idmap__a34925[3] = 3;
    int* vgrid__a34925 = new int[4];
    vgrid__a34925[0] = atoi(argv[3]);
    vgrid__a34925[1] = atoi(argv[3]);
    vgrid__a34925[2] = atoi(argv[3]);
    vgrid__a34925[3] = atoi(argv[3]);
    Tensor* _a34925 = new Tensor("cccc", idmap__a34925, size__a34925, vgrid__a34925, grid);
    _a34925->initialize();

    int* size__a34932 = new int[2];
    size__a34932[0] = Oa;
    size__a34932[1] = Oa;
    int* idmap__a34932 = new int[2];
    idmap__a34932[0] = 0;
    idmap__a34932[1] = 1;
    int* vgrid__a34932 = new int[2];
    vgrid__a34932[0] = atoi(argv[3]);
    vgrid__a34932[1] = atoi(argv[3]);
    Tensor* _a34932 = new Tensor("cc", idmap__a34932, size__a34932, vgrid__a34932, grid);
    _a34932->initialize();

    int* size__a34933 = new int[4];
    size__a34933[0] = Va;
    size__a34933[1] = Vb;
    size__a34933[2] = Ob;
    size__a34933[3] = Oa;
    int* idmap__a34933 = new int[4];
    idmap__a34933[0] = 0;
    idmap__a34933[1] = 1;
    idmap__a34933[2] = 2;
    idmap__a34933[3] = 3;
    int* vgrid__a34933 = new int[4];
    vgrid__a34933[0] = atoi(argv[3]);
    vgrid__a34933[1] = atoi(argv[3]);
    vgrid__a34933[2] = atoi(argv[3]);
    vgrid__a34933[3] = atoi(argv[3]);
    Tensor* _a34933 = new Tensor("cccc", idmap__a34933, size__a34933, vgrid__a34933, grid);
    _a34933->initialize();

    int* size__a34944 = new int[4];
    size__a34944[0] = Ob;
    size__a34944[1] = Va;
    size__a34944[2] = Oa;
    size__a34944[3] = Ob;
    int* idmap__a34944 = new int[4];
    idmap__a34944[0] = 0;
    idmap__a34944[1] = 1;
    idmap__a34944[2] = 2;
    idmap__a34944[3] = 3;
    int* vgrid__a34944 = new int[4];
    vgrid__a34944[0] = atoi(argv[3]);
    vgrid__a34944[1] = atoi(argv[3]);
    vgrid__a34944[2] = atoi(argv[3]);
    vgrid__a34944[3] = atoi(argv[3]);
    Tensor* _a34944 = new Tensor("cccc", idmap__a34944, size__a34944, vgrid__a34944, grid);
    _a34944->initialize();

    int* size__a34945 = new int[4];
    size__a34945[0] = Vb;
    size__a34945[1] = Va;
    size__a34945[2] = Oa;
    size__a34945[3] = Ob;
    int* idmap__a34945 = new int[4];
    idmap__a34945[0] = 0;
    idmap__a34945[1] = 1;
    idmap__a34945[2] = 2;
    idmap__a34945[3] = 3;
    int* vgrid__a34945 = new int[4];
    vgrid__a34945[0] = atoi(argv[3]);
    vgrid__a34945[1] = atoi(argv[3]);
    vgrid__a34945[2] = atoi(argv[3]);
    vgrid__a34945[3] = atoi(argv[3]);
    Tensor* _a34945 = new Tensor("cccc", idmap__a34945, size__a34945, vgrid__a34945, grid);
    _a34945->initialize();

    int* size__a34952 = new int[4];
    size__a34952[0] = Vb;
    size__a34952[1] = Oa;
    size__a34952[2] = Ob;
    size__a34952[3] = Oa;
    int* idmap__a34952 = new int[4];
    idmap__a34952[0] = 0;
    idmap__a34952[1] = 1;
    idmap__a34952[2] = 2;
    idmap__a34952[3] = 3;
    int* vgrid__a34952 = new int[4];
    vgrid__a34952[0] = atoi(argv[3]);
    vgrid__a34952[1] = atoi(argv[3]);
    vgrid__a34952[2] = atoi(argv[3]);
    vgrid__a34952[3] = atoi(argv[3]);
    Tensor* _a34952 = new Tensor("cccc", idmap__a34952, size__a34952, vgrid__a34952, grid);
    _a34952->initialize();

    int* size__a34953 = new int[4];
    size__a34953[0] = Va;
    size__a34953[1] = Vb;
    size__a34953[2] = Ob;
    size__a34953[3] = Oa;
    int* idmap__a34953 = new int[4];
    idmap__a34953[0] = 0;
    idmap__a34953[1] = 1;
    idmap__a34953[2] = 2;
    idmap__a34953[3] = 3;
    int* vgrid__a34953 = new int[4];
    vgrid__a34953[0] = atoi(argv[3]);
    vgrid__a34953[1] = atoi(argv[3]);
    vgrid__a34953[2] = atoi(argv[3]);
    vgrid__a34953[3] = atoi(argv[3]);
    Tensor* _a34953 = new Tensor("cccc", idmap__a34953, size__a34953, vgrid__a34953, grid);
    _a34953->initialize();

    int* size__a3499 = new int[4];
    size__a3499[0] = Vb;
    size__a3499[1] = Vb;
    size__a3499[2] = Ob;
    size__a3499[3] = Ob;
    int* idmap__a3499 = new int[4];
    idmap__a3499[0] = 0;
    idmap__a3499[1] = 1;
    idmap__a3499[2] = 2;
    idmap__a3499[3] = 3;
    int* vgrid__a3499 = new int[4];
    vgrid__a3499[0] = atoi(argv[3]);
    vgrid__a3499[1] = atoi(argv[3]);
    vgrid__a3499[2] = atoi(argv[3]);
    vgrid__a3499[3] = atoi(argv[3]);
    Tensor* _a3499 = new Tensor("cccc", idmap__a3499, size__a3499, vgrid__a3499, grid);
    _a3499->initialize();

    int* size__a3543 = new int[4];
    size__a3543[0] = Vb;
    size__a3543[1] = Vb;
    size__a3543[2] = Ob;
    size__a3543[3] = Ob;
    int* idmap__a3543 = new int[4];
    idmap__a3543[0] = 0;
    idmap__a3543[1] = 1;
    idmap__a3543[2] = 2;
    idmap__a3543[3] = 3;
    int* vgrid__a3543 = new int[4];
    vgrid__a3543[0] = atoi(argv[3]);
    vgrid__a3543[1] = atoi(argv[3]);
    vgrid__a3543[2] = atoi(argv[3]);
    vgrid__a3543[3] = atoi(argv[3]);
    Tensor* _a3543 = new Tensor("cccc", idmap__a3543, size__a3543, vgrid__a3543, grid);
    _a3543->initialize();

    int* size__a3645 = new int[4];
    size__a3645[0] = Va;
    size__a3645[1] = Va;
    size__a3645[2] = Oa;
    size__a3645[3] = Oa;
    int* idmap__a3645 = new int[4];
    idmap__a3645[0] = 0;
    idmap__a3645[1] = 1;
    idmap__a3645[2] = 2;
    idmap__a3645[3] = 3;
    int* vgrid__a3645 = new int[4];
    vgrid__a3645[0] = atoi(argv[3]);
    vgrid__a3645[1] = atoi(argv[3]);
    vgrid__a3645[2] = atoi(argv[3]);
    vgrid__a3645[3] = atoi(argv[3]);
    Tensor* _a3645 = new Tensor("aabb", idmap__a3645, size__a3645, vgrid__a3645, grid);
    _a3645->initialize();

    int* size__a3650 = new int[4];
    size__a3650[0] = Vb;
    size__a3650[1] = Vb;
    size__a3650[2] = Ob;
    size__a3650[3] = Ob;
    int* idmap__a3650 = new int[4];
    idmap__a3650[0] = 0;
    idmap__a3650[1] = 1;
    idmap__a3650[2] = 2;
    idmap__a3650[3] = 3;
    int* vgrid__a3650 = new int[4];
    vgrid__a3650[0] = atoi(argv[3]);
    vgrid__a3650[1] = atoi(argv[3]);
    vgrid__a3650[2] = atoi(argv[3]);
    vgrid__a3650[3] = atoi(argv[3]);
    Tensor* _a3650 = new Tensor("aabb", idmap__a3650, size__a3650, vgrid__a3650, grid);
    _a3650->initialize();

    int* size__a3655 = new int[4];
    size__a3655[0] = Va;
    size__a3655[1] = Ob;
    size__a3655[2] = Vb;
    size__a3655[3] = Oa;
    int* idmap__a3655 = new int[4];
    idmap__a3655[0] = 0;
    idmap__a3655[1] = 1;
    idmap__a3655[2] = 2;
    idmap__a3655[3] = 3;
    int* vgrid__a3655 = new int[4];
    vgrid__a3655[0] = atoi(argv[3]);
    vgrid__a3655[1] = atoi(argv[3]);
    vgrid__a3655[2] = atoi(argv[3]);
    vgrid__a3655[3] = atoi(argv[3]);
    Tensor* _a3655 = new Tensor("cccc", idmap__a3655, size__a3655, vgrid__a3655, grid);
    _a3655->initialize();

    int* size__a3685 = new int[4];
    size__a3685[0] = Va;
    size__a3685[1] = Oa;
    size__a3685[2] = Va;
    size__a3685[3] = Oa;
    int* idmap__a3685 = new int[4];
    idmap__a3685[0] = 0;
    idmap__a3685[1] = 1;
    idmap__a3685[2] = 2;
    idmap__a3685[3] = 3;
    int* vgrid__a3685 = new int[4];
    vgrid__a3685[0] = atoi(argv[3]);
    vgrid__a3685[1] = atoi(argv[3]);
    vgrid__a3685[2] = atoi(argv[3]);
    vgrid__a3685[3] = atoi(argv[3]);
    Tensor* _a3685 = new Tensor("cccc", idmap__a3685, size__a3685, vgrid__a3685, grid);
    _a3685->initialize();

    int* size__a37019 = new int[4];
    size__a37019[0] = Oa;
    size__a37019[1] = Oa;
    size__a37019[2] = Oa;
    size__a37019[3] = Oa;
    int* idmap__a37019 = new int[4];
    idmap__a37019[0] = 0;
    idmap__a37019[1] = 1;
    idmap__a37019[2] = 2;
    idmap__a37019[3] = 3;
    int* vgrid__a37019 = new int[4];
    vgrid__a37019[0] = atoi(argv[3]);
    vgrid__a37019[1] = atoi(argv[3]);
    vgrid__a37019[2] = atoi(argv[3]);
    vgrid__a37019[3] = atoi(argv[3]);
    Tensor* _a37019 = new Tensor("aacc", idmap__a37019, size__a37019, vgrid__a37019, grid);
    _a37019->initialize();

    int* size__a3715 = new int[4];
    size__a3715[0] = Va;
    size__a3715[1] = Ob;
    size__a3715[2] = Va;
    size__a3715[3] = Ob;
    int* idmap__a3715 = new int[4];
    idmap__a3715[0] = 0;
    idmap__a3715[1] = 1;
    idmap__a3715[2] = 2;
    idmap__a3715[3] = 3;
    int* vgrid__a3715 = new int[4];
    vgrid__a3715[0] = atoi(argv[3]);
    vgrid__a3715[1] = atoi(argv[3]);
    vgrid__a3715[2] = atoi(argv[3]);
    vgrid__a3715[3] = atoi(argv[3]);
    Tensor* _a3715 = new Tensor("cccc", idmap__a3715, size__a3715, vgrid__a3715, grid);
    _a3715->initialize();

    int* size__a3775 = new int[4];
    size__a3775[0] = Vb;
    size__a3775[1] = Ob;
    size__a3775[2] = Vb;
    size__a3775[3] = Ob;
    int* idmap__a3775 = new int[4];
    idmap__a3775[0] = 0;
    idmap__a3775[1] = 1;
    idmap__a3775[2] = 2;
    idmap__a3775[3] = 3;
    int* vgrid__a3775 = new int[4];
    vgrid__a3775[0] = atoi(argv[3]);
    vgrid__a3775[1] = atoi(argv[3]);
    vgrid__a3775[2] = atoi(argv[3]);
    vgrid__a3775[3] = atoi(argv[3]);
    Tensor* _a3775 = new Tensor("cccc", idmap__a3775, size__a3775, vgrid__a3775, grid);
    _a3775->initialize();

    int* size__a3805 = new int[4];
    size__a3805[0] = Oa;
    size__a3805[1] = Vb;
    size__a3805[2] = Va;
    size__a3805[3] = Ob;
    int* idmap__a3805 = new int[4];
    idmap__a3805[0] = 0;
    idmap__a3805[1] = 1;
    idmap__a3805[2] = 2;
    idmap__a3805[3] = 3;
    int* vgrid__a3805 = new int[4];
    vgrid__a3805[0] = atoi(argv[3]);
    vgrid__a3805[1] = atoi(argv[3]);
    vgrid__a3805[2] = atoi(argv[3]);
    vgrid__a3805[3] = atoi(argv[3]);
    Tensor* _a3805 = new Tensor("cccc", idmap__a3805, size__a3805, vgrid__a3805, grid);
    _a3805->initialize();

    int* size__a38149 = new int[4];
    size__a38149[0] = Oa;
    size__a38149[1] = Oa;
    size__a38149[2] = Oa;
    size__a38149[3] = Oa;
    int* idmap__a38149 = new int[4];
    idmap__a38149[0] = 0;
    idmap__a38149[1] = 1;
    idmap__a38149[2] = 2;
    idmap__a38149[3] = 3;
    int* vgrid__a38149 = new int[4];
    vgrid__a38149[0] = atoi(argv[3]);
    vgrid__a38149[1] = atoi(argv[3]);
    vgrid__a38149[2] = atoi(argv[3]);
    vgrid__a38149[3] = atoi(argv[3]);
    Tensor* _a38149 = new Tensor("aacc", idmap__a38149, size__a38149, vgrid__a38149, grid);
    _a38149->initialize();

    int* size__a38257 = new int[4];
    size__a38257[0] = Oa;
    size__a38257[1] = Oa;
    size__a38257[2] = Oa;
    size__a38257[3] = Oa;
    int* idmap__a38257 = new int[4];
    idmap__a38257[0] = 0;
    idmap__a38257[1] = 1;
    idmap__a38257[2] = 2;
    idmap__a38257[3] = 3;
    int* vgrid__a38257 = new int[4];
    vgrid__a38257[0] = atoi(argv[3]);
    vgrid__a38257[1] = atoi(argv[3]);
    vgrid__a38257[2] = atoi(argv[3]);
    vgrid__a38257[3] = atoi(argv[3]);
    Tensor* _a38257 = new Tensor("aacc", idmap__a38257, size__a38257, vgrid__a38257, grid);
    _a38257->initialize();

    int* size__a3869 = new int[4];
    size__a3869[0] = Va;
    size__a3869[1] = Va;
    size__a3869[2] = Oa;
    size__a3869[3] = Oa;
    int* idmap__a3869 = new int[4];
    idmap__a3869[0] = 0;
    idmap__a3869[1] = 1;
    idmap__a3869[2] = 2;
    idmap__a3869[3] = 3;
    int* vgrid__a3869 = new int[4];
    vgrid__a3869[0] = atoi(argv[3]);
    vgrid__a3869[1] = atoi(argv[3]);
    vgrid__a3869[2] = atoi(argv[3]);
    vgrid__a3869[3] = atoi(argv[3]);
    Tensor* _a3869 = new Tensor("cccc", idmap__a3869, size__a3869, vgrid__a3869, grid);
    _a3869->initialize();

    int* size__a3919 = new int[4];
    size__a3919[0] = Va;
    size__a3919[1] = Va;
    size__a3919[2] = Oa;
    size__a3919[3] = Oa;
    int* idmap__a3919 = new int[4];
    idmap__a3919[0] = 0;
    idmap__a3919[1] = 1;
    idmap__a3919[2] = 2;
    idmap__a3919[3] = 3;
    int* vgrid__a3919 = new int[4];
    vgrid__a3919[0] = atoi(argv[3]);
    vgrid__a3919[1] = atoi(argv[3]);
    vgrid__a3919[2] = atoi(argv[3]);
    vgrid__a3919[3] = atoi(argv[3]);
    Tensor* _a3919 = new Tensor("cccc", idmap__a3919, size__a3919, vgrid__a3919, grid);
    _a3919->initialize();

    int* size__a40025 = new int[2];
    size__a40025[0] = Oa;
    size__a40025[1] = Oa;
    int* idmap__a40025 = new int[2];
    idmap__a40025[0] = 0;
    idmap__a40025[1] = 1;
    int* vgrid__a40025 = new int[2];
    vgrid__a40025[0] = atoi(argv[3]);
    vgrid__a40025[1] = atoi(argv[3]);
    Tensor* _a40025 = new Tensor("cc", idmap__a40025, size__a40025, vgrid__a40025, grid);
    _a40025->initialize();

    int* size__a40582 = new int[2];
    size__a40582[0] = Oa;
    size__a40582[1] = Oa;
    int* idmap__a40582 = new int[2];
    idmap__a40582[0] = 0;
    idmap__a40582[1] = 1;
    int* vgrid__a40582 = new int[2];
    vgrid__a40582[0] = atoi(argv[3]);
    vgrid__a40582[1] = atoi(argv[3]);
    Tensor* _a40582 = new Tensor("cc", idmap__a40582, size__a40582, vgrid__a40582, grid);
    _a40582->initialize();

    int* size__a4209 = new int[4];
    size__a4209[0] = Vb;
    size__a4209[1] = Vb;
    size__a4209[2] = Ob;
    size__a4209[3] = Ob;
    int* idmap__a4209 = new int[4];
    idmap__a4209[0] = 0;
    idmap__a4209[1] = 1;
    idmap__a4209[2] = 2;
    idmap__a4209[3] = 3;
    int* vgrid__a4209 = new int[4];
    vgrid__a4209[0] = atoi(argv[3]);
    vgrid__a4209[1] = atoi(argv[3]);
    vgrid__a4209[2] = atoi(argv[3]);
    vgrid__a4209[3] = atoi(argv[3]);
    Tensor* _a4209 = new Tensor("cccc", idmap__a4209, size__a4209, vgrid__a4209, grid);
    _a4209->initialize();

    int* size__a42322 = new int[2];
    size__a42322[0] = Oa;
    size__a42322[1] = Oa;
    int* idmap__a42322 = new int[2];
    idmap__a42322[0] = 0;
    idmap__a42322[1] = 1;
    int* vgrid__a42322 = new int[2];
    vgrid__a42322[0] = atoi(argv[3]);
    vgrid__a42322[1] = atoi(argv[3]);
    Tensor* _a42322 = new Tensor("cc", idmap__a42322, size__a42322, vgrid__a42322, grid);
    _a42322->initialize();

    int* size__a4259 = new int[4];
    size__a4259[0] = Vb;
    size__a4259[1] = Vb;
    size__a4259[2] = Ob;
    size__a4259[3] = Ob;
    int* idmap__a4259 = new int[4];
    idmap__a4259[0] = 0;
    idmap__a4259[1] = 1;
    idmap__a4259[2] = 2;
    idmap__a4259[3] = 3;
    int* vgrid__a4259 = new int[4];
    vgrid__a4259[0] = atoi(argv[3]);
    vgrid__a4259[1] = atoi(argv[3]);
    vgrid__a4259[2] = atoi(argv[3]);
    vgrid__a4259[3] = atoi(argv[3]);
    Tensor* _a4259 = new Tensor("cccc", idmap__a4259, size__a4259, vgrid__a4259, grid);
    _a4259->initialize();

    int* size__a42656 = new int[2];
    size__a42656[0] = Oa;
    size__a42656[1] = Oa;
    int* idmap__a42656 = new int[2];
    idmap__a42656[0] = 0;
    idmap__a42656[1] = 1;
    int* vgrid__a42656 = new int[2];
    vgrid__a42656[0] = atoi(argv[3]);
    vgrid__a42656[1] = atoi(argv[3]);
    Tensor* _a42656 = new Tensor("cc", idmap__a42656, size__a42656, vgrid__a42656, grid);
    _a42656->initialize();

    int* size__a42703 = new int[4];
    size__a42703[0] = Oa;
    size__a42703[1] = Va;
    size__a42703[2] = Oa;
    size__a42703[3] = Oa;
    int* idmap__a42703 = new int[4];
    idmap__a42703[0] = 0;
    idmap__a42703[1] = 1;
    idmap__a42703[2] = 2;
    idmap__a42703[3] = 3;
    int* vgrid__a42703 = new int[4];
    vgrid__a42703[0] = atoi(argv[3]);
    vgrid__a42703[1] = atoi(argv[3]);
    vgrid__a42703[2] = atoi(argv[3]);
    vgrid__a42703[3] = atoi(argv[3]);
    Tensor* _a42703 = new Tensor("ccaa", idmap__a42703, size__a42703, vgrid__a42703, grid);
    _a42703->initialize();

    int* size__a42704 = new int[4];
    size__a42704[0] = Oa;
    size__a42704[1] = Va;
    size__a42704[2] = Oa;
    size__a42704[3] = Oa;
    int* idmap__a42704 = new int[4];
    idmap__a42704[0] = 0;
    idmap__a42704[1] = 1;
    idmap__a42704[2] = 2;
    idmap__a42704[3] = 3;
    int* vgrid__a42704 = new int[4];
    vgrid__a42704[0] = atoi(argv[3]);
    vgrid__a42704[1] = atoi(argv[3]);
    vgrid__a42704[2] = atoi(argv[3]);
    vgrid__a42704[3] = atoi(argv[3]);
    Tensor* _a42704 = new Tensor("ccaa", idmap__a42704, size__a42704, vgrid__a42704, grid);
    _a42704->initialize();

    int* size__a42744 = new int[2];
    size__a42744[0] = Oa;
    size__a42744[1] = Oa;
    int* idmap__a42744 = new int[2];
    idmap__a42744[0] = 0;
    idmap__a42744[1] = 1;
    int* vgrid__a42744 = new int[2];
    vgrid__a42744[0] = atoi(argv[3]);
    vgrid__a42744[1] = atoi(argv[3]);
    Tensor* _a42744 = new Tensor("cc", idmap__a42744, size__a42744, vgrid__a42744, grid);
    _a42744->initialize();

    int* size__a42745 = new int[2];
    size__a42745[0] = Oa;
    size__a42745[1] = Oa;
    int* idmap__a42745 = new int[2];
    idmap__a42745[0] = 0;
    idmap__a42745[1] = 1;
    int* vgrid__a42745 = new int[2];
    vgrid__a42745[0] = atoi(argv[3]);
    vgrid__a42745[1] = atoi(argv[3]);
    Tensor* _a42745 = new Tensor("cc", idmap__a42745, size__a42745, vgrid__a42745, grid);
    _a42745->initialize();

    int* size__a42784 = new int[2];
    size__a42784[0] = Oa;
    size__a42784[1] = Oa;
    int* idmap__a42784 = new int[2];
    idmap__a42784[0] = 0;
    idmap__a42784[1] = 1;
    int* vgrid__a42784 = new int[2];
    vgrid__a42784[0] = atoi(argv[3]);
    vgrid__a42784[1] = atoi(argv[3]);
    Tensor* _a42784 = new Tensor("cc", idmap__a42784, size__a42784, vgrid__a42784, grid);
    _a42784->initialize();

    int* size__a42789 = new int[2];
    size__a42789[0] = Oa;
    size__a42789[1] = Oa;
    int* idmap__a42789 = new int[2];
    idmap__a42789[0] = 0;
    idmap__a42789[1] = 1;
    int* vgrid__a42789 = new int[2];
    vgrid__a42789[0] = atoi(argv[3]);
    vgrid__a42789[1] = atoi(argv[3]);
    Tensor* _a42789 = new Tensor("cc", idmap__a42789, size__a42789, vgrid__a42789, grid);
    _a42789->initialize();

    int* size__a42804 = new int[2];
    size__a42804[0] = Oa;
    size__a42804[1] = Oa;
    int* idmap__a42804 = new int[2];
    idmap__a42804[0] = 0;
    idmap__a42804[1] = 1;
    int* vgrid__a42804 = new int[2];
    vgrid__a42804[0] = atoi(argv[3]);
    vgrid__a42804[1] = atoi(argv[3]);
    Tensor* _a42804 = new Tensor("cc", idmap__a42804, size__a42804, vgrid__a42804, grid);
    _a42804->initialize();

    int* size__a4490 = new int[4];
    size__a4490[0] = Va;
    size__a4490[1] = Va;
    size__a4490[2] = Oa;
    size__a4490[3] = Oa;
    int* idmap__a4490 = new int[4];
    idmap__a4490[0] = 0;
    idmap__a4490[1] = 1;
    idmap__a4490[2] = 2;
    idmap__a4490[3] = 3;
    int* vgrid__a4490 = new int[4];
    vgrid__a4490[0] = atoi(argv[3]);
    vgrid__a4490[1] = atoi(argv[3]);
    vgrid__a4490[2] = atoi(argv[3]);
    vgrid__a4490[3] = atoi(argv[3]);
    Tensor* _a4490 = new Tensor("cccc", idmap__a4490, size__a4490, vgrid__a4490, grid);
    _a4490->initialize();

    int* size__a4495 = new int[4];
    size__a4495[0] = Va;
    size__a4495[1] = Va;
    size__a4495[2] = Oa;
    size__a4495[3] = Oa;
    int* idmap__a4495 = new int[4];
    idmap__a4495[0] = 0;
    idmap__a4495[1] = 1;
    idmap__a4495[2] = 2;
    idmap__a4495[3] = 3;
    int* vgrid__a4495 = new int[4];
    vgrid__a4495[0] = atoi(argv[3]);
    vgrid__a4495[1] = atoi(argv[3]);
    vgrid__a4495[2] = atoi(argv[3]);
    vgrid__a4495[3] = atoi(argv[3]);
    Tensor* _a4495 = new Tensor("cccc", idmap__a4495, size__a4495, vgrid__a4495, grid);
    _a4495->initialize();

    int* size__a4500 = new int[4];
    size__a4500[0] = Vb;
    size__a4500[1] = Vb;
    size__a4500[2] = Ob;
    size__a4500[3] = Ob;
    int* idmap__a4500 = new int[4];
    idmap__a4500[0] = 0;
    idmap__a4500[1] = 1;
    idmap__a4500[2] = 2;
    idmap__a4500[3] = 3;
    int* vgrid__a4500 = new int[4];
    vgrid__a4500[0] = atoi(argv[3]);
    vgrid__a4500[1] = atoi(argv[3]);
    vgrid__a4500[2] = atoi(argv[3]);
    vgrid__a4500[3] = atoi(argv[3]);
    Tensor* _a4500 = new Tensor("cccc", idmap__a4500, size__a4500, vgrid__a4500, grid);
    _a4500->initialize();

    int* size__a4505 = new int[4];
    size__a4505[0] = Vb;
    size__a4505[1] = Vb;
    size__a4505[2] = Ob;
    size__a4505[3] = Ob;
    int* idmap__a4505 = new int[4];
    idmap__a4505[0] = 0;
    idmap__a4505[1] = 1;
    idmap__a4505[2] = 2;
    idmap__a4505[3] = 3;
    int* vgrid__a4505 = new int[4];
    vgrid__a4505[0] = atoi(argv[3]);
    vgrid__a4505[1] = atoi(argv[3]);
    vgrid__a4505[2] = atoi(argv[3]);
    vgrid__a4505[3] = atoi(argv[3]);
    Tensor* _a4505 = new Tensor("cccc", idmap__a4505, size__a4505, vgrid__a4505, grid);
    _a4505->initialize();

    int* size__a4511 = new int[4];
    size__a4511[0] = Va;
    size__a4511[1] = Va;
    size__a4511[2] = Va;
    size__a4511[3] = Oa;
    int* idmap__a4511 = new int[4];
    idmap__a4511[0] = 0;
    idmap__a4511[1] = 1;
    idmap__a4511[2] = 2;
    idmap__a4511[3] = 3;
    int* vgrid__a4511 = new int[4];
    vgrid__a4511[0] = atoi(argv[3]);
    vgrid__a4511[1] = atoi(argv[3]);
    vgrid__a4511[2] = atoi(argv[3]);
    vgrid__a4511[3] = atoi(argv[3]);
    Tensor* _a4511 = new Tensor("aacc", idmap__a4511, size__a4511, vgrid__a4511, grid);
    _a4511->initialize();

    int* size__a4514 = new int[4];
    size__a4514[0] = Va;
    size__a4514[1] = Va;
    size__a4514[2] = Oa;
    size__a4514[3] = Oa;
    int* idmap__a4514 = new int[4];
    idmap__a4514[0] = 0;
    idmap__a4514[1] = 1;
    idmap__a4514[2] = 2;
    idmap__a4514[3] = 3;
    int* vgrid__a4514 = new int[4];
    vgrid__a4514[0] = atoi(argv[3]);
    vgrid__a4514[1] = atoi(argv[3]);
    vgrid__a4514[2] = atoi(argv[3]);
    vgrid__a4514[3] = atoi(argv[3]);
    Tensor* _a4514 = new Tensor("aacc", idmap__a4514, size__a4514, vgrid__a4514, grid);
    _a4514->initialize();

    int* size__a4541 = new int[4];
    size__a4541[0] = Vb;
    size__a4541[1] = Vb;
    size__a4541[2] = Vb;
    size__a4541[3] = Ob;
    int* idmap__a4541 = new int[4];
    idmap__a4541[0] = 0;
    idmap__a4541[1] = 1;
    idmap__a4541[2] = 2;
    idmap__a4541[3] = 3;
    int* vgrid__a4541 = new int[4];
    vgrid__a4541[0] = atoi(argv[3]);
    vgrid__a4541[1] = atoi(argv[3]);
    vgrid__a4541[2] = atoi(argv[3]);
    vgrid__a4541[3] = atoi(argv[3]);
    Tensor* _a4541 = new Tensor("aacc", idmap__a4541, size__a4541, vgrid__a4541, grid);
    _a4541->initialize();

    int* size__a4544 = new int[4];
    size__a4544[0] = Vb;
    size__a4544[1] = Vb;
    size__a4544[2] = Ob;
    size__a4544[3] = Ob;
    int* idmap__a4544 = new int[4];
    idmap__a4544[0] = 0;
    idmap__a4544[1] = 1;
    idmap__a4544[2] = 2;
    idmap__a4544[3] = 3;
    int* vgrid__a4544 = new int[4];
    vgrid__a4544[0] = atoi(argv[3]);
    vgrid__a4544[1] = atoi(argv[3]);
    vgrid__a4544[2] = atoi(argv[3]);
    vgrid__a4544[3] = atoi(argv[3]);
    Tensor* _a4544 = new Tensor("aacc", idmap__a4544, size__a4544, vgrid__a4544, grid);
    _a4544->initialize();

    int* size__a45798 = new int[4];
    size__a45798[0] = Oa;
    size__a45798[1] = Oa;
    size__a45798[2] = Oa;
    size__a45798[3] = Oa;
    int* idmap__a45798 = new int[4];
    idmap__a45798[0] = 0;
    idmap__a45798[1] = 1;
    idmap__a45798[2] = 2;
    idmap__a45798[3] = 3;
    int* vgrid__a45798 = new int[4];
    vgrid__a45798[0] = atoi(argv[3]);
    vgrid__a45798[1] = atoi(argv[3]);
    vgrid__a45798[2] = atoi(argv[3]);
    vgrid__a45798[3] = atoi(argv[3]);
    Tensor* _a45798 = new Tensor("ccaa", idmap__a45798, size__a45798, vgrid__a45798, grid);
    _a45798->initialize();

    int* size__a4601 = new int[4];
    size__a4601[0] = Va;
    size__a4601[1] = Oa;
    size__a4601[2] = Oa;
    size__a4601[3] = Oa;
    int* idmap__a4601 = new int[4];
    idmap__a4601[0] = 0;
    idmap__a4601[1] = 1;
    idmap__a4601[2] = 2;
    idmap__a4601[3] = 3;
    int* vgrid__a4601 = new int[4];
    vgrid__a4601[0] = atoi(argv[3]);
    vgrid__a4601[1] = atoi(argv[3]);
    vgrid__a4601[2] = atoi(argv[3]);
    vgrid__a4601[3] = atoi(argv[3]);
    Tensor* _a4601 = new Tensor("ccaa", idmap__a4601, size__a4601, vgrid__a4601, grid);
    _a4601->initialize();

    int* size__a46510 = new int[2];
    size__a46510[0] = Oa;
    size__a46510[1] = Oa;
    int* idmap__a46510 = new int[2];
    idmap__a46510[0] = 0;
    idmap__a46510[1] = 1;
    int* vgrid__a46510 = new int[2];
    vgrid__a46510[0] = atoi(argv[3]);
    vgrid__a46510[1] = atoi(argv[3]);
    Tensor* _a46510 = new Tensor("cc", idmap__a46510, size__a46510, vgrid__a46510, grid);
    _a46510->initialize();

    int* size__a46511 = new int[2];
    size__a46511[0] = Oa;
    size__a46511[1] = Oa;
    int* idmap__a46511 = new int[2];
    idmap__a46511[0] = 0;
    idmap__a46511[1] = 1;
    int* vgrid__a46511 = new int[2];
    vgrid__a46511[0] = atoi(argv[3]);
    vgrid__a46511[1] = atoi(argv[3]);
    Tensor* _a46511 = new Tensor("cc", idmap__a46511, size__a46511, vgrid__a46511, grid);
    _a46511->initialize();

    int* size__a4701 = new int[4];
    size__a4701[0] = Vb;
    size__a4701[1] = Ob;
    size__a4701[2] = Ob;
    size__a4701[3] = Ob;
    int* idmap__a4701 = new int[4];
    idmap__a4701[0] = 0;
    idmap__a4701[1] = 1;
    idmap__a4701[2] = 2;
    idmap__a4701[3] = 3;
    int* vgrid__a4701 = new int[4];
    vgrid__a4701[0] = atoi(argv[3]);
    vgrid__a4701[1] = atoi(argv[3]);
    vgrid__a4701[2] = atoi(argv[3]);
    vgrid__a4701[3] = atoi(argv[3]);
    Tensor* _a4701 = new Tensor("ccaa", idmap__a4701, size__a4701, vgrid__a4701, grid);
    _a4701->initialize();

    int* size__a4801 = new int[2];
    size__a4801[0] = Vb;
    size__a4801[1] = Vb;
    int* idmap__a4801 = new int[2];
    idmap__a4801[0] = 0;
    idmap__a4801[1] = 1;
    int* vgrid__a4801 = new int[2];
    vgrid__a4801[0] = atoi(argv[3]);
    vgrid__a4801[1] = atoi(argv[3]);
    Tensor* _a4801 = new Tensor("cc", idmap__a4801, size__a4801, vgrid__a4801, grid);
    _a4801->initialize();

    int* size__a48054 = new int[4];
    size__a48054[0] = Va;
    size__a48054[1] = Oa;
    size__a48054[2] = Oa;
    size__a48054[3] = Oa;
    int* idmap__a48054 = new int[4];
    idmap__a48054[0] = 0;
    idmap__a48054[1] = 1;
    idmap__a48054[2] = 2;
    idmap__a48054[3] = 3;
    int* vgrid__a48054 = new int[4];
    vgrid__a48054[0] = atoi(argv[3]);
    vgrid__a48054[1] = atoi(argv[3]);
    vgrid__a48054[2] = atoi(argv[3]);
    vgrid__a48054[3] = atoi(argv[3]);
    Tensor* _a48054 = new Tensor("ccaa", idmap__a48054, size__a48054, vgrid__a48054, grid);
    _a48054->initialize();

    int* size__a48055 = new int[4];
    size__a48055[0] = Va;
    size__a48055[1] = Oa;
    size__a48055[2] = Oa;
    size__a48055[3] = Oa;
    int* idmap__a48055 = new int[4];
    idmap__a48055[0] = 0;
    idmap__a48055[1] = 1;
    idmap__a48055[2] = 2;
    idmap__a48055[3] = 3;
    int* vgrid__a48055 = new int[4];
    vgrid__a48055[0] = atoi(argv[3]);
    vgrid__a48055[1] = atoi(argv[3]);
    vgrid__a48055[2] = atoi(argv[3]);
    vgrid__a48055[3] = atoi(argv[3]);
    Tensor* _a48055 = new Tensor("ccaa", idmap__a48055, size__a48055, vgrid__a48055, grid);
    _a48055->initialize();

    int* size__a4861 = new int[2];
    size__a4861[0] = Va;
    size__a4861[1] = Va;
    int* idmap__a4861 = new int[2];
    idmap__a4861[0] = 0;
    idmap__a4861[1] = 1;
    int* vgrid__a4861 = new int[2];
    vgrid__a4861[0] = atoi(argv[3]);
    vgrid__a4861[1] = atoi(argv[3]);
    Tensor* _a4861 = new Tensor("cc", idmap__a4861, size__a4861, vgrid__a4861, grid);
    _a4861->initialize();

    int* size__a4920 = new int[4];
    size__a4920[0] = Oa;
    size__a4920[1] = Ob;
    size__a4920[2] = Oa;
    size__a4920[3] = Ob;
    int* idmap__a4920 = new int[4];
    idmap__a4920[0] = 0;
    idmap__a4920[1] = 1;
    idmap__a4920[2] = 2;
    idmap__a4920[3] = 3;
    int* vgrid__a4920 = new int[4];
    vgrid__a4920[0] = atoi(argv[3]);
    vgrid__a4920[1] = atoi(argv[3]);
    vgrid__a4920[2] = atoi(argv[3]);
    vgrid__a4920[3] = atoi(argv[3]);
    Tensor* _a4920 = new Tensor("cccc", idmap__a4920, size__a4920, vgrid__a4920, grid);
    _a4920->initialize();

    int* size__a49220 = new int[4];
    size__a49220[0] = Va;
    size__a49220[1] = Oa;
    size__a49220[2] = Oa;
    size__a49220[3] = Oa;
    int* idmap__a49220 = new int[4];
    idmap__a49220[0] = 0;
    idmap__a49220[1] = 1;
    idmap__a49220[2] = 2;
    idmap__a49220[3] = 3;
    int* vgrid__a49220 = new int[4];
    vgrid__a49220[0] = atoi(argv[3]);
    vgrid__a49220[1] = atoi(argv[3]);
    vgrid__a49220[2] = atoi(argv[3]);
    vgrid__a49220[3] = atoi(argv[3]);
    Tensor* _a49220 = new Tensor("ccaa", idmap__a49220, size__a49220, vgrid__a49220, grid);
    _a49220->initialize();

    int* size__a4981 = new int[2];
    size__a4981[0] = Vb;
    size__a4981[1] = Vb;
    int* idmap__a4981 = new int[2];
    idmap__a4981[0] = 0;
    idmap__a4981[1] = 1;
    int* vgrid__a4981 = new int[2];
    vgrid__a4981[0] = atoi(argv[3]);
    vgrid__a4981[1] = atoi(argv[3]);
    Tensor* _a4981 = new Tensor("cc", idmap__a4981, size__a4981, vgrid__a4981, grid);
    _a4981->initialize();

    int* size__a5011 = new int[2];
    size__a5011[0] = Va;
    size__a5011[1] = Va;
    int* idmap__a5011 = new int[2];
    idmap__a5011[0] = 0;
    idmap__a5011[1] = 1;
    int* vgrid__a5011 = new int[2];
    vgrid__a5011[0] = atoi(argv[3]);
    vgrid__a5011[1] = atoi(argv[3]);
    Tensor* _a5011 = new Tensor("cc", idmap__a5011, size__a5011, vgrid__a5011, grid);
    _a5011->initialize();

    int* size__a5043 = new int[4];
    size__a5043[0] = Va;
    size__a5043[1] = Va;
    size__a5043[2] = Oa;
    size__a5043[3] = Oa;
    int* idmap__a5043 = new int[4];
    idmap__a5043[0] = 0;
    idmap__a5043[1] = 1;
    idmap__a5043[2] = 2;
    idmap__a5043[3] = 3;
    int* vgrid__a5043 = new int[4];
    vgrid__a5043[0] = atoi(argv[3]);
    vgrid__a5043[1] = atoi(argv[3]);
    vgrid__a5043[2] = atoi(argv[3]);
    vgrid__a5043[3] = atoi(argv[3]);
    Tensor* _a5043 = new Tensor("ccaa", idmap__a5043, size__a5043, vgrid__a5043, grid);
    _a5043->initialize();

    int* size__a5089 = new int[4];
    size__a5089[0] = Vb;
    size__a5089[1] = Vb;
    size__a5089[2] = Ob;
    size__a5089[3] = Ob;
    int* idmap__a5089 = new int[4];
    idmap__a5089[0] = 0;
    idmap__a5089[1] = 1;
    idmap__a5089[2] = 2;
    idmap__a5089[3] = 3;
    int* vgrid__a5089 = new int[4];
    vgrid__a5089[0] = atoi(argv[3]);
    vgrid__a5089[1] = atoi(argv[3]);
    vgrid__a5089[2] = atoi(argv[3]);
    vgrid__a5089[3] = atoi(argv[3]);
    Tensor* _a5089 = new Tensor("ccaa", idmap__a5089, size__a5089, vgrid__a5089, grid);
    _a5089->initialize();

    int* size__a51084 = new int[4];
    size__a51084[0] = Va;
    size__a51084[1] = Oa;
    size__a51084[2] = Oa;
    size__a51084[3] = Oa;
    int* idmap__a51084 = new int[4];
    idmap__a51084[0] = 0;
    idmap__a51084[1] = 1;
    idmap__a51084[2] = 2;
    idmap__a51084[3] = 3;
    int* vgrid__a51084 = new int[4];
    vgrid__a51084[0] = atoi(argv[3]);
    vgrid__a51084[1] = atoi(argv[3]);
    vgrid__a51084[2] = atoi(argv[3]);
    vgrid__a51084[3] = atoi(argv[3]);
    Tensor* _a51084 = new Tensor("ccaa", idmap__a51084, size__a51084, vgrid__a51084, grid);
    _a51084->initialize();

    int* size__a5130 = new int[4];
    size__a5130[0] = Oa;
    size__a5130[1] = Ob;
    size__a5130[2] = Vb;
    size__a5130[3] = Oa;
    int* idmap__a5130 = new int[4];
    idmap__a5130[0] = 0;
    idmap__a5130[1] = 1;
    idmap__a5130[2] = 2;
    idmap__a5130[3] = 3;
    int* vgrid__a5130 = new int[4];
    vgrid__a5130[0] = atoi(argv[3]);
    vgrid__a5130[1] = atoi(argv[3]);
    vgrid__a5130[2] = atoi(argv[3]);
    vgrid__a5130[3] = atoi(argv[3]);
    Tensor* _a5130 = new Tensor("cccc", idmap__a5130, size__a5130, vgrid__a5130, grid);
    _a5130->initialize();

    int* size__a51883 = new int[4];
    size__a51883[0] = Oa;
    size__a51883[1] = Va;
    size__a51883[2] = Oa;
    size__a51883[3] = Oa;
    int* idmap__a51883 = new int[4];
    idmap__a51883[0] = 0;
    idmap__a51883[1] = 1;
    idmap__a51883[2] = 2;
    idmap__a51883[3] = 3;
    int* vgrid__a51883 = new int[4];
    vgrid__a51883[0] = atoi(argv[3]);
    vgrid__a51883[1] = atoi(argv[3]);
    vgrid__a51883[2] = atoi(argv[3]);
    vgrid__a51883[3] = atoi(argv[3]);
    Tensor* _a51883 = new Tensor("ccaa", idmap__a51883, size__a51883, vgrid__a51883, grid);
    _a51883->initialize();

    int* size__a52398 = new int[4];
    size__a52398[0] = Oa;
    size__a52398[1] = Va;
    size__a52398[2] = Oa;
    size__a52398[3] = Oa;
    int* idmap__a52398 = new int[4];
    idmap__a52398[0] = 0;
    idmap__a52398[1] = 1;
    idmap__a52398[2] = 2;
    idmap__a52398[3] = 3;
    int* vgrid__a52398 = new int[4];
    vgrid__a52398[0] = atoi(argv[3]);
    vgrid__a52398[1] = atoi(argv[3]);
    vgrid__a52398[2] = atoi(argv[3]);
    vgrid__a52398[3] = atoi(argv[3]);
    Tensor* _a52398 = new Tensor("ccaa", idmap__a52398, size__a52398, vgrid__a52398, grid);
    _a52398->initialize();

    int* size__a5246 = new int[4];
    size__a5246[0] = Oa;
    size__a5246[1] = Ob;
    size__a5246[2] = Va;
    size__a5246[3] = Ob;
    int* idmap__a5246 = new int[4];
    idmap__a5246[0] = 0;
    idmap__a5246[1] = 1;
    idmap__a5246[2] = 2;
    idmap__a5246[3] = 3;
    int* vgrid__a5246 = new int[4];
    vgrid__a5246[0] = atoi(argv[3]);
    vgrid__a5246[1] = atoi(argv[3]);
    vgrid__a5246[2] = atoi(argv[3]);
    vgrid__a5246[3] = atoi(argv[3]);
    Tensor* _a5246 = new Tensor("cccc", idmap__a5246, size__a5246, vgrid__a5246, grid);
    _a5246->initialize();

    int* size__a52784 = new int[2];
    size__a52784[0] = Oa;
    size__a52784[1] = Oa;
    int* idmap__a52784 = new int[2];
    idmap__a52784[0] = 0;
    idmap__a52784[1] = 1;
    int* vgrid__a52784 = new int[2];
    vgrid__a52784[0] = atoi(argv[3]);
    vgrid__a52784[1] = atoi(argv[3]);
    Tensor* _a52784 = new Tensor("cc", idmap__a52784, size__a52784, vgrid__a52784, grid);
    _a52784->initialize();

    int* size__a52785 = new int[2];
    size__a52785[0] = Oa;
    size__a52785[1] = Oa;
    int* idmap__a52785 = new int[2];
    idmap__a52785[0] = 0;
    idmap__a52785[1] = 1;
    int* vgrid__a52785 = new int[2];
    vgrid__a52785[0] = atoi(argv[3]);
    vgrid__a52785[1] = atoi(argv[3]);
    Tensor* _a52785 = new Tensor("cc", idmap__a52785, size__a52785, vgrid__a52785, grid);
    _a52785->initialize();

    int* size__a52789 = new int[2];
    size__a52789[0] = Oa;
    size__a52789[1] = Oa;
    int* idmap__a52789 = new int[2];
    idmap__a52789[0] = 0;
    idmap__a52789[1] = 1;
    int* vgrid__a52789 = new int[2];
    vgrid__a52789[0] = atoi(argv[3]);
    vgrid__a52789[1] = atoi(argv[3]);
    Tensor* _a52789 = new Tensor("cc", idmap__a52789, size__a52789, vgrid__a52789, grid);
    _a52789->initialize();

    int* size__a57517 = new int[4];
    size__a57517[0] = Oa;
    size__a57517[1] = Oa;
    size__a57517[2] = Oa;
    size__a57517[3] = Oa;
    int* idmap__a57517 = new int[4];
    idmap__a57517[0] = 0;
    idmap__a57517[1] = 1;
    idmap__a57517[2] = 2;
    idmap__a57517[3] = 3;
    int* vgrid__a57517 = new int[4];
    vgrid__a57517[0] = atoi(argv[3]);
    vgrid__a57517[1] = atoi(argv[3]);
    vgrid__a57517[2] = atoi(argv[3]);
    vgrid__a57517[3] = atoi(argv[3]);
    Tensor* _a57517 = new Tensor("aacc", idmap__a57517, size__a57517, vgrid__a57517, grid);
    _a57517->initialize();

    int* size__a57518 = new int[4];
    size__a57518[0] = Va;
    size__a57518[1] = Va;
    size__a57518[2] = Oa;
    size__a57518[3] = Oa;
    int* idmap__a57518 = new int[4];
    idmap__a57518[0] = 0;
    idmap__a57518[1] = 1;
    idmap__a57518[2] = 2;
    idmap__a57518[3] = 3;
    int* vgrid__a57518 = new int[4];
    vgrid__a57518[0] = atoi(argv[3]);
    vgrid__a57518[1] = atoi(argv[3]);
    vgrid__a57518[2] = atoi(argv[3]);
    vgrid__a57518[3] = atoi(argv[3]);
    Tensor* _a57518 = new Tensor("aacc", idmap__a57518, size__a57518, vgrid__a57518, grid);
    _a57518->initialize();

    int* size__a5959 = new int[4];
    size__a5959[0] = Va;
    size__a5959[1] = Oa;
    size__a5959[2] = Oa;
    size__a5959[3] = Oa;
    int* idmap__a5959 = new int[4];
    idmap__a5959[0] = 0;
    idmap__a5959[1] = 1;
    idmap__a5959[2] = 2;
    idmap__a5959[3] = 3;
    int* vgrid__a5959 = new int[4];
    vgrid__a5959[0] = atoi(argv[3]);
    vgrid__a5959[1] = atoi(argv[3]);
    vgrid__a5959[2] = atoi(argv[3]);
    vgrid__a5959[3] = atoi(argv[3]);
    Tensor* _a5959 = new Tensor("cccc", idmap__a5959, size__a5959, vgrid__a5959, grid);
    _a5959->initialize();

    int* size__a5967 = new int[4];
    size__a5967[0] = Va;
    size__a5967[1] = Va;
    size__a5967[2] = Oa;
    size__a5967[3] = Oa;
    int* idmap__a5967 = new int[4];
    idmap__a5967[0] = 0;
    idmap__a5967[1] = 1;
    idmap__a5967[2] = 2;
    idmap__a5967[3] = 3;
    int* vgrid__a5967 = new int[4];
    vgrid__a5967[0] = atoi(argv[3]);
    vgrid__a5967[1] = atoi(argv[3]);
    vgrid__a5967[2] = atoi(argv[3]);
    vgrid__a5967[3] = atoi(argv[3]);
    Tensor* _a5967 = new Tensor("cccc", idmap__a5967, size__a5967, vgrid__a5967, grid);
    _a5967->initialize();

    int* size__a60943 = new int[4];
    size__a60943[0] = Va;
    size__a60943[1] = Oa;
    size__a60943[2] = Oa;
    size__a60943[3] = Oa;
    int* idmap__a60943 = new int[4];
    idmap__a60943[0] = 0;
    idmap__a60943[1] = 1;
    idmap__a60943[2] = 2;
    idmap__a60943[3] = 3;
    int* vgrid__a60943 = new int[4];
    vgrid__a60943[0] = atoi(argv[3]);
    vgrid__a60943[1] = atoi(argv[3]);
    vgrid__a60943[2] = atoi(argv[3]);
    vgrid__a60943[3] = atoi(argv[3]);
    Tensor* _a60943 = new Tensor("ccaa", idmap__a60943, size__a60943, vgrid__a60943, grid);
    _a60943->initialize();

    int* size__a6775 = new int[4];
    size__a6775[0] = Va;
    size__a6775[1] = Oa;
    size__a6775[2] = Oa;
    size__a6775[3] = Oa;
    int* idmap__a6775 = new int[4];
    idmap__a6775[0] = 0;
    idmap__a6775[1] = 1;
    idmap__a6775[2] = 2;
    idmap__a6775[3] = 3;
    int* vgrid__a6775 = new int[4];
    vgrid__a6775[0] = atoi(argv[3]);
    vgrid__a6775[1] = atoi(argv[3]);
    vgrid__a6775[2] = atoi(argv[3]);
    vgrid__a6775[3] = atoi(argv[3]);
    Tensor* _a6775 = new Tensor("cccc", idmap__a6775, size__a6775, vgrid__a6775, grid);
    _a6775->initialize();

    int* size__a6788 = new int[4];
    size__a6788[0] = Va;
    size__a6788[1] = Va;
    size__a6788[2] = Oa;
    size__a6788[3] = Oa;
    int* idmap__a6788 = new int[4];
    idmap__a6788[0] = 0;
    idmap__a6788[1] = 1;
    idmap__a6788[2] = 2;
    idmap__a6788[3] = 3;
    int* vgrid__a6788 = new int[4];
    vgrid__a6788[0] = atoi(argv[3]);
    vgrid__a6788[1] = atoi(argv[3]);
    vgrid__a6788[2] = atoi(argv[3]);
    vgrid__a6788[3] = atoi(argv[3]);
    Tensor* _a6788 = new Tensor("cccc", idmap__a6788, size__a6788, vgrid__a6788, grid);
    _a6788->initialize();

    int* size__a68053 = new int[4];
    size__a68053[0] = Va;
    size__a68053[1] = Oa;
    size__a68053[2] = Oa;
    size__a68053[3] = Oa;
    int* idmap__a68053 = new int[4];
    idmap__a68053[0] = 0;
    idmap__a68053[1] = 1;
    idmap__a68053[2] = 2;
    idmap__a68053[3] = 3;
    int* vgrid__a68053 = new int[4];
    vgrid__a68053[0] = atoi(argv[3]);
    vgrid__a68053[1] = atoi(argv[3]);
    vgrid__a68053[2] = atoi(argv[3]);
    vgrid__a68053[3] = atoi(argv[3]);
    Tensor* _a68053 = new Tensor("ccaa", idmap__a68053, size__a68053, vgrid__a68053, grid);
    _a68053->initialize();

    int* size__a7197 = new int[4];
    size__a7197[0] = Ob;
    size__a7197[1] = Vb;
    size__a7197[2] = Ob;
    size__a7197[3] = Ob;
    int* idmap__a7197 = new int[4];
    idmap__a7197[0] = 0;
    idmap__a7197[1] = 1;
    idmap__a7197[2] = 2;
    idmap__a7197[3] = 3;
    int* vgrid__a7197 = new int[4];
    vgrid__a7197[0] = atoi(argv[3]);
    vgrid__a7197[1] = atoi(argv[3]);
    vgrid__a7197[2] = atoi(argv[3]);
    vgrid__a7197[3] = atoi(argv[3]);
    Tensor* _a7197 = new Tensor("cccc", idmap__a7197, size__a7197, vgrid__a7197, grid);
    _a7197->initialize();

    int* size__a7206 = new int[4];
    size__a7206[0] = Vb;
    size__a7206[1] = Vb;
    size__a7206[2] = Ob;
    size__a7206[3] = Ob;
    int* idmap__a7206 = new int[4];
    idmap__a7206[0] = 0;
    idmap__a7206[1] = 1;
    idmap__a7206[2] = 2;
    idmap__a7206[3] = 3;
    int* vgrid__a7206 = new int[4];
    vgrid__a7206[0] = atoi(argv[3]);
    vgrid__a7206[1] = atoi(argv[3]);
    vgrid__a7206[2] = atoi(argv[3]);
    vgrid__a7206[3] = atoi(argv[3]);
    Tensor* _a7206 = new Tensor("cccc", idmap__a7206, size__a7206, vgrid__a7206, grid);
    _a7206->initialize();

    int* size__a7785 = new int[4];
    size__a7785[0] = Vb;
    size__a7785[1] = Ob;
    size__a7785[2] = Ob;
    size__a7785[3] = Ob;
    int* idmap__a7785 = new int[4];
    idmap__a7785[0] = 0;
    idmap__a7785[1] = 1;
    idmap__a7785[2] = 2;
    idmap__a7785[3] = 3;
    int* vgrid__a7785 = new int[4];
    vgrid__a7785[0] = atoi(argv[3]);
    vgrid__a7785[1] = atoi(argv[3]);
    vgrid__a7785[2] = atoi(argv[3]);
    vgrid__a7785[3] = atoi(argv[3]);
    Tensor* _a7785 = new Tensor("cccc", idmap__a7785, size__a7785, vgrid__a7785, grid);
    _a7785->initialize();

    int* size__a7798 = new int[4];
    size__a7798[0] = Vb;
    size__a7798[1] = Vb;
    size__a7798[2] = Ob;
    size__a7798[3] = Ob;
    int* idmap__a7798 = new int[4];
    idmap__a7798[0] = 0;
    idmap__a7798[1] = 1;
    idmap__a7798[2] = 2;
    idmap__a7798[3] = 3;
    int* vgrid__a7798 = new int[4];
    vgrid__a7798[0] = atoi(argv[3]);
    vgrid__a7798[1] = atoi(argv[3]);
    vgrid__a7798[2] = atoi(argv[3]);
    vgrid__a7798[3] = atoi(argv[3]);
    Tensor* _a7798 = new Tensor("cccc", idmap__a7798, size__a7798, vgrid__a7798, grid);
    _a7798->initialize();

    int* size__a8218 = new int[4];
    size__a8218[0] = Oa;
    size__a8218[1] = Va;
    size__a8218[2] = Oa;
    size__a8218[3] = Oa;
    int* idmap__a8218 = new int[4];
    idmap__a8218[0] = 0;
    idmap__a8218[1] = 1;
    idmap__a8218[2] = 2;
    idmap__a8218[3] = 3;
    int* vgrid__a8218 = new int[4];
    vgrid__a8218[0] = atoi(argv[3]);
    vgrid__a8218[1] = atoi(argv[3]);
    vgrid__a8218[2] = atoi(argv[3]);
    vgrid__a8218[3] = atoi(argv[3]);
    Tensor* _a8218 = new Tensor("cccc", idmap__a8218, size__a8218, vgrid__a8218, grid);
    _a8218->initialize();

    int* size__a8227 = new int[4];
    size__a8227[0] = Va;
    size__a8227[1] = Va;
    size__a8227[2] = Oa;
    size__a8227[3] = Oa;
    int* idmap__a8227 = new int[4];
    idmap__a8227[0] = 0;
    idmap__a8227[1] = 1;
    idmap__a8227[2] = 2;
    idmap__a8227[3] = 3;
    int* vgrid__a8227 = new int[4];
    vgrid__a8227[0] = atoi(argv[3]);
    vgrid__a8227[1] = atoi(argv[3]);
    vgrid__a8227[2] = atoi(argv[3]);
    vgrid__a8227[3] = atoi(argv[3]);
    Tensor* _a8227 = new Tensor("cccc", idmap__a8227, size__a8227, vgrid__a8227, grid);
    _a8227->initialize();

    int* size__a86275 = new int[4];
    size__a86275[0] = Va;
    size__a86275[1] = Oa;
    size__a86275[2] = Oa;
    size__a86275[3] = Oa;
    int* idmap__a86275 = new int[4];
    idmap__a86275[0] = 0;
    idmap__a86275[1] = 1;
    idmap__a86275[2] = 2;
    idmap__a86275[3] = 3;
    int* vgrid__a86275 = new int[4];
    vgrid__a86275[0] = atoi(argv[3]);
    vgrid__a86275[1] = atoi(argv[3]);
    vgrid__a86275[2] = atoi(argv[3]);
    vgrid__a86275[3] = atoi(argv[3]);
    Tensor* _a86275 = new Tensor("ccaa", idmap__a86275, size__a86275, vgrid__a86275, grid);
    _a86275->initialize();

    int* size__a86276 = new int[4];
    size__a86276[0] = Va;
    size__a86276[1] = Va;
    size__a86276[2] = Oa;
    size__a86276[3] = Oa;
    int* idmap__a86276 = new int[4];
    idmap__a86276[0] = 0;
    idmap__a86276[1] = 1;
    idmap__a86276[2] = 2;
    idmap__a86276[3] = 3;
    int* vgrid__a86276 = new int[4];
    vgrid__a86276[0] = atoi(argv[3]);
    vgrid__a86276[1] = atoi(argv[3]);
    vgrid__a86276[2] = atoi(argv[3]);
    vgrid__a86276[3] = atoi(argv[3]);
    Tensor* _a86276 = new Tensor("ccaa", idmap__a86276, size__a86276, vgrid__a86276, grid);
    _a86276->initialize();

    int* size__a8628 = new int[4];
    size__a8628[0] = Ob;
    size__a8628[1] = Vb;
    size__a8628[2] = Ob;
    size__a8628[3] = Ob;
    int* idmap__a8628 = new int[4];
    idmap__a8628[0] = 0;
    idmap__a8628[1] = 1;
    idmap__a8628[2] = 2;
    idmap__a8628[3] = 3;
    int* vgrid__a8628 = new int[4];
    vgrid__a8628[0] = atoi(argv[3]);
    vgrid__a8628[1] = atoi(argv[3]);
    vgrid__a8628[2] = atoi(argv[3]);
    vgrid__a8628[3] = atoi(argv[3]);
    Tensor* _a8628 = new Tensor("cccc", idmap__a8628, size__a8628, vgrid__a8628, grid);
    _a8628->initialize();

    int* size__a8637 = new int[4];
    size__a8637[0] = Vb;
    size__a8637[1] = Vb;
    size__a8637[2] = Ob;
    size__a8637[3] = Ob;
    int* idmap__a8637 = new int[4];
    idmap__a8637[0] = 0;
    idmap__a8637[1] = 1;
    idmap__a8637[2] = 2;
    idmap__a8637[3] = 3;
    int* vgrid__a8637 = new int[4];
    vgrid__a8637[0] = atoi(argv[3]);
    vgrid__a8637[1] = atoi(argv[3]);
    vgrid__a8637[2] = atoi(argv[3]);
    vgrid__a8637[3] = atoi(argv[3]);
    Tensor* _a8637 = new Tensor("cccc", idmap__a8637, size__a8637, vgrid__a8637, grid);
    _a8637->initialize();

    int* size__a9160 = new int[4];
    size__a9160[0] = Oa;
    size__a9160[1] = Ob;
    size__a9160[2] = Oa;
    size__a9160[3] = Ob;
    int* idmap__a9160 = new int[4];
    idmap__a9160[0] = 0;
    idmap__a9160[1] = 1;
    idmap__a9160[2] = 2;
    idmap__a9160[3] = 3;
    int* vgrid__a9160 = new int[4];
    vgrid__a9160[0] = atoi(argv[3]);
    vgrid__a9160[1] = atoi(argv[3]);
    vgrid__a9160[2] = atoi(argv[3]);
    vgrid__a9160[3] = atoi(argv[3]);
    Tensor* _a9160 = new Tensor("cccc", idmap__a9160, size__a9160, vgrid__a9160, grid);
    _a9160->initialize();

    int* size__a93335 = new int[4];
    size__a93335[0] = Oa;
    size__a93335[1] = Va;
    size__a93335[2] = Oa;
    size__a93335[3] = Oa;
    int* idmap__a93335 = new int[4];
    idmap__a93335[0] = 0;
    idmap__a93335[1] = 1;
    idmap__a93335[2] = 2;
    idmap__a93335[3] = 3;
    int* vgrid__a93335 = new int[4];
    vgrid__a93335[0] = atoi(argv[3]);
    vgrid__a93335[1] = atoi(argv[3]);
    vgrid__a93335[2] = atoi(argv[3]);
    vgrid__a93335[3] = atoi(argv[3]);
    Tensor* _a93335 = new Tensor("ccaa", idmap__a93335, size__a93335, vgrid__a93335, grid);
    _a93335->initialize();

    int* size__a93336 = new int[4];
    size__a93336[0] = Va;
    size__a93336[1] = Va;
    size__a93336[2] = Oa;
    size__a93336[3] = Oa;
    int* idmap__a93336 = new int[4];
    idmap__a93336[0] = 0;
    idmap__a93336[1] = 1;
    idmap__a93336[2] = 2;
    idmap__a93336[3] = 3;
    int* vgrid__a93336 = new int[4];
    vgrid__a93336[0] = atoi(argv[3]);
    vgrid__a93336[1] = atoi(argv[3]);
    vgrid__a93336[2] = atoi(argv[3]);
    vgrid__a93336[3] = atoi(argv[3]);
    Tensor* _a93336 = new Tensor("ccaa", idmap__a93336, size__a93336, vgrid__a93336, grid);
    _a93336->initialize();

    int* size__a9395 = new int[2];
    size__a9395[0] = Va;
    size__a9395[1] = Va;
    int* idmap__a9395 = new int[2];
    idmap__a9395[0] = 0;
    idmap__a9395[1] = 1;
    int* vgrid__a9395 = new int[2];
    vgrid__a9395[0] = atoi(argv[3]);
    vgrid__a9395[1] = atoi(argv[3]);
    Tensor* _a9395 = new Tensor("cc", idmap__a9395, size__a9395, vgrid__a9395, grid);
    _a9395->initialize();

    int* size__a9455 = new int[2];
    size__a9455[0] = Va;
    size__a9455[1] = Va;
    int* idmap__a9455 = new int[2];
    idmap__a9455[0] = 0;
    idmap__a9455[1] = 1;
    int* vgrid__a9455 = new int[2];
    vgrid__a9455[0] = atoi(argv[3]);
    vgrid__a9455[1] = atoi(argv[3]);
    Tensor* _a9455 = new Tensor("cc", idmap__a9455, size__a9455, vgrid__a9455, grid);
    _a9455->initialize();

    int* size__a9515 = new int[2];
    size__a9515[0] = Vb;
    size__a9515[1] = Vb;
    int* idmap__a9515 = new int[2];
    idmap__a9515[0] = 0;
    idmap__a9515[1] = 1;
    int* vgrid__a9515 = new int[2];
    vgrid__a9515[0] = atoi(argv[3]);
    vgrid__a9515[1] = atoi(argv[3]);
    Tensor* _a9515 = new Tensor("cc", idmap__a9515, size__a9515, vgrid__a9515, grid);
    _a9515->initialize();

    int* size__a9575 = new int[2];
    size__a9575[0] = Vb;
    size__a9575[1] = Vb;
    int* idmap__a9575 = new int[2];
    idmap__a9575[0] = 0;
    idmap__a9575[1] = 1;
    int* vgrid__a9575 = new int[2];
    vgrid__a9575[0] = atoi(argv[3]);
    vgrid__a9575[1] = atoi(argv[3]);
    Tensor* _a9575 = new Tensor("cc", idmap__a9575, size__a9575, vgrid__a9575, grid);
    _a9575->initialize();

    int* size__a9818 = new int[4];
    size__a9818[0] = Va;
    size__a9818[1] = Va;
    size__a9818[2] = Oa;
    size__a9818[3] = Oa;
    int* idmap__a9818 = new int[4];
    idmap__a9818[0] = 0;
    idmap__a9818[1] = 1;
    idmap__a9818[2] = 2;
    idmap__a9818[3] = 3;
    int* vgrid__a9818 = new int[4];
    vgrid__a9818[0] = atoi(argv[3]);
    vgrid__a9818[1] = atoi(argv[3]);
    vgrid__a9818[2] = atoi(argv[3]);
    vgrid__a9818[3] = atoi(argv[3]);
    Tensor* _a9818 = new Tensor("ccaa", idmap__a9818, size__a9818, vgrid__a9818, grid);
    _a9818->initialize();

    int* size__a9861 = new int[4];
    size__a9861[0] = Oa;
    size__a9861[1] = Va;
    size__a9861[2] = Oa;
    size__a9861[3] = Oa;
    int* idmap__a9861 = new int[4];
    idmap__a9861[0] = 0;
    idmap__a9861[1] = 1;
    idmap__a9861[2] = 2;
    idmap__a9861[3] = 3;
    int* vgrid__a9861 = new int[4];
    vgrid__a9861[0] = atoi(argv[3]);
    vgrid__a9861[1] = atoi(argv[3]);
    vgrid__a9861[2] = atoi(argv[3]);
    vgrid__a9861[3] = atoi(argv[3]);
    Tensor* _a9861 = new Tensor("cccc", idmap__a9861, size__a9861, vgrid__a9861, grid);
    _a9861->initialize();

    int* size__a9864 = new int[4];
    size__a9864[0] = Va;
    size__a9864[1] = Va;
    size__a9864[2] = Oa;
    size__a9864[3] = Oa;
    int* idmap__a9864 = new int[4];
    idmap__a9864[0] = 0;
    idmap__a9864[1] = 1;
    idmap__a9864[2] = 2;
    idmap__a9864[3] = 3;
    int* vgrid__a9864 = new int[4];
    vgrid__a9864[0] = atoi(argv[3]);
    vgrid__a9864[1] = atoi(argv[3]);
    vgrid__a9864[2] = atoi(argv[3]);
    vgrid__a9864[3] = atoi(argv[3]);
    Tensor* _a9864 = new Tensor("cccc", idmap__a9864, size__a9864, vgrid__a9864, grid);
    _a9864->initialize();

    int* size__a9891 = new int[4];
    size__a9891[0] = Oa;
    size__a9891[1] = Va;
    size__a9891[2] = Oa;
    size__a9891[3] = Oa;
    int* idmap__a9891 = new int[4];
    idmap__a9891[0] = 0;
    idmap__a9891[1] = 1;
    idmap__a9891[2] = 2;
    idmap__a9891[3] = 3;
    int* vgrid__a9891 = new int[4];
    vgrid__a9891[0] = atoi(argv[3]);
    vgrid__a9891[1] = atoi(argv[3]);
    vgrid__a9891[2] = atoi(argv[3]);
    vgrid__a9891[3] = atoi(argv[3]);
    Tensor* _a9891 = new Tensor("cccc", idmap__a9891, size__a9891, vgrid__a9891, grid);
    _a9891->initialize();

    int* size__a9894 = new int[4];
    size__a9894[0] = Va;
    size__a9894[1] = Va;
    size__a9894[2] = Oa;
    size__a9894[3] = Oa;
    int* idmap__a9894 = new int[4];
    idmap__a9894[0] = 0;
    idmap__a9894[1] = 1;
    idmap__a9894[2] = 2;
    idmap__a9894[3] = 3;
    int* vgrid__a9894 = new int[4];
    vgrid__a9894[0] = atoi(argv[3]);
    vgrid__a9894[1] = atoi(argv[3]);
    vgrid__a9894[2] = atoi(argv[3]);
    vgrid__a9894[3] = atoi(argv[3]);
    Tensor* _a9894 = new Tensor("cccc", idmap__a9894, size__a9894, vgrid__a9894, grid);
    _a9894->initialize();

    int* size_fa_oo = new int[2];
    size_fa_oo[0] = Oa;
    size_fa_oo[1] = Oa;
    int* idmap_fa_oo = new int[2];
    idmap_fa_oo[0] = 0;
    idmap_fa_oo[1] = 1;
    int* vgrid_fa_oo = new int[2];
    vgrid_fa_oo[0] = atoi(argv[3]);
    vgrid_fa_oo[1] = atoi(argv[3]);
    Tensor* fa_oo = new Tensor("cc", idmap_fa_oo, size_fa_oo, vgrid_fa_oo, grid);
    fa_oo->initialize();

    int* size_fa_ov = new int[2];
    size_fa_ov[0] = Oa;
    size_fa_ov[1] = Va;
    int* idmap_fa_ov = new int[2];
    idmap_fa_ov[0] = 0;
    idmap_fa_ov[1] = 1;
    int* vgrid_fa_ov = new int[2];
    vgrid_fa_ov[0] = atoi(argv[3]);
    vgrid_fa_ov[1] = atoi(argv[3]);
    Tensor* fa_ov = new Tensor("cc", idmap_fa_ov, size_fa_ov, vgrid_fa_ov, grid);
    fa_ov->initialize();

    int* size_fa_vo = new int[2];
    size_fa_vo[0] = Va;
    size_fa_vo[1] = Oa;
    int* idmap_fa_vo = new int[2];
    idmap_fa_vo[0] = 0;
    idmap_fa_vo[1] = 1;
    int* vgrid_fa_vo = new int[2];
    vgrid_fa_vo[0] = atoi(argv[3]);
    vgrid_fa_vo[1] = atoi(argv[3]);
    Tensor* fa_vo = new Tensor("cc", idmap_fa_vo, size_fa_vo, vgrid_fa_vo, grid);
    fa_vo->initialize();

    int* size_fa_vv = new int[2];
    size_fa_vv[0] = Va;
    size_fa_vv[1] = Va;
    int* idmap_fa_vv = new int[2];
    idmap_fa_vv[0] = 0;
    idmap_fa_vv[1] = 1;
    int* vgrid_fa_vv = new int[2];
    vgrid_fa_vv[0] = atoi(argv[3]);
    vgrid_fa_vv[1] = atoi(argv[3]);
    Tensor* fa_vv = new Tensor("cc", idmap_fa_vv, size_fa_vv, vgrid_fa_vv, grid);
    fa_vv->initialize();

    int* size_fb_oo = new int[2];
    size_fb_oo[0] = Ob;
    size_fb_oo[1] = Ob;
    int* idmap_fb_oo = new int[2];
    idmap_fb_oo[0] = 0;
    idmap_fb_oo[1] = 1;
    int* vgrid_fb_oo = new int[2];
    vgrid_fb_oo[0] = atoi(argv[3]);
    vgrid_fb_oo[1] = atoi(argv[3]);
    Tensor* fb_oo = new Tensor("cc", idmap_fb_oo, size_fb_oo, vgrid_fb_oo, grid);
    fb_oo->initialize();

    int* size_fb_ov = new int[2];
    size_fb_ov[0] = Ob;
    size_fb_ov[1] = Vb;
    int* idmap_fb_ov = new int[2];
    idmap_fb_ov[0] = 0;
    idmap_fb_ov[1] = 1;
    int* vgrid_fb_ov = new int[2];
    vgrid_fb_ov[0] = atoi(argv[3]);
    vgrid_fb_ov[1] = atoi(argv[3]);
    Tensor* fb_ov = new Tensor("cc", idmap_fb_ov, size_fb_ov, vgrid_fb_ov, grid);
    fb_ov->initialize();

    int* size_fb_vo = new int[2];
    size_fb_vo[0] = Vb;
    size_fb_vo[1] = Ob;
    int* idmap_fb_vo = new int[2];
    idmap_fb_vo[0] = 0;
    idmap_fb_vo[1] = 1;
    int* vgrid_fb_vo = new int[2];
    vgrid_fb_vo[0] = atoi(argv[3]);
    vgrid_fb_vo[1] = atoi(argv[3]);
    Tensor* fb_vo = new Tensor("cc", idmap_fb_vo, size_fb_vo, vgrid_fb_vo, grid);
    fb_vo->initialize();

    int* size_fb_vv = new int[2];
    size_fb_vv[0] = Vb;
    size_fb_vv[1] = Vb;
    int* idmap_fb_vv = new int[2];
    idmap_fb_vv[0] = 0;
    idmap_fb_vv[1] = 1;
    int* vgrid_fb_vv = new int[2];
    vgrid_fb_vv[0] = atoi(argv[3]);
    vgrid_fb_vv[1] = atoi(argv[3]);
    Tensor* fb_vv = new Tensor("cc", idmap_fb_vv, size_fb_vv, vgrid_fb_vv, grid);
    fb_vv->initialize();

    int* size_ra_vo = new int[2];
    size_ra_vo[0] = Va;
    size_ra_vo[1] = Oa;
    int* idmap_ra_vo = new int[2];
    idmap_ra_vo[0] = 0;
    idmap_ra_vo[1] = 1;
    int* vgrid_ra_vo = new int[2];
    vgrid_ra_vo[0] = atoi(argv[3]);
    vgrid_ra_vo[1] = atoi(argv[3]);
    Tensor* ra_vo = new Tensor("cc", idmap_ra_vo, size_ra_vo, vgrid_ra_vo, grid);
    ra_vo->initialize();

    int* size_raa_vvoo = new int[4];
    size_raa_vvoo[0] = Va;
    size_raa_vvoo[1] = Va;
    size_raa_vvoo[2] = Oa;
    size_raa_vvoo[3] = Oa;
    int* idmap_raa_vvoo = new int[4];
    idmap_raa_vvoo[0] = 0;
    idmap_raa_vvoo[1] = 1;
    idmap_raa_vvoo[2] = 2;
    idmap_raa_vvoo[3] = 3;
    int* vgrid_raa_vvoo = new int[4];
    vgrid_raa_vvoo[0] = atoi(argv[3]);
    vgrid_raa_vvoo[1] = atoi(argv[3]);
    vgrid_raa_vvoo[2] = atoi(argv[3]);
    vgrid_raa_vvoo[3] = atoi(argv[3]);
    Tensor* raa_vvoo = new Tensor("cccc", idmap_raa_vvoo, size_raa_vvoo, vgrid_raa_vvoo, grid);
    raa_vvoo->initialize();

    int* size_rab_vvoo = new int[4];
    size_rab_vvoo[0] = Va;
    size_rab_vvoo[1] = Vb;
    size_rab_vvoo[2] = Oa;
    size_rab_vvoo[3] = Ob;
    int* idmap_rab_vvoo = new int[4];
    idmap_rab_vvoo[0] = 0;
    idmap_rab_vvoo[1] = 1;
    idmap_rab_vvoo[2] = 2;
    idmap_rab_vvoo[3] = 3;
    int* vgrid_rab_vvoo = new int[4];
    vgrid_rab_vvoo[0] = atoi(argv[3]);
    vgrid_rab_vvoo[1] = atoi(argv[3]);
    vgrid_rab_vvoo[2] = atoi(argv[3]);
    vgrid_rab_vvoo[3] = atoi(argv[3]);
    Tensor* rab_vvoo = new Tensor("cccc", idmap_rab_vvoo, size_rab_vvoo, vgrid_rab_vvoo, grid);
    rab_vvoo->initialize();

    int* size_rb_vo = new int[2];
    size_rb_vo[0] = Vb;
    size_rb_vo[1] = Ob;
    int* idmap_rb_vo = new int[2];
    idmap_rb_vo[0] = 0;
    idmap_rb_vo[1] = 1;
    int* vgrid_rb_vo = new int[2];
    vgrid_rb_vo[0] = atoi(argv[3]);
    vgrid_rb_vo[1] = atoi(argv[3]);
    Tensor* rb_vo = new Tensor("cc", idmap_rb_vo, size_rb_vo, vgrid_rb_vo, grid);
    rb_vo->initialize();

    int* size_rbb_vvoo = new int[4];
    size_rbb_vvoo[0] = Vb;
    size_rbb_vvoo[1] = Vb;
    size_rbb_vvoo[2] = Ob;
    size_rbb_vvoo[3] = Ob;
    int* idmap_rbb_vvoo = new int[4];
    idmap_rbb_vvoo[0] = 0;
    idmap_rbb_vvoo[1] = 1;
    idmap_rbb_vvoo[2] = 2;
    idmap_rbb_vvoo[3] = 3;
    int* vgrid_rbb_vvoo = new int[4];
    vgrid_rbb_vvoo[0] = atoi(argv[3]);
    vgrid_rbb_vvoo[1] = atoi(argv[3]);
    vgrid_rbb_vvoo[2] = atoi(argv[3]);
    vgrid_rbb_vvoo[3] = atoi(argv[3]);
    Tensor* rbb_vvoo = new Tensor("cccc", idmap_rbb_vvoo, size_rbb_vvoo, vgrid_rbb_vvoo, grid);
    rbb_vvoo->initialize();

    int* size_ta_vo = new int[2];
    size_ta_vo[0] = Va;
    size_ta_vo[1] = Oa;
    int* idmap_ta_vo = new int[2];
    idmap_ta_vo[0] = 0;
    idmap_ta_vo[1] = 1;
    int* vgrid_ta_vo = new int[2];
    vgrid_ta_vo[0] = atoi(argv[3]);
    vgrid_ta_vo[1] = atoi(argv[3]);
    Tensor* ta_vo = new Tensor("cc", idmap_ta_vo, size_ta_vo, vgrid_ta_vo, grid);
    ta_vo->initialize();

    int* size_taa_vvoo = new int[4];
    size_taa_vvoo[0] = Va;
    size_taa_vvoo[1] = Va;
    size_taa_vvoo[2] = Oa;
    size_taa_vvoo[3] = Oa;
    int* idmap_taa_vvoo = new int[4];
    idmap_taa_vvoo[0] = 0;
    idmap_taa_vvoo[1] = 1;
    idmap_taa_vvoo[2] = 2;
    idmap_taa_vvoo[3] = 3;
    int* vgrid_taa_vvoo = new int[4];
    vgrid_taa_vvoo[0] = atoi(argv[3]);
    vgrid_taa_vvoo[1] = atoi(argv[3]);
    vgrid_taa_vvoo[2] = atoi(argv[3]);
    vgrid_taa_vvoo[3] = atoi(argv[3]);
    Tensor* taa_vvoo = new Tensor("aabb", idmap_taa_vvoo, size_taa_vvoo, vgrid_taa_vvoo, grid);
    taa_vvoo->initialize();

    int* size_tab_vvoo = new int[4];
    size_tab_vvoo[0] = Va;
    size_tab_vvoo[1] = Vb;
    size_tab_vvoo[2] = Oa;
    size_tab_vvoo[3] = Ob;
    int* idmap_tab_vvoo = new int[4];
    idmap_tab_vvoo[0] = 0;
    idmap_tab_vvoo[1] = 1;
    idmap_tab_vvoo[2] = 2;
    idmap_tab_vvoo[3] = 3;
    int* vgrid_tab_vvoo = new int[4];
    vgrid_tab_vvoo[0] = atoi(argv[3]);
    vgrid_tab_vvoo[1] = atoi(argv[3]);
    vgrid_tab_vvoo[2] = atoi(argv[3]);
    vgrid_tab_vvoo[3] = atoi(argv[3]);
    Tensor* tab_vvoo = new Tensor("cccc", idmap_tab_vvoo, size_tab_vvoo, vgrid_tab_vvoo, grid);
    tab_vvoo->initialize();

    int* size_tb_vo = new int[2];
    size_tb_vo[0] = Vb;
    size_tb_vo[1] = Ob;
    int* idmap_tb_vo = new int[2];
    idmap_tb_vo[0] = 0;
    idmap_tb_vo[1] = 1;
    int* vgrid_tb_vo = new int[2];
    vgrid_tb_vo[0] = atoi(argv[3]);
    vgrid_tb_vo[1] = atoi(argv[3]);
    Tensor* tb_vo = new Tensor("cc", idmap_tb_vo, size_tb_vo, vgrid_tb_vo, grid);
    tb_vo->initialize();

    int* size_tbb_vvoo = new int[4];
    size_tbb_vvoo[0] = Vb;
    size_tbb_vvoo[1] = Vb;
    size_tbb_vvoo[2] = Ob;
    size_tbb_vvoo[3] = Ob;
    int* idmap_tbb_vvoo = new int[4];
    idmap_tbb_vvoo[0] = 0;
    idmap_tbb_vvoo[1] = 1;
    idmap_tbb_vvoo[2] = 2;
    idmap_tbb_vvoo[3] = 3;
    int* vgrid_tbb_vvoo = new int[4];
    vgrid_tbb_vvoo[0] = atoi(argv[3]);
    vgrid_tbb_vvoo[1] = atoi(argv[3]);
    vgrid_tbb_vvoo[2] = atoi(argv[3]);
    vgrid_tbb_vvoo[3] = atoi(argv[3]);
    Tensor* tbb_vvoo = new Tensor("aabb", idmap_tbb_vvoo, size_tbb_vvoo, vgrid_tbb_vvoo, grid);
    tbb_vvoo->initialize();

    int* size_vaa_oooo = new int[4];
    size_vaa_oooo[0] = Oa;
    size_vaa_oooo[1] = Oa;
    size_vaa_oooo[2] = Oa;
    size_vaa_oooo[3] = Oa;
    int* idmap_vaa_oooo = new int[4];
    idmap_vaa_oooo[0] = 0;
    idmap_vaa_oooo[1] = 1;
    idmap_vaa_oooo[2] = 2;
    idmap_vaa_oooo[3] = 3;
    int* vgrid_vaa_oooo = new int[4];
    vgrid_vaa_oooo[0] = atoi(argv[3]);
    vgrid_vaa_oooo[1] = atoi(argv[3]);
    vgrid_vaa_oooo[2] = atoi(argv[3]);
    vgrid_vaa_oooo[3] = atoi(argv[3]);
    Tensor* vaa_oooo = new Tensor("aabb", idmap_vaa_oooo, size_vaa_oooo, vgrid_vaa_oooo, grid);
    vaa_oooo->initialize();

    int* size_vaa_oovo = new int[4];
    size_vaa_oovo[0] = Oa;
    size_vaa_oovo[1] = Oa;
    size_vaa_oovo[2] = Va;
    size_vaa_oovo[3] = Oa;
    int* idmap_vaa_oovo = new int[4];
    idmap_vaa_oovo[0] = 0;
    idmap_vaa_oovo[1] = 1;
    idmap_vaa_oovo[2] = 2;
    idmap_vaa_oovo[3] = 3;
    int* vgrid_vaa_oovo = new int[4];
    vgrid_vaa_oovo[0] = atoi(argv[3]);
    vgrid_vaa_oovo[1] = atoi(argv[3]);
    vgrid_vaa_oovo[2] = atoi(argv[3]);
    vgrid_vaa_oovo[3] = atoi(argv[3]);
    Tensor* vaa_oovo = new Tensor("aacc", idmap_vaa_oovo, size_vaa_oovo, vgrid_vaa_oovo, grid);
    vaa_oovo->initialize();

    int* size_vaa_oovv = new int[4];
    size_vaa_oovv[0] = Oa;
    size_vaa_oovv[1] = Oa;
    size_vaa_oovv[2] = Va;
    size_vaa_oovv[3] = Va;
    int* idmap_vaa_oovv = new int[4];
    idmap_vaa_oovv[0] = 0;
    idmap_vaa_oovv[1] = 1;
    idmap_vaa_oovv[2] = 2;
    idmap_vaa_oovv[3] = 3;
    int* vgrid_vaa_oovv = new int[4];
    vgrid_vaa_oovv[0] = atoi(argv[3]);
    vgrid_vaa_oovv[1] = atoi(argv[3]);
    vgrid_vaa_oovv[2] = atoi(argv[3]);
    vgrid_vaa_oovv[3] = atoi(argv[3]);
    Tensor* vaa_oovv = new Tensor("aabb", idmap_vaa_oovv, size_vaa_oovv, vgrid_vaa_oovv, grid);
    vaa_oovv->initialize();

    int* size_vaa_vooo = new int[4];
    size_vaa_vooo[0] = Va;
    size_vaa_vooo[1] = Oa;
    size_vaa_vooo[2] = Oa;
    size_vaa_vooo[3] = Oa;
    int* idmap_vaa_vooo = new int[4];
    idmap_vaa_vooo[0] = 0;
    idmap_vaa_vooo[1] = 1;
    idmap_vaa_vooo[2] = 2;
    idmap_vaa_vooo[3] = 3;
    int* vgrid_vaa_vooo = new int[4];
    vgrid_vaa_vooo[0] = atoi(argv[3]);
    vgrid_vaa_vooo[1] = atoi(argv[3]);
    vgrid_vaa_vooo[2] = atoi(argv[3]);
    vgrid_vaa_vooo[3] = atoi(argv[3]);
    Tensor* vaa_vooo = new Tensor("ccaa", idmap_vaa_vooo, size_vaa_vooo, vgrid_vaa_vooo, grid);
    vaa_vooo->initialize();

    int* size_vaa_vovo = new int[4];
    size_vaa_vovo[0] = Va;
    size_vaa_vovo[1] = Oa;
    size_vaa_vovo[2] = Va;
    size_vaa_vovo[3] = Oa;
    int* idmap_vaa_vovo = new int[4];
    idmap_vaa_vovo[0] = 0;
    idmap_vaa_vovo[1] = 1;
    idmap_vaa_vovo[2] = 2;
    idmap_vaa_vovo[3] = 3;
    int* vgrid_vaa_vovo = new int[4];
    vgrid_vaa_vovo[0] = atoi(argv[3]);
    vgrid_vaa_vovo[1] = atoi(argv[3]);
    vgrid_vaa_vovo[2] = atoi(argv[3]);
    vgrid_vaa_vovo[3] = atoi(argv[3]);
    Tensor* vaa_vovo = new Tensor("cccc", idmap_vaa_vovo, size_vaa_vovo, vgrid_vaa_vovo, grid);
    vaa_vovo->initialize();

    int* size_vaa_vovv = new int[4];
    size_vaa_vovv[0] = Va;
    size_vaa_vovv[1] = Oa;
    size_vaa_vovv[2] = Va;
    size_vaa_vovv[3] = Va;
    int* idmap_vaa_vovv = new int[4];
    idmap_vaa_vovv[0] = 0;
    idmap_vaa_vovv[1] = 1;
    idmap_vaa_vovv[2] = 2;
    idmap_vaa_vovv[3] = 3;
    int* vgrid_vaa_vovv = new int[4];
    vgrid_vaa_vovv[0] = atoi(argv[3]);
    vgrid_vaa_vovv[1] = atoi(argv[3]);
    vgrid_vaa_vovv[2] = atoi(argv[3]);
    vgrid_vaa_vovv[3] = atoi(argv[3]);
    Tensor* vaa_vovv = new Tensor("ccaa", idmap_vaa_vovv, size_vaa_vovv, vgrid_vaa_vovv, grid);
    vaa_vovv->initialize();

    int* size_vaa_vvoo = new int[4];
    size_vaa_vvoo[0] = Va;
    size_vaa_vvoo[1] = Va;
    size_vaa_vvoo[2] = Oa;
    size_vaa_vvoo[3] = Oa;
    int* idmap_vaa_vvoo = new int[4];
    idmap_vaa_vvoo[0] = 0;
    idmap_vaa_vvoo[1] = 1;
    idmap_vaa_vvoo[2] = 2;
    idmap_vaa_vvoo[3] = 3;
    int* vgrid_vaa_vvoo = new int[4];
    vgrid_vaa_vvoo[0] = atoi(argv[3]);
    vgrid_vaa_vvoo[1] = atoi(argv[3]);
    vgrid_vaa_vvoo[2] = atoi(argv[3]);
    vgrid_vaa_vvoo[3] = atoi(argv[3]);
    Tensor* vaa_vvoo = new Tensor("aabb", idmap_vaa_vvoo, size_vaa_vvoo, vgrid_vaa_vvoo, grid);
    vaa_vvoo->initialize();

    int* size_vaa_vvvo = new int[4];
    size_vaa_vvvo[0] = Va;
    size_vaa_vvvo[1] = Va;
    size_vaa_vvvo[2] = Va;
    size_vaa_vvvo[3] = Oa;
    int* idmap_vaa_vvvo = new int[4];
    idmap_vaa_vvvo[0] = 0;
    idmap_vaa_vvvo[1] = 1;
    idmap_vaa_vvvo[2] = 2;
    idmap_vaa_vvvo[3] = 3;
    int* vgrid_vaa_vvvo = new int[4];
    vgrid_vaa_vvvo[0] = atoi(argv[3]);
    vgrid_vaa_vvvo[1] = atoi(argv[3]);
    vgrid_vaa_vvvo[2] = atoi(argv[3]);
    vgrid_vaa_vvvo[3] = atoi(argv[3]);
    Tensor* vaa_vvvo = new Tensor("aacc", idmap_vaa_vvvo, size_vaa_vvvo, vgrid_vaa_vvvo, grid);
    vaa_vvvo->initialize();

    int* size_vaa_vvvv = new int[4];
    size_vaa_vvvv[0] = Va;
    size_vaa_vvvv[1] = Va;
    size_vaa_vvvv[2] = Va;
    size_vaa_vvvv[3] = Va;
    int* idmap_vaa_vvvv = new int[4];
    idmap_vaa_vvvv[0] = 0;
    idmap_vaa_vvvv[1] = 1;
    idmap_vaa_vvvv[2] = 2;
    idmap_vaa_vvvv[3] = 3;
    int* vgrid_vaa_vvvv = new int[4];
    vgrid_vaa_vvvv[0] = atoi(argv[3]);
    vgrid_vaa_vvvv[1] = atoi(argv[3]);
    vgrid_vaa_vvvv[2] = atoi(argv[3]);
    vgrid_vaa_vvvv[3] = atoi(argv[3]);
    Tensor* vaa_vvvv = new Tensor("aabb", idmap_vaa_vvvv, size_vaa_vvvv, vgrid_vaa_vvvv, grid);
    vaa_vvvv->initialize();

    int* size_vab_oooo = new int[4];
    size_vab_oooo[0] = Oa;
    size_vab_oooo[1] = Ob;
    size_vab_oooo[2] = Oa;
    size_vab_oooo[3] = Ob;
    int* idmap_vab_oooo = new int[4];
    idmap_vab_oooo[0] = 0;
    idmap_vab_oooo[1] = 1;
    idmap_vab_oooo[2] = 2;
    idmap_vab_oooo[3] = 3;
    int* vgrid_vab_oooo = new int[4];
    vgrid_vab_oooo[0] = atoi(argv[3]);
    vgrid_vab_oooo[1] = atoi(argv[3]);
    vgrid_vab_oooo[2] = atoi(argv[3]);
    vgrid_vab_oooo[3] = atoi(argv[3]);
    Tensor* vab_oooo = new Tensor("cccc", idmap_vab_oooo, size_vab_oooo, vgrid_vab_oooo, grid);
    vab_oooo->initialize();

    int* size_vab_ooov = new int[4];
    size_vab_ooov[0] = Oa;
    size_vab_ooov[1] = Ob;
    size_vab_ooov[2] = Oa;
    size_vab_ooov[3] = Vb;
    int* idmap_vab_ooov = new int[4];
    idmap_vab_ooov[0] = 0;
    idmap_vab_ooov[1] = 1;
    idmap_vab_ooov[2] = 2;
    idmap_vab_ooov[3] = 3;
    int* vgrid_vab_ooov = new int[4];
    vgrid_vab_ooov[0] = atoi(argv[3]);
    vgrid_vab_ooov[1] = atoi(argv[3]);
    vgrid_vab_ooov[2] = atoi(argv[3]);
    vgrid_vab_ooov[3] = atoi(argv[3]);
    Tensor* vab_ooov = new Tensor("cccc", idmap_vab_ooov, size_vab_ooov, vgrid_vab_ooov, grid);
    vab_ooov->initialize();

    int* size_vab_oovo = new int[4];
    size_vab_oovo[0] = Oa;
    size_vab_oovo[1] = Ob;
    size_vab_oovo[2] = Va;
    size_vab_oovo[3] = Ob;
    int* idmap_vab_oovo = new int[4];
    idmap_vab_oovo[0] = 0;
    idmap_vab_oovo[1] = 1;
    idmap_vab_oovo[2] = 2;
    idmap_vab_oovo[3] = 3;
    int* vgrid_vab_oovo = new int[4];
    vgrid_vab_oovo[0] = atoi(argv[3]);
    vgrid_vab_oovo[1] = atoi(argv[3]);
    vgrid_vab_oovo[2] = atoi(argv[3]);
    vgrid_vab_oovo[3] = atoi(argv[3]);
    Tensor* vab_oovo = new Tensor("cccc", idmap_vab_oovo, size_vab_oovo, vgrid_vab_oovo, grid);
    vab_oovo->initialize();

    int* size_vab_oovv = new int[4];
    size_vab_oovv[0] = Oa;
    size_vab_oovv[1] = Ob;
    size_vab_oovv[2] = Va;
    size_vab_oovv[3] = Vb;
    int* idmap_vab_oovv = new int[4];
    idmap_vab_oovv[0] = 0;
    idmap_vab_oovv[1] = 1;
    idmap_vab_oovv[2] = 2;
    idmap_vab_oovv[3] = 3;
    int* vgrid_vab_oovv = new int[4];
    vgrid_vab_oovv[0] = atoi(argv[3]);
    vgrid_vab_oovv[1] = atoi(argv[3]);
    vgrid_vab_oovv[2] = atoi(argv[3]);
    vgrid_vab_oovv[3] = atoi(argv[3]);
    Tensor* vab_oovv = new Tensor("cccc", idmap_vab_oovv, size_vab_oovv, vgrid_vab_oovv, grid);
    vab_oovv->initialize();

    int* size_vab_ovoo = new int[4];
    size_vab_ovoo[0] = Oa;
    size_vab_ovoo[1] = Vb;
    size_vab_ovoo[2] = Oa;
    size_vab_ovoo[3] = Ob;
    int* idmap_vab_ovoo = new int[4];
    idmap_vab_ovoo[0] = 0;
    idmap_vab_ovoo[1] = 1;
    idmap_vab_ovoo[2] = 2;
    idmap_vab_ovoo[3] = 3;
    int* vgrid_vab_ovoo = new int[4];
    vgrid_vab_ovoo[0] = atoi(argv[3]);
    vgrid_vab_ovoo[1] = atoi(argv[3]);
    vgrid_vab_ovoo[2] = atoi(argv[3]);
    vgrid_vab_ovoo[3] = atoi(argv[3]);
    Tensor* vab_ovoo = new Tensor("cccc", idmap_vab_ovoo, size_vab_ovoo, vgrid_vab_ovoo, grid);
    vab_ovoo->initialize();

    int* size_vab_ovov = new int[4];
    size_vab_ovov[0] = Oa;
    size_vab_ovov[1] = Vb;
    size_vab_ovov[2] = Oa;
    size_vab_ovov[3] = Vb;
    int* idmap_vab_ovov = new int[4];
    idmap_vab_ovov[0] = 0;
    idmap_vab_ovov[1] = 1;
    idmap_vab_ovov[2] = 2;
    idmap_vab_ovov[3] = 3;
    int* vgrid_vab_ovov = new int[4];
    vgrid_vab_ovov[0] = atoi(argv[3]);
    vgrid_vab_ovov[1] = atoi(argv[3]);
    vgrid_vab_ovov[2] = atoi(argv[3]);
    vgrid_vab_ovov[3] = atoi(argv[3]);
    Tensor* vab_ovov = new Tensor("cccc", idmap_vab_ovov, size_vab_ovov, vgrid_vab_ovov, grid);
    vab_ovov->initialize();

    int* size_vab_ovvo = new int[4];
    size_vab_ovvo[0] = Oa;
    size_vab_ovvo[1] = Vb;
    size_vab_ovvo[2] = Va;
    size_vab_ovvo[3] = Ob;
    int* idmap_vab_ovvo = new int[4];
    idmap_vab_ovvo[0] = 0;
    idmap_vab_ovvo[1] = 1;
    idmap_vab_ovvo[2] = 2;
    idmap_vab_ovvo[3] = 3;
    int* vgrid_vab_ovvo = new int[4];
    vgrid_vab_ovvo[0] = atoi(argv[3]);
    vgrid_vab_ovvo[1] = atoi(argv[3]);
    vgrid_vab_ovvo[2] = atoi(argv[3]);
    vgrid_vab_ovvo[3] = atoi(argv[3]);
    Tensor* vab_ovvo = new Tensor("cccc", idmap_vab_ovvo, size_vab_ovvo, vgrid_vab_ovvo, grid);
    vab_ovvo->initialize();

    int* size_vab_ovvv = new int[4];
    size_vab_ovvv[0] = Oa;
    size_vab_ovvv[1] = Vb;
    size_vab_ovvv[2] = Va;
    size_vab_ovvv[3] = Vb;
    int* idmap_vab_ovvv = new int[4];
    idmap_vab_ovvv[0] = 0;
    idmap_vab_ovvv[1] = 1;
    idmap_vab_ovvv[2] = 2;
    idmap_vab_ovvv[3] = 3;
    int* vgrid_vab_ovvv = new int[4];
    vgrid_vab_ovvv[0] = atoi(argv[3]);
    vgrid_vab_ovvv[1] = atoi(argv[3]);
    vgrid_vab_ovvv[2] = atoi(argv[3]);
    vgrid_vab_ovvv[3] = atoi(argv[3]);
    Tensor* vab_ovvv = new Tensor("cccc", idmap_vab_ovvv, size_vab_ovvv, vgrid_vab_ovvv, grid);
    vab_ovvv->initialize();

    int* size_vab_vooo = new int[4];
    size_vab_vooo[0] = Va;
    size_vab_vooo[1] = Ob;
    size_vab_vooo[2] = Oa;
    size_vab_vooo[3] = Ob;
    int* idmap_vab_vooo = new int[4];
    idmap_vab_vooo[0] = 0;
    idmap_vab_vooo[1] = 1;
    idmap_vab_vooo[2] = 2;
    idmap_vab_vooo[3] = 3;
    int* vgrid_vab_vooo = new int[4];
    vgrid_vab_vooo[0] = atoi(argv[3]);
    vgrid_vab_vooo[1] = atoi(argv[3]);
    vgrid_vab_vooo[2] = atoi(argv[3]);
    vgrid_vab_vooo[3] = atoi(argv[3]);
    Tensor* vab_vooo = new Tensor("cccc", idmap_vab_vooo, size_vab_vooo, vgrid_vab_vooo, grid);
    vab_vooo->initialize();

    int* size_vab_voov = new int[4];
    size_vab_voov[0] = Va;
    size_vab_voov[1] = Ob;
    size_vab_voov[2] = Oa;
    size_vab_voov[3] = Vb;
    int* idmap_vab_voov = new int[4];
    idmap_vab_voov[0] = 0;
    idmap_vab_voov[1] = 1;
    idmap_vab_voov[2] = 2;
    idmap_vab_voov[3] = 3;
    int* vgrid_vab_voov = new int[4];
    vgrid_vab_voov[0] = atoi(argv[3]);
    vgrid_vab_voov[1] = atoi(argv[3]);
    vgrid_vab_voov[2] = atoi(argv[3]);
    vgrid_vab_voov[3] = atoi(argv[3]);
    Tensor* vab_voov = new Tensor("cccc", idmap_vab_voov, size_vab_voov, vgrid_vab_voov, grid);
    vab_voov->initialize();

    int* size_vab_vovo = new int[4];
    size_vab_vovo[0] = Va;
    size_vab_vovo[1] = Ob;
    size_vab_vovo[2] = Va;
    size_vab_vovo[3] = Ob;
    int* idmap_vab_vovo = new int[4];
    idmap_vab_vovo[0] = 0;
    idmap_vab_vovo[1] = 1;
    idmap_vab_vovo[2] = 2;
    idmap_vab_vovo[3] = 3;
    int* vgrid_vab_vovo = new int[4];
    vgrid_vab_vovo[0] = atoi(argv[3]);
    vgrid_vab_vovo[1] = atoi(argv[3]);
    vgrid_vab_vovo[2] = atoi(argv[3]);
    vgrid_vab_vovo[3] = atoi(argv[3]);
    Tensor* vab_vovo = new Tensor("cccc", idmap_vab_vovo, size_vab_vovo, vgrid_vab_vovo, grid);
    vab_vovo->initialize();

    int* size_vab_vovv = new int[4];
    size_vab_vovv[0] = Va;
    size_vab_vovv[1] = Ob;
    size_vab_vovv[2] = Va;
    size_vab_vovv[3] = Vb;
    int* idmap_vab_vovv = new int[4];
    idmap_vab_vovv[0] = 0;
    idmap_vab_vovv[1] = 1;
    idmap_vab_vovv[2] = 2;
    idmap_vab_vovv[3] = 3;
    int* vgrid_vab_vovv = new int[4];
    vgrid_vab_vovv[0] = atoi(argv[3]);
    vgrid_vab_vovv[1] = atoi(argv[3]);
    vgrid_vab_vovv[2] = atoi(argv[3]);
    vgrid_vab_vovv[3] = atoi(argv[3]);
    Tensor* vab_vovv = new Tensor("cccc", idmap_vab_vovv, size_vab_vovv, vgrid_vab_vovv, grid);
    vab_vovv->initialize();

    int* size_vab_vvoo = new int[4];
    size_vab_vvoo[0] = Va;
    size_vab_vvoo[1] = Vb;
    size_vab_vvoo[2] = Oa;
    size_vab_vvoo[3] = Ob;
    int* idmap_vab_vvoo = new int[4];
    idmap_vab_vvoo[0] = 0;
    idmap_vab_vvoo[1] = 1;
    idmap_vab_vvoo[2] = 2;
    idmap_vab_vvoo[3] = 3;
    int* vgrid_vab_vvoo = new int[4];
    vgrid_vab_vvoo[0] = atoi(argv[3]);
    vgrid_vab_vvoo[1] = atoi(argv[3]);
    vgrid_vab_vvoo[2] = atoi(argv[3]);
    vgrid_vab_vvoo[3] = atoi(argv[3]);
    Tensor* vab_vvoo = new Tensor("cccc", idmap_vab_vvoo, size_vab_vvoo, vgrid_vab_vvoo, grid);
    vab_vvoo->initialize();

    int* size_vab_vvov = new int[4];
    size_vab_vvov[0] = Va;
    size_vab_vvov[1] = Vb;
    size_vab_vvov[2] = Oa;
    size_vab_vvov[3] = Vb;
    int* idmap_vab_vvov = new int[4];
    idmap_vab_vvov[0] = 0;
    idmap_vab_vvov[1] = 1;
    idmap_vab_vvov[2] = 2;
    idmap_vab_vvov[3] = 3;
    int* vgrid_vab_vvov = new int[4];
    vgrid_vab_vvov[0] = atoi(argv[3]);
    vgrid_vab_vvov[1] = atoi(argv[3]);
    vgrid_vab_vvov[2] = atoi(argv[3]);
    vgrid_vab_vvov[3] = atoi(argv[3]);
    Tensor* vab_vvov = new Tensor("cccc", idmap_vab_vvov, size_vab_vvov, vgrid_vab_vvov, grid);
    vab_vvov->initialize();

    int* size_vab_vvvo = new int[4];
    size_vab_vvvo[0] = Va;
    size_vab_vvvo[1] = Vb;
    size_vab_vvvo[2] = Va;
    size_vab_vvvo[3] = Ob;
    int* idmap_vab_vvvo = new int[4];
    idmap_vab_vvvo[0] = 0;
    idmap_vab_vvvo[1] = 1;
    idmap_vab_vvvo[2] = 2;
    idmap_vab_vvvo[3] = 3;
    int* vgrid_vab_vvvo = new int[4];
    vgrid_vab_vvvo[0] = atoi(argv[3]);
    vgrid_vab_vvvo[1] = atoi(argv[3]);
    vgrid_vab_vvvo[2] = atoi(argv[3]);
    vgrid_vab_vvvo[3] = atoi(argv[3]);
    Tensor* vab_vvvo = new Tensor("cccc", idmap_vab_vvvo, size_vab_vvvo, vgrid_vab_vvvo, grid);
    vab_vvvo->initialize();

    int* size_vab_vvvv = new int[4];
    size_vab_vvvv[0] = Va;
    size_vab_vvvv[1] = Vb;
    size_vab_vvvv[2] = Va;
    size_vab_vvvv[3] = Vb;
    int* idmap_vab_vvvv = new int[4];
    idmap_vab_vvvv[0] = 0;
    idmap_vab_vvvv[1] = 1;
    idmap_vab_vvvv[2] = 2;
    idmap_vab_vvvv[3] = 3;
    int* vgrid_vab_vvvv = new int[4];
    vgrid_vab_vvvv[0] = atoi(argv[3]);
    vgrid_vab_vvvv[1] = atoi(argv[3]);
    vgrid_vab_vvvv[2] = atoi(argv[3]);
    vgrid_vab_vvvv[3] = atoi(argv[3]);
    Tensor* vab_vvvv = new Tensor("cccc", idmap_vab_vvvv, size_vab_vvvv, vgrid_vab_vvvv, grid);
    vab_vvvv->initialize();

    int* size_vbb_oooo = new int[4];
    size_vbb_oooo[0] = Ob;
    size_vbb_oooo[1] = Ob;
    size_vbb_oooo[2] = Ob;
    size_vbb_oooo[3] = Ob;
    int* idmap_vbb_oooo = new int[4];
    idmap_vbb_oooo[0] = 0;
    idmap_vbb_oooo[1] = 1;
    idmap_vbb_oooo[2] = 2;
    idmap_vbb_oooo[3] = 3;
    int* vgrid_vbb_oooo = new int[4];
    vgrid_vbb_oooo[0] = atoi(argv[3]);
    vgrid_vbb_oooo[1] = atoi(argv[3]);
    vgrid_vbb_oooo[2] = atoi(argv[3]);
    vgrid_vbb_oooo[3] = atoi(argv[3]);
    Tensor* vbb_oooo = new Tensor("aabb", idmap_vbb_oooo, size_vbb_oooo, vgrid_vbb_oooo, grid);
    vbb_oooo->initialize();

    int* size_vbb_oovo = new int[4];
    size_vbb_oovo[0] = Ob;
    size_vbb_oovo[1] = Ob;
    size_vbb_oovo[2] = Vb;
    size_vbb_oovo[3] = Ob;
    int* idmap_vbb_oovo = new int[4];
    idmap_vbb_oovo[0] = 0;
    idmap_vbb_oovo[1] = 1;
    idmap_vbb_oovo[2] = 2;
    idmap_vbb_oovo[3] = 3;
    int* vgrid_vbb_oovo = new int[4];
    vgrid_vbb_oovo[0] = atoi(argv[3]);
    vgrid_vbb_oovo[1] = atoi(argv[3]);
    vgrid_vbb_oovo[2] = atoi(argv[3]);
    vgrid_vbb_oovo[3] = atoi(argv[3]);
    Tensor* vbb_oovo = new Tensor("aacc", idmap_vbb_oovo, size_vbb_oovo, vgrid_vbb_oovo, grid);
    vbb_oovo->initialize();

    int* size_vbb_oovv = new int[4];
    size_vbb_oovv[0] = Ob;
    size_vbb_oovv[1] = Ob;
    size_vbb_oovv[2] = Vb;
    size_vbb_oovv[3] = Vb;
    int* idmap_vbb_oovv = new int[4];
    idmap_vbb_oovv[0] = 0;
    idmap_vbb_oovv[1] = 1;
    idmap_vbb_oovv[2] = 2;
    idmap_vbb_oovv[3] = 3;
    int* vgrid_vbb_oovv = new int[4];
    vgrid_vbb_oovv[0] = atoi(argv[3]);
    vgrid_vbb_oovv[1] = atoi(argv[3]);
    vgrid_vbb_oovv[2] = atoi(argv[3]);
    vgrid_vbb_oovv[3] = atoi(argv[3]);
    Tensor* vbb_oovv = new Tensor("aabb", idmap_vbb_oovv, size_vbb_oovv, vgrid_vbb_oovv, grid);
    vbb_oovv->initialize();

    int* size_vbb_vooo = new int[4];
    size_vbb_vooo[0] = Vb;
    size_vbb_vooo[1] = Ob;
    size_vbb_vooo[2] = Ob;
    size_vbb_vooo[3] = Ob;
    int* idmap_vbb_vooo = new int[4];
    idmap_vbb_vooo[0] = 0;
    idmap_vbb_vooo[1] = 1;
    idmap_vbb_vooo[2] = 2;
    idmap_vbb_vooo[3] = 3;
    int* vgrid_vbb_vooo = new int[4];
    vgrid_vbb_vooo[0] = atoi(argv[3]);
    vgrid_vbb_vooo[1] = atoi(argv[3]);
    vgrid_vbb_vooo[2] = atoi(argv[3]);
    vgrid_vbb_vooo[3] = atoi(argv[3]);
    Tensor* vbb_vooo = new Tensor("ccaa", idmap_vbb_vooo, size_vbb_vooo, vgrid_vbb_vooo, grid);
    vbb_vooo->initialize();

    int* size_vbb_vovo = new int[4];
    size_vbb_vovo[0] = Vb;
    size_vbb_vovo[1] = Ob;
    size_vbb_vovo[2] = Vb;
    size_vbb_vovo[3] = Ob;
    int* idmap_vbb_vovo = new int[4];
    idmap_vbb_vovo[0] = 0;
    idmap_vbb_vovo[1] = 1;
    idmap_vbb_vovo[2] = 2;
    idmap_vbb_vovo[3] = 3;
    int* vgrid_vbb_vovo = new int[4];
    vgrid_vbb_vovo[0] = atoi(argv[3]);
    vgrid_vbb_vovo[1] = atoi(argv[3]);
    vgrid_vbb_vovo[2] = atoi(argv[3]);
    vgrid_vbb_vovo[3] = atoi(argv[3]);
    Tensor* vbb_vovo = new Tensor("cccc", idmap_vbb_vovo, size_vbb_vovo, vgrid_vbb_vovo, grid);
    vbb_vovo->initialize();

    int* size_vbb_vovv = new int[4];
    size_vbb_vovv[0] = Vb;
    size_vbb_vovv[1] = Ob;
    size_vbb_vovv[2] = Vb;
    size_vbb_vovv[3] = Vb;
    int* idmap_vbb_vovv = new int[4];
    idmap_vbb_vovv[0] = 0;
    idmap_vbb_vovv[1] = 1;
    idmap_vbb_vovv[2] = 2;
    idmap_vbb_vovv[3] = 3;
    int* vgrid_vbb_vovv = new int[4];
    vgrid_vbb_vovv[0] = atoi(argv[3]);
    vgrid_vbb_vovv[1] = atoi(argv[3]);
    vgrid_vbb_vovv[2] = atoi(argv[3]);
    vgrid_vbb_vovv[3] = atoi(argv[3]);
    Tensor* vbb_vovv = new Tensor("ccaa", idmap_vbb_vovv, size_vbb_vovv, vgrid_vbb_vovv, grid);
    vbb_vovv->initialize();

    int* size_vbb_vvoo = new int[4];
    size_vbb_vvoo[0] = Vb;
    size_vbb_vvoo[1] = Vb;
    size_vbb_vvoo[2] = Ob;
    size_vbb_vvoo[3] = Ob;
    int* idmap_vbb_vvoo = new int[4];
    idmap_vbb_vvoo[0] = 0;
    idmap_vbb_vvoo[1] = 1;
    idmap_vbb_vvoo[2] = 2;
    idmap_vbb_vvoo[3] = 3;
    int* vgrid_vbb_vvoo = new int[4];
    vgrid_vbb_vvoo[0] = atoi(argv[3]);
    vgrid_vbb_vvoo[1] = atoi(argv[3]);
    vgrid_vbb_vvoo[2] = atoi(argv[3]);
    vgrid_vbb_vvoo[3] = atoi(argv[3]);
    Tensor* vbb_vvoo = new Tensor("aabb", idmap_vbb_vvoo, size_vbb_vvoo, vgrid_vbb_vvoo, grid);
    vbb_vvoo->initialize();

    int* size_vbb_vvvo = new int[4];
    size_vbb_vvvo[0] = Vb;
    size_vbb_vvvo[1] = Vb;
    size_vbb_vvvo[2] = Vb;
    size_vbb_vvvo[3] = Ob;
    int* idmap_vbb_vvvo = new int[4];
    idmap_vbb_vvvo[0] = 0;
    idmap_vbb_vvvo[1] = 1;
    idmap_vbb_vvvo[2] = 2;
    idmap_vbb_vvvo[3] = 3;
    int* vgrid_vbb_vvvo = new int[4];
    vgrid_vbb_vvvo[0] = atoi(argv[3]);
    vgrid_vbb_vvvo[1] = atoi(argv[3]);
    vgrid_vbb_vvvo[2] = atoi(argv[3]);
    vgrid_vbb_vvvo[3] = atoi(argv[3]);
    Tensor* vbb_vvvo = new Tensor("aacc", idmap_vbb_vvvo, size_vbb_vvvo, vgrid_vbb_vvvo, grid);
    vbb_vvvo->initialize();

    int* size_vbb_vvvv = new int[4];
    size_vbb_vvvv[0] = Vb;
    size_vbb_vvvv[1] = Vb;
    size_vbb_vvvv[2] = Vb;
    size_vbb_vvvv[3] = Vb;
    int* idmap_vbb_vvvv = new int[4];
    idmap_vbb_vvvv[0] = 0;
    idmap_vbb_vvvv[1] = 1;
    idmap_vbb_vvvv[2] = 2;
    idmap_vbb_vvvv[3] = 3;
    int* vgrid_vbb_vvvv = new int[4];
    vgrid_vbb_vvvv[0] = atoi(argv[3]);
    vgrid_vbb_vvvv[1] = atoi(argv[3]);
    vgrid_vbb_vvvv[2] = atoi(argv[3]);
    vgrid_vbb_vvvv[3] = atoi(argv[3]);
    Tensor* vbb_vvvv = new Tensor("aabb", idmap_vbb_vvvv, size_vbb_vvvv, vgrid_vbb_vvvv, grid);
    vbb_vvvv->initialize();

    double time = -MPI_Wtime();
    double max_time = 0;

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 0: " << endl;
    Contraction* C0 = new Contraction(vaa_vovv, ta_vo, _a24849, grid);
    C0->contract( "p1a,h2a,p3a,p2a", "p3a,h2a", "p1a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 1: " << endl;
    Contraction* C1 = new Contraction(vab_oovv, tb_vo, _a5246, grid);
    C1->contract( "h2a,h1b,p2a,p1b", "p1b,h2b", "h2a,h1b,p2a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 2: " << endl;
    Contraction* C2 = new Contraction(vbb_oovv, tbb_vvoo, _a14811, grid);
    C2->contract( "h1b,h3b,p1b,p3b", "p1b,p3b,h2b,h3b", "h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 3: " << endl;
    Contraction* C3 = new Contraction(vab_vovo, ta_vo, _a30368, grid);
    C3->contract( "p1a,h1b,p2a,h2b", "p2a,h1a", "p1a,h1b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 4: " << endl;
    Contraction* C4 = new Contraction(vab_ovvv, tab_vvoo, _a34826, grid);
    C4->contract( "h2a,p2b,p2a,p1b", "p2a,p1b,h1a,h2b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 5: " << endl;
    Contraction* C5 = new Contraction(vab_vovv, tb_vo, _a9395, grid);
    C5->contract( "p1a,h1b,p2a,p1b", "p1b,h1b", "p1a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 6: " << endl;
    Contraction* C6 = new Contraction(vaa_oovv, tab_vvoo, _a3071, grid);
    C6->contract( "h2a,h3a,p2a,p3a", "p3a,p2b,h3a,h2b", "h2a,p2b,p2a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 7: " << endl;
    Contraction* C7 = new Contraction(vab_vovv, tb_vo, _a3715, grid);
    C7->contract( "p1a,h1b,p2a,p1b", "p1b,h2b", "p1a,h1b,p2a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 8: " << endl;
    Contraction* C8 = new Contraction(vab_oovv, ta_vo, _a12895, grid);
    C8->contract( "h2a,h1b,p2a,p1b", "p2a,h2a", "h1b,p1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 9: " << endl;
    Contraction* C9 = new Contraction(tab_vvoo, _a5246, _a22682, grid);
    C9->contract( "p2a,p2b,h1a,h1b", "h2a,h1b,p2a,h2b", "p2b,h2a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 10: " << endl;
    Contraction* C10 = new Contraction(vab_oovo, tab_vvoo, _a27108, grid);
    C10->contract( "h2a,h1b,p2a,h2b", "p2a,p2b,h1a,h1b", "h2a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 11: " << endl;
    Contraction* C11 = new Contraction(vbb_oovo, tab_vvoo, _a27232, grid);
    C11->contract( "h1b,h3b,p1b,h2b", "p1a,p1b,h1a,h3b", "h1b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 12: " << endl;
    Contraction* C12 = new Contraction(vab_ooov, tab_vvoo, _a27231, grid);
    C12->contract( "h2a,h1b,h1a,p1b", "p1a,p1b,h2a,h2b", "h1b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 13: " << endl;
    Contraction* C13 = new Contraction(vbb_oovv, tbb_vvoo, _a3023, grid);
    C13->contract( "h1b,h3b,p1b,p3b", "p2b,p3b,h2b,h3b", "h1b,p2b,p1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 14: " << endl;
    Contraction* C14 = new Contraction(vab_oovo, taa_vvoo, _a27296, grid);
    C14->contract( "h2a,h1b,p2a,h2b", "p1a,p2a,h1a,h2a", "h1b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 15: " << endl;
    Contraction* C15 = new Contraction(vaa_oovv, ta_vo, _a18241, grid);
    C15->contract( "h2a,h3a,p2a,p3a", "p3a,h2a", "h3a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 16: " << endl;
    Contraction* C16 = new Contraction(ta_vo, _a18241, _a18246, grid);
    C16->contract( "p2a,h1a", "h3a,p2a", "h3a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 17: " << endl;
    Contraction* C17 = new Contraction(vbb_oovv, tb_vo, _a12781, grid);
    C17->contract( "h1b,h3b,p1b,p3b", "p1b,h3b", "h1b,p3b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 18: " << endl;
    Contraction* C18 = new Contraction(vab_oovv, tab_vvoo, _a3029, grid);
    C18->contract( "h2a,h1b,p2a,p1b", "p2a,p2b,h2a,h2b", "h1b,p2b,p1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 19: " << endl;
    Contraction* C19 = new Contraction(vab_oovv, taa_vvoo, _a3040, grid);
    C19->contract( "h2a,h1b,p2a,p1b", "p1a,p2a,h1a,h2a", "h1b,p1a,p1b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 20: " << endl;
    Contraction* C20 = new Contraction(vab_ovvv, ta_vo, _a34268, grid);
    C20->contract( "h2a,p2b,p2a,p1b", "p2a,h1a", "h2a,p2b,p1b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 21: " << endl;
    Contraction* C21 = new Contraction(tab_vvoo, _a34269, _a34270, grid);
    C21->contract( "p1a,p1b,h2a,h2b", "h2a,p2b,p1b,h1a", "p1a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 22: " << endl;
    Contraction* C22 = new Contraction(tb_vo, _a3040, _a23395, grid);
    C22->contract( "p1b,h2b", "h1b,p1a,p1b,h1a", "h1b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 23: " << endl;
    Contraction* C23 = new Contraction(vaa_oovv, ta_vo, _a28768, grid);
    C23->contract( "h2a,h3a,p3a,p2a", "p3a,h3a", "h2a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 24: " << endl;
    Contraction* C24 = new Contraction(vbb_oovv, tb_vo, _a18471, grid);
    C24->contract( "h1b,h3b,p1b,p3b", "p3b,h1b", "h3b,p1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 25: " << endl;
    Contraction* C25 = new Contraction(fa_ov, tab_vvoo, _a29926, grid);
    C25->contract( "h2a,p2a", "p2a,p2b,h1a,h2b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 26: " << endl;
    Contraction* C26 = new Contraction(tb_vo, _a18471, _a18476, grid);
    C26->contract( "p1b,h2b", "h3b,p1b", "h3b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 27: " << endl;
    Contraction* C27 = new Contraction(vab_oovv, tab_vvoo, _a4801, grid);
    C27->contract( "h2a,h1b,p2a,p1b", "p2a,p2b,h2a,h1b", "p2b,p1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 28: " << endl;
    Contraction* C28 = new Contraction(vaa_vovv, ta_vo, _a3685, grid);
    C28->contract( "p1a,h2a,p2a,p3a", "p2a,h1a", "p1a,h2a,p3a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 29: " << endl;
    Contraction* C29 = new Contraction(vab_ovvo, ta_vo, _a30499, grid);
    C29->contract( "h2a,p2b,p2a,h2b", "p2a,h1a", "h2a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 30: " << endl;
    Contraction* C30 = new Contraction(vab_vovv, tab_vvoo, _a34818, grid);
    C30->contract( "p1a,h1b,p2a,p1b", "p2a,p1b,h1a,h2b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 31: " << endl;
    Contraction* C31 = new Contraction(vbb_oovv, tbb_vvoo, _a4981, grid);
    C31->contract( "h1b,h3b,p1b,p3b", "p2b,p3b,h1b,h3b", "p2b,p1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 32: " << endl;
    Contraction* C32 = new Contraction(vab_vvov, tb_vo, _a10340, grid);
    C32->contract( "p1a,p2b,h1a,p1b", "p1b,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 33: " << endl;
    Contraction* C33 = new Contraction(vaa_oovo, ta_vo, _a19150, grid);
    C33->contract( "h2a,h3a,p2a,h1a", "p2a,h2a", "h3a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 34: " << endl;
    Contraction* C34 = new Contraction(vbb_oovv, tab_vvoo, _a3197, grid);
    C34->contract( "h1b,h2b,p1b,p2b", "p2a,p2b,h2a,h2b", "h1b,p2a,p1b,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 35: " << endl;
    Contraction* C35 = new Contraction(vab_oovv, tab_vvoo, _a13050, grid);
    C35->contract( "h2a,h1b,p2a,p1b", "p2a,p1b,h1a,h1b", "h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 36: " << endl;
    Contraction* C36 = new Contraction(vab_voov, tb_vo, _a30095, grid);
    C36->contract( "p1a,h1b,h1a,p1b", "p1b,h2b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 37: " << endl;
    Contraction* C37 = new Contraction(fb_ov, tab_vvoo, _a30094, grid);
    C37->contract( "h1b,p1b", "p1a,p1b,h1a,h2b", "h1b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 38: " << endl;
    Contraction* C38 = new Contraction(tb_vo, _a12895, _a18706, grid);
    C38->contract( "p1b,h2b", "h1b,p1b", "h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 39: " << endl;
    Contraction* C39 = new Contraction(fa_ov, ta_vo, _a19350, grid);
    C39->contract( "h2a,p2a", "p2a,h1a", "h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 40: " << endl;
    Contraction* C40 = new Contraction(vab_vovv, ta_vo, _a3655, grid);
    C40->contract( "p1a,h1b,p2a,p1b", "p2a,h1a", "p1a,h1b,p1b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 41: " << endl;
    Contraction* C41 = new Contraction(tb_vo, _a24960, _a26520, grid);
    C41->contract( "p1b,h2b", "h1b,p1a,p1b,h1a", "h1b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 42: " << endl;
    Contraction* C42 = new Contraction(vab_oovv, ta_vo, _a5130, grid);
    C42->contract( "h2a,h1b,p2a,p1b", "p2a,h1a", "h2a,h1b,p1b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 43: " << endl;
    Contraction* C43 = new Contraction(tbb_vvoo, _a5130, _a22677, grid);
    C43->contract( "p2b,p1b,h2b,h1b", "h2a,h1b,p1b,h1a", "p2b,h2a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 44: " << endl;
    Contraction* C44 = new Contraction(vab_ovvv, ta_vo, _a9575, grid);
    C44->contract( "h2a,p2b,p2a,p1b", "p2a,h2a", "p2b,p1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 45: " << endl;
    Contraction* C45 = new Contraction(ta_vo, tb_vo, _a34095, grid);
    C45->contract( "p2a,h1a", "p1b,h2b", "p2a,p1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 46: " << endl;
    Contraction* C46 = new Contraction(vab_vvvv, _a34096, _a34097, grid);
    C46->contract( "p1a,p2b,p2a,p1b", "p2a,p1b,h1a,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 47: " << endl;
    Contraction* C47 = new Contraction(vab_oovo, ta_vo, _a19210, grid);
    C47->contract( "h2a,h1b,p2a,h2b", "p2a,h2a", "h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 48: " << endl;
    Contraction* C48 = new Contraction(vaa_oovo, tab_vvoo, _a27056, grid);
    C48->contract( "h2a,h3a,p2a,h1a", "p2a,p2b,h3a,h2b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 49: " << endl;
    Contraction* C49 = new Contraction(vab_ovov, tb_vo, _a29927, grid);
    C49->contract( "h2a,p2b,h1a,p1b", "p1b,h2b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 50: " << endl;
    Contraction* C50 = new Contraction(vbb_vovv, tb_vo, _a3775, grid);
    C50->contract( "p2b,h1b,p1b,p3b", "p1b,h2b", "p2b,h1b,p3b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 51: " << endl;
    Contraction* C51 = new Contraction(tab_vvoo, _a34382, _a34383, grid);
    C51->contract( "p1a,p1b,h1a,h1b", "h1b,p2b,p1b,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 52: " << endl;
    Contraction* C52 = new Contraction(vab_oovv, tb_vo, _a12541, grid);
    C52->contract( "h2a,h1b,p2a,p1b", "p1b,h1b", "h2a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 53: " << endl;
    Contraction* C53 = new Contraction(ta_vo, _a12541, _a18015, grid);
    C53->contract( "p2a,h1a", "h2a,p2a", "h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 54: " << endl;
    Contraction* C54 = new Contraction(ta_vo, _a28769, _a34717, grid);
    C54->contract( "p1a,h2a", "h2a,p2a", "p1a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 55: " << endl;
    Contraction* C55 = new Contraction(vab_ooov, tbb_vvoo, _a27055, grid);
    C55->contract( "h2a,h1b,h1a,p1b", "p2b,p1b,h2b,h1b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 56: " << endl;
    Contraction* C56 = new Contraction(vab_oovv, tab_vvoo, _a13021, grid);
    C56->contract( "h2a,h1b,p2a,p1b", "p2a,p1b,h2a,h2b", "h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 57: " << endl;
    Contraction* C57 = new Contraction(vaa_oovv, taa_vvoo, _a5011, grid);
    C57->contract( "h2a,h3a,p2a,p3a", "p1a,p3a,h2a,h3a", "p1a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 58: " << endl;
    Contraction* C58 = new Contraction(vab_oovo, ta_vo, _a10295, grid);
    C58->contract( "h2a,h1b,p2a,h2b", "p2a,h1a", "h2a,h1b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 59: " << endl;
    Contraction* C59 = new Contraction(fb_ov, tb_vo, _a19380, grid);
    C59->contract( "h1b,p1b", "p1b,h2b", "h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 60: " << endl;
    Contraction* C60 = new Contraction(vab_ovvv, tb_vo, _a3805, grid);
    C60->contract( "h2a,p2b,p2a,p1b", "p1b,h2b", "h2a,p2b,p2a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 61: " << endl;
    Contraction* C61 = new Contraction(vab_oooo, tb_vo, _a34780, grid);
    C61->contract( "h2a,h1b,h1a,h2b", "p2b,h1b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 62: " << endl;
    Contraction* C62 = new Contraction(vab_ooov, tb_vo, _a19120, grid);
    C62->contract( "h2a,h1b,h1a,p1b", "p1b,h1b", "h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 63: " << endl;
    Contraction* C63 = new Contraction(tab_vvoo, _a34239, _a34240, grid);
    C63->contract( "p3a,p2b,h2a,h2b", "p1a,h2a,p3a,h1a", "p2b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 64: " << endl;
    Contraction* C64 = new Contraction(vab_ooov, tb_vo, _a10265, grid);
    C64->contract( "h2a,h1b,h1a,p1b", "p1b,h2b", "h2a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 65: " << endl;
    Contraction* C65 = new Contraction(ta_vo, _a27051, _a30369, grid);
    C65->contract( "p1a,h2a", "h2a,h1b,h1a,h2b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 66: " << endl;
    Contraction* C66 = new Contraction(vbb_vovv, tb_vo, _a9515, grid);
    C66->contract( "p2b,h1b,p1b,p3b", "p1b,h1b", "p2b,p3b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 67: " << endl;
    Contraction* C67 = new Contraction(tab_vvoo, _a34888, _a34889, grid);
    C67->contract( "p1a,p1b,h1a,h2b", "p2b,p1b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 68: " << endl;
    Contraction* C68 = new Contraction(taa_vvoo, _a34809, _a34810, grid);
    C68->contract( "p1a,p2a,h1a,h2a", "h2a,p2b,p2a,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 69: " << endl;
    Contraction* C69 = new Contraction(vab_vvvo, ta_vo, _a10345, grid);
    C69->contract( "p1a,p2b,p2a,h2b", "p2a,h1a", "p1a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 70: " << endl;
    Contraction* C70 = new Contraction(vab_oovv, tab_vvoo, _a3125, grid);
    C70->contract( "h2a,h1b,p2a,p1b", "p1a,p1b,h2a,h2b", "h1b,p1a,p2a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 71: " << endl;
    Contraction* C71 = new Contraction(tab_vvoo, _a34520, _a34521, grid);
    C71->contract( "p2a,p2b,h1a,h1b", "h1b,p1a,p2a,h2b", "p2b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 72: " << endl;
    Contraction* C72 = new Contraction(ta_vo, _a3125, _a23391, grid);
    C72->contract( "p2a,h1a", "h1b,p1a,p2a,h2b", "h1b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 73: " << endl;
    Contraction* C73 = new Contraction(vab_oovv, tab_vvoo, _a4861, grid);
    C73->contract( "h2a,h1b,p2a,p1b", "p1a,p1b,h2a,h1b", "p1a,p2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 74: " << endl;
    Contraction* C74 = new Contraction(tab_vvoo, _a34896, _a34897, grid);
    C74->contract( "p2a,p2b,h1a,h2b", "p1a,p2a", "p2b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 75: " << endl;
    Contraction* C75 = new Contraction(vab_oovv, tab_vvoo, _a4920, grid);
    C75->contract( "h2a,h1b,p2a,p1b", "p2a,p1b,h1a,h2b", "h2a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 76: " << endl;
    Contraction* C76 = new Contraction(ta_vo, _a4920, _a26518, grid);
    C76->contract( "p1a,h2a", "h2a,h1b,h1a,h2b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 77: " << endl;
    Contraction* C77 = new Contraction(tab_vvoo, _a28178, _a29111, grid);
    C77->contract( "p1a,p3b,h1a,h2b", "h1b,p3b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 78: " << endl;
    Contraction* C78 = new Contraction(vaa_oovv, taa_vvoo, _a14870, grid);
    C78->contract( "h2a,h3a,p2a,p3a", "p2a,p3a,h1a,h2a", "h3a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 79: " << endl;
    Contraction* C79 = new Contraction(tab_vvoo, _a34932, _a34933, grid);
    C79->contract( "p1a,p2b,h2a,h2b", "h2a,h1a", "p1a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 80: " << endl;
    Contraction* C80 = new Contraction(vbb_oovo, tb_vo, _a19180, grid);
    C80->contract( "h1b,h3b,p1b,h2b", "p1b,h1b", "h3b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 81: " << endl;
    Contraction* C81 = new Contraction(tab_vvoo, _a34924, _a34925, grid);
    C81->contract( "p1a,p2b,h1a,h1b", "h1b,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 82: " << endl;
    Contraction* C82 = new Contraction(ta_vo, _a25416, _a34676, grid);
    C82->contract( "p2a,h1a", "h2a,p2b,p2a,h2b", "h2a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 83: " << endl;
    Contraction* C83 = new Contraction(ta_vo, _a34952, _a34953, grid);
    C83->contract( "p1a,h2a", "p2b,h2a,h2b,h1a", "p1a,p2b,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 84: " << endl;
    Contraction* C84 = new Contraction(tbb_vvoo, _a34463, _a34464, grid);
    C84->contract( "p2b,p1b,h2b,h1b", "h1b,p1a,p1b,h1a", "p2b,p1a,h2b,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 85: " << endl;
    Contraction* C85 = new Contraction(ta_vo, _a5246, _a9160, grid);
    C85->contract( "p2a,h1a", "h2a,h1b,p2a,h2b", "h2a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 86: " << endl;
    Contraction* C86 = new Contraction(tab_vvoo, _a34878, _a34879, grid);
    C86->contract( "p1a,p2b,h2a,h1b", "h2a,h1b,h1a,h2b", "p1a,p2b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 87: " << endl;
    Contraction* C87 = new Contraction(ta_vo, _a9160, _a29106, grid);
    C87->contract( "p1a,h2a", "h2a,h1b,h1a,h2b", "p1a,h1b,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 88: " << endl;
    Contraction* C88 = new Contraction(tb_vo, _a34944, _a34945, grid);
    C88->contract( "p2b,h1b", "h1b,p1a,h1a,h2b", "p2b,p1a,h1a,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 89: " << endl;
    Contraction* C89 = new Contraction(vaa_vovv, taa_vvoo, _a4601, grid);
    C89->contract( "p1a,h3a,p3a,p4a", "p3a,p4a,h1a,h2a", "p1a,h3a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 90: " << endl;
    Contraction* C90 = new Contraction(vaa_oovv, taa_vvoo, _a10790, grid);
    C90->contract( "h3a,h4a,p3a,p4a", "p3a,p4a,h1a,h2a", "h3a,h4a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 91: " << endl;
    Contraction* C91 = new Contraction(vaa_vovv, ta_vo, _a9455, grid);
    C91->contract( "p1a,h2a,p2a,p3a", "p2a,h2a", "p1a,p3a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 92: " << endl;
    Contraction* C92 = new Contraction(vaa_oovo, taa_vvoo, _a9891, grid);
    C92->contract( "h3a,h4a,p3a,h1a", "p2a,p3a,h2a,h4a", "h3a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 93: " << endl;
    Contraction* C93 = new Contraction(ta_vo, _a9891, _a9894, grid);
    C93->contract( "p1a,h3a", "h3a,p2a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 94: " << endl;
    Contraction* C94 = new Contraction(vaa_oovv, taa_vvoo, _a46510, grid);
    C94->contract( "h3a,h4a,p3a,p4a", "p3a,p4a,h2a,h4a", "h3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 95: " << endl;
    Contraction* C95 = new Contraction(taa_vvoo, _a9395, _a10354, grid);
    C95->contract( "p2a,p3a,h1a,h2a", "p1a,p3a", "p2a,p1a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 96: " << endl;
    Contraction* C96 = new Contraction(fa_ov, taa_vvoo, _a18991, grid);
    C96->contract( "h3a,p3a", "p2a,p3a,h1a,h2a", "h3a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 97: " << endl;
    Contraction* C97 = new Contraction(vaa_vvvo, ta_vo, _a10540, grid);
    C97->contract( "p1a,p2a,p3a,h1a", "p3a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 98: " << endl;
    Contraction* C98 = new Contraction(vab_ooov, tab_vvoo, _a9861, grid);
    C98->contract( "h3a,h1b,h1a,p1b", "p2a,p1b,h2a,h1b", "h3a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 99: " << endl;
    Contraction* C99 = new Contraction(ta_vo, _a9861, _a9864, grid);
    C99->contract( "p1a,h3a", "h3a,p2a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 100: " << endl;
    Contraction* C100 = new Contraction(vaa_oovo, ta_vo, _a10910, grid);
    C100->contract( "h3a,h4a,p3a,h1a", "p3a,h2a", "h3a,h4a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 101: " << endl;
    Contraction* C101 = new Contraction(vaa_oovo, ta_vo, _a42744, grid);
    C101->contract( "h4a,h3a,p3a,h2a", "p3a,h4a", "h3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 102: " << endl;
    Contraction* C102 = new Contraction(tab_vvoo, _a3655, _a3869, grid);
    C102->contract( "p2a,p1b,h2a,h1b", "p1a,h1b,p1b,h1a", "p2a,p1a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 103: " << endl;
    Contraction* C103 = new Contraction(vaa_oovv, ta_vo, _a10551, grid);
    C103->contract( "h3a,h4a,p3a,p4a", "p4a,h2a", "h3a,h4a,p3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 104: " << endl;
    Contraction* C104 = new Contraction(ta_vo, _a10551, _a10556, grid);
    C104->contract( "p3a,h1a", "h3a,h4a,p3a,h2a", "h3a,h4a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 105: " << endl;
    Contraction* C105 = new Contraction(taa_vvoo, _a5011, _a9818, grid);
    C105->contract( "p1a,p3a,h1a,h2a", "p2a,p3a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 106: " << endl;
    Contraction* C106 = new Contraction(ta_vo, _a28769, _a52784, grid);
    C106->contract( "p3a,h2a", "h3a,p3a", "h3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 107: " << endl;
    Contraction* C107 = new Contraction(tab_vvoo, _a3040, _a3283, grid);
    C107->contract( "p1a,p1b,h1a,h1b", "h1b,p2a,p1b,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 108: " << endl;
    Contraction* C108 = new Contraction(tab_vvoo, _a5130, _a5959, grid);
    C108->contract( "p2a,p1b,h2a,h1b", "h3a,h1b,p1b,h1a", "p2a,h3a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 109: " << endl;
    Contraction* C109 = new Contraction(ta_vo, _a5959, _a5967, grid);
    C109->contract( "p1a,h3a", "p2a,h3a,h2a,h1a", "p1a,p2a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 110: " << endl;
    Contraction* C110 = new Contraction(vab_voov, tab_vvoo, _a4490, grid);
    C110->contract( "p1a,h1b,h1a,p1b", "p2a,p1b,h2a,h1b", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 111: " << endl;
    Contraction* C111 = new Contraction(vaa_vovo, ta_vo, _a13260, grid);
    C111->contract( "p1a,h3a,p3a,h1a", "p3a,h2a", "p1a,h3a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 112: " << endl;
    Contraction* C112 = new Contraction(vaa_vovo, taa_vvoo, _a4495, grid);
    C112->contract( "p1a,h3a,p3a,h1a", "p2a,p3a,h2a,h3a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 113: " << endl;
    Contraction* C113 = new Contraction(ta_vo, _a13260, _a13265, grid);
    C113->contract( "p2a,h3a", "p1a,h3a,h1a,h2a", "p2a,p1a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 114: " << endl;
    Contraction* C114 = new Contraction(ta_vo, _a3685, _a6775, grid);
    C114->contract( "p4a,h2a", "p1a,h3a,p4a,h1a", "p1a,h3a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 115: " << endl;
    Contraction* C115 = new Contraction(taa_vvoo, _a3685, _a3919, grid);
    C115->contract( "p2a,p4a,h2a,h3a", "p1a,h3a,p4a,h1a", "p2a,p1a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 116: " << endl;
    Contraction* C116 = new Contraction(taa_vvoo, _a9455, _a10379, grid);
    C116->contract( "p2a,p4a,h1a,h2a", "p1a,p4a", "p2a,p1a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 117: " << endl;
    Contraction* C117 = new Contraction(taa_vvoo, _a4861, _a5043, grid);
    C117->contract( "p1a,p3a,h1a,h2a", "p2a,p3a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 118: " << endl;
    Contraction* C118 = new Contraction(vaa_oovv, ta_vo, _a12666, grid);
    C118->contract( "h2a,h3a,p2a,p3a", "p2a,h3a", "h2a,p3a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 119: " << endl;
    Contraction* C119 = new Contraction(taa_vvoo, _a12666, _a15737, grid);
    C119->contract( "p2a,p4a,h1a,h2a", "h3a,p4a", "p2a,h3a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 120: " << endl;
    Contraction* C120 = new Contraction(tab_vvoo, _a3197, _a3200, grid);
    C120->contract( "p1a,p1b,h1a,h1b", "h1b,p2a,p1b,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 121: " << endl;
    Contraction* C121 = new Contraction(ta_vo, _a6775, _a6788, grid);
    C121->contract( "p2a,h3a", "p1a,h3a,h2a,h1a", "p2a,p1a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 122: " << endl;
    Contraction* C122 = new Contraction(vaa_oooo, ta_vo, _a42703, grid);
    C122->contract( "h3a,h4a,h1a,h2a", "p1a,h3a", "h4a,p1a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 123: " << endl;
    Contraction* C123 = new Contraction(taa_vvoo, _a12541, _a15498, grid);
    C123->contract( "p2a,p3a,h1a,h2a", "h3a,p3a", "p2a,h3a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 124: " << endl;
    Contraction* C124 = new Contraction(taa_vvoo, _a121238, _a121239, grid);
    C124->contract( "p1a,p2a,h1a,h3a", "h3a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 125: " << endl;
    Contraction* C125 = new Contraction(vaa_vvvv, taa_vvoo, _a3645, grid);
    C125->contract( "p1a,p2a,p3a,p4a", "p3a,p4a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 126: " << endl;
    Contraction* C126 = new Contraction(taa_vvoo, _a107369, _a107370, grid);
    C126->contract( "p1a,p2a,h2a,h3a", "h3a,h1a", "p1a,p2a,h2a,h1a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 127: " << endl;
    Contraction* C127 = new Contraction(ta_vo, _a45798, _a48054, grid);
    C127->contract( "p2a,h4a", "h3a,h4a,h1a,h2a", "p2a,h3a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 128: " << endl;
    Contraction* C128 = new Contraction(ta_vo, _a86275, _a86276, grid);
    C128->contract( "p1a,h3a", "p2a,h3a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 129: " << endl;
    Contraction* C129 = new Contraction(taa_vvoo, _a57517, _a57518, grid);
    C129->contract( "p1a,p2a,h3a,h4a", "h3a,h4a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 130: " << endl;
    Contraction* C130 = new Contraction(vaa_oovv, taa_vvoo, _a3331, grid);
    C130->contract( "h3a,h4a,p3a,p4a", "p2a,p4a,h2a,h4a", "h3a,p2a,p3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 131: " << endl;
    Contraction* C131 = new Contraction(ta_vo, _a3331, _a8218, grid);
    C131->contract( "p3a,h1a", "h3a,p2a,p3a,h2a", "h3a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 132: " << endl;
    Contraction* C132 = new Contraction(ta_vo, _a8218, _a8227, grid);
    C132->contract( "p1a,h3a", "h3a,p2a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 133: " << endl;
    Contraction* C133 = new Contraction(taa_vvoo, _a3331, _a3334, grid);
    C133->contract( "p1a,p3a,h1a,h3a", "h3a,p2a,p3a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 134: " << endl;
    Contraction* C134 = new Contraction(fa_vv, taa_vvoo, _a10530, grid);
    C134->contract( "p1a,p3a", "p2a,p3a,h1a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 135: " << endl;
    Contraction* C135 = new Contraction(ta_vo, _a93335, _a93336, grid);
    C135->contract( "p2a,h3a", "h3a,p1a,h1a,h2a", "p2a,p1a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 136: " << endl;
    Contraction* C136 = new Contraction(vaa_vvvv, ta_vo, _a4511, grid);
    C136->contract( "p1a,p2a,p3a,p4a", "p4a,h2a", "p1a,p2a,p3a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 137: " << endl;
    Contraction* C137 = new Contraction(ta_vo, _a4511, _a4514, grid);
    C137->contract( "p3a,h1a", "p1a,p2a,p3a,h2a", "p1a,p2a,h1a,h2a");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 138: " << endl;
    Contraction* C138 = new Contraction(tb_vo, _a3029, _a7197, grid);
    C138->contract( "p3b,h1b", "h3b,p2b,p3b,h2b", "h3b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 139: " << endl;
    Contraction* C139 = new Contraction(tab_vvoo, _a3071, _a3543, grid);
    C139->contract( "p1a,p1b,h1a,h1b", "h1a,p2b,p1a,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 140: " << endl;
    Contraction* C140 = new Contraction(vbb_vovo, tb_vo, _a13350, grid);
    C140->contract( "p1b,h3b,p3b,h1b", "p3b,h2b", "p1b,h3b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 141: " << endl;
    Contraction* C141 = new Contraction(tbb_vvoo, _a4981, _a10043, grid);
    C141->contract( "p1b,p3b,h1b,h2b", "p2b,p3b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 142: " << endl;
    Contraction* C142 = new Contraction(tbb_vvoo, _a4801, _a5089, grid);
    C142->contract( "p1b,p3b,h1b,h2b", "p2b,p3b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 143: " << endl;
    Contraction* C143 = new Contraction(tb_vo, _a3023, _a8628, grid);
    C143->contract( "p3b,h1b", "h3b,p2b,p3b,h2b", "h3b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 144: " << endl;
    Contraction* C144 = new Contraction(fb_ov, tbb_vvoo, _a19071, grid);
    C144->contract( "h3b,p3b", "p2b,p3b,h1b,h2b", "h3b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 145: " << endl;
    Contraction* C145 = new Contraction(vbb_vvvo, tb_vo, _a10545, grid);
    C145->contract( "p1b,p2b,p3b,h1b", "p3b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 146: " << endl;
    Contraction* C146 = new Contraction(vbb_vovo, tbb_vvoo, _a4500, grid);
    C146->contract( "p1b,h3b,p3b,h1b", "p2b,p3b,h2b,h3b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 147: " << endl;
    Contraction* C147 = new Contraction(vab_ovvo, tab_vvoo, _a4505, grid);
    C147->contract( "h1a,p1b,p1a,h1b", "p1a,p2b,h1a,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 148: " << endl;
    Contraction* C148 = new Contraction(vbb_vvvv, tb_vo, _a4541, grid);
    C148->contract( "p1b,p2b,p3b,p4b", "p4b,h2b", "p1b,p2b,p3b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 149: " << endl;
    Contraction* C149 = new Contraction(tb_vo, _a4541, _a4544, grid);
    C149->contract( "p3b,h1b", "p1b,p2b,p3b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 150: " << endl;
    Contraction* C150 = new Contraction(tbb_vvoo, _a3775, _a4209, grid);
    C150->contract( "p2b,p4b,h2b,h3b", "p1b,h3b,p4b,h1b", "p2b,p1b,h2b,h1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 151: " << endl;
    Contraction* C151 = new Contraction(tbb_vvoo, _a12781, _a16377, grid);
    C151->contract( "p2b,p4b,h1b,h2b", "h3b,p4b", "p2b,h3b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 152: " << endl;
    Contraction* C152 = new Contraction(tb_vo, _a13350, _a13355, grid);
    C152->contract( "p2b,h3b", "p1b,h3b,h1b,h2b", "p2b,p1b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 153: " << endl;
    Contraction* C153 = new Contraction(tbb_vvoo, _a9575, _a10469, grid);
    C153->contract( "p2b,p3b,h1b,h2b", "p1b,p3b", "p2b,p1b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 154: " << endl;
    Contraction* C154 = new Contraction(vbb_oovv, tbb_vvoo, _a10850, grid);
    C154->contract( "h3b,h4b,p3b,p4b", "p3b,p4b,h1b,h2b", "h3b,h4b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 155: " << endl;
    Contraction* C155 = new Contraction(tbb_vvoo, _a12895, _a16595, grid);
    C155->contract( "p2b,p3b,h1b,h2b", "h3b,p3b", "p2b,h3b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 156: " << endl;
    Contraction* C156 = new Contraction(vbb_oovo, tb_vo, _a11010, grid);
    C156->contract( "h3b,h4b,p3b,h1b", "p3b,h2b", "h3b,h4b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 157: " << endl;
    Contraction* C157 = new Contraction(vbb_oovo, tbb_vvoo, _a10086, grid);
    C157->contract( "h3b,h4b,p3b,h1b", "p2b,p3b,h2b,h4b", "h3b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 158: " << endl;
    Contraction* C158 = new Contraction(tb_vo, _a10086, _a10089, grid);
    C158->contract( "p1b,h3b", "h3b,p2b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 159: " << endl;
    Contraction* C159 = new Contraction(tb_vo, _a7197, _a7206, grid);
    C159->contract( "p1b,h3b", "h3b,p2b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 160: " << endl;
    Contraction* C160 = new Contraction(tb_vo, _a8628, _a8637, grid);
    C160->contract( "p1b,h3b", "h3b,p2b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 161: " << endl;
    Contraction* C161 = new Contraction(vbb_vovv, tbb_vvoo, _a4701, grid);
    C161->contract( "p1b,h3b,p3b,p4b", "p3b,p4b,h1b,h2b", "p1b,h3b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 162: " << endl;
    Contraction* C162 = new Contraction(tab_vvoo, _a3805, _a4259, grid);
    C162->contract( "p1a,p2b,h1a,h2b", "h1a,p1b,p1a,h1b", "p2b,p1b,h2b,h1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 163: " << endl;
    Contraction* C163 = new Contraction(vbb_vvvv, tbb_vvoo, _a3650, grid);
    C163->contract( "p1b,p2b,p3b,p4b", "p3b,p4b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 164: " << endl;
    Contraction* C164 = new Contraction(vbb_oovv, tb_vo, _a10671, grid);
    C164->contract( "h3b,h4b,p3b,p4b", "p4b,h2b", "h3b,h4b,p3b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 165: " << endl;
    Contraction* C165 = new Contraction(tbb_vvoo, _a3029, _a3499, grid);
    C165->contract( "p1b,p3b,h1b,h3b", "h3b,p2b,p3b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 166: " << endl;
    Contraction* C166 = new Contraction(tb_vo, _a10671, _a10676, grid);
    C166->contract( "p3b,h1b", "h3b,h4b,p3b,h2b", "h3b,h4b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 167: " << endl;
    Contraction* C167 = new Contraction(tbb_vvoo, _a9515, _a10444, grid);
    C167->contract( "p2b,p4b,h1b,h2b", "p1b,p4b", "p2b,p1b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 168: " << endl;
    Contraction* C168 = new Contraction(tbb_vvoo, _a3023, _a3473, grid);
    C168->contract( "p1b,p3b,h1b,h3b", "h3b,p2b,p3b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 169: " << endl;
    Contraction* C169 = new Contraction(vab_oovo, tab_vvoo, _a10116, grid);
    C169->contract( "h1a,h3b,p1a,h1b", "p1a,p2b,h1a,h2b", "h3b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 170: " << endl;
    Contraction* C170 = new Contraction(tb_vo, _a10116, _a10119, grid);
    C170->contract( "p1b,h3b", "h3b,p2b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 171: " << endl;
    Contraction* C171 = new Contraction(vbb_oovv, tbb_vvoo, _a174692, grid);
    C171->contract( "h3b,h4b,p3b,p4b", "p3b,p4b,h1b,h3b", "h4b,h1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 172: " << endl;
    Contraction* C172 = new Contraction(tbb_vvoo, _a241201, _a241202, grid);
    C172->contract( "p1b,p2b,h2b,h3b", "h3b,h1b", "p1b,p2b,h2b,h1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 173: " << endl;
    Contraction* C173 = new Contraction(tbb_vvoo, _a254814, _a254815, grid);
    C173->contract( "p1b,p2b,h1b,h3b", "h3b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 174: " << endl;
    Contraction* C174 = new Contraction(vbb_oooo, tb_vo, _a177605, grid);
    C174->contract( "h3b,h4b,h1b,h2b", "p1b,h3b", "h4b,p1b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 175: " << endl;
    Contraction* C175 = new Contraction(tb_vo, _a227425, _a227426, grid);
    C175->contract( "p2b,h3b", "h3b,p1b,h1b,h2b", "p2b,p1b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 176: " << endl;
    Contraction* C176 = new Contraction(tb_vo, _a180621, _a182867, grid);
    C176->contract( "p2b,h4b", "h3b,h4b,h1b,h2b", "p2b,h3b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 177: " << endl;
    Contraction* C177 = new Contraction(tbb_vvoo, _a192257, _a192258, grid);
    C177->contract( "p1b,p2b,h3b,h4b", "h3b,h4b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 178: " << endl;
    Contraction* C178 = new Contraction(tb_vo, _a220495, _a220496, grid);
    C178->contract( "p1b,h3b", "p2b,h3b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 179: " << endl;
    Contraction* C179 = new Contraction(fb_vv, tbb_vvoo, _a10535, grid);
    C179->contract( "p1b,p3b", "p2b,p3b,h1b,h2b", "p1b,p2b,h1b,h2b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 180: " << endl;
    Contraction* C180 = new Contraction(tb_vo, _a3775, _a7785, grid);
    C180->contract( "p4b,h2b", "p1b,h3b,p4b,h1b", "p1b,h3b,h2b,h1b");

    if(rank==0 && DEBUG_T) cout << endl << endl << "Contraction 181: " << endl;
    Contraction* C181 = new Contraction(tb_vo, _a7785, _a7798, grid);
    C181->contract( "p2b,h3b", "p1b,h3b,h2b,h1b", "p2b,p1b,h2b,h1b");

    time += MPI_Wtime();
    MPI_Reduce(&time, &max_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
    if(rank==0) cout<<endl<<endl<<"Total CAST CCSD Time = " << max_time << " seconds" << endl;

    MPI_Finalize();
}
